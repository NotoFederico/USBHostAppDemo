
USBHostAppDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  0800ac9c  0800ac9c  0001ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b444  0800b444  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b444  0800b444  0001b444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b44c  0800b44c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b44c  0800b44c  0001b44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b450  0800b450  0001b450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006904  200000a4  0800b4f8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200069a8  0800b4f8  000269a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d69  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046de  00000000  00000000  00041e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00046520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00047340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253bc  00000000  00000000  00047fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a1e  00000000  00000000  0006d364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6513  00000000  00000000  00083d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  0014a2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac84 	.word	0x0800ac84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800ac84 	.word	0x0800ac84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800057c:	f000 fadc 	bl	8000b38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000580:	f000 f918 	bl	80007b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000584:	f000 f980 	bl	8000888 <MX_GPIO_Init>
	MX_FATFS_Init();
 8000588:	f003 ff5c 	bl	8004444 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 800058c:	f009 fbd2 	bl	8009d34 <MX_USB_HOST_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000590:	f009 fbf6 	bl	8009d80 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		switch (Appli_state) {
 8000594:	4b3f      	ldr	r3, [pc, #252]	; (8000694 <main+0x11c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d8f9      	bhi.n	8000590 <main+0x18>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <main+0x2c>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	08000591 	.word	0x08000591
 80005a8:	080005b5 	.word	0x080005b5
 80005ac:	08000603 	.word	0x08000603
 80005b0:	08000683 	.word	0x08000683
		case APPLICATION_IDLE:
			break;
		case APPLICATION_START:
			/*Register the file system object to the FATFS module */
			if (f_mount(&myUSBFatFS, (TCHAR const*) USBHPath, 0) != FR_OK) {
 80005b4:	2200      	movs	r2, #0
 80005b6:	4938      	ldr	r1, [pc, #224]	; (8000698 <main+0x120>)
 80005b8:	4838      	ldr	r0, [pc, #224]	; (800069c <main+0x124>)
 80005ba:	f008 fdb1 	bl	8009120 <f_mount>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <main+0x52>
				/*FATFS Initialization Error*/
				Error_Handler();
 80005c4:	f000 f9e4 	bl	8000990 <Error_Handler>
 80005c8:	e017      	b.n	80005fa <main+0x82>
			} else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); //Green led
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	4833      	ldr	r0, [pc, #204]	; (80006a0 <main+0x128>)
 80005d2:	f000 fe0d 	bl	80011f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //Red led
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	4830      	ldr	r0, [pc, #192]	; (80006a0 <main+0x128>)
 80005de:	f000 fe07 	bl	80011f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); //Blue led
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e8:	482d      	ldr	r0, [pc, #180]	; (80006a0 <main+0x128>)
 80005ea:	f000 fe01 	bl	80011f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); //Orange led
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	482a      	ldr	r0, [pc, #168]	; (80006a0 <main+0x128>)
 80005f6:	f000 fdfb 	bl	80011f0 <HAL_GPIO_WritePin>
			}
			Appli_state = APPLICATION_IDLE;
 80005fa:	4b26      	ldr	r3, [pc, #152]	; (8000694 <main+0x11c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
			break;
 8000600:	e047      	b.n	8000692 <main+0x11a>
		case APPLICATION_READY:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000602:	2101      	movs	r1, #1
 8000604:	4827      	ldr	r0, [pc, #156]	; (80006a4 <main+0x12c>)
 8000606:	f000 fddb 	bl	80011c0 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	d13f      	bne.n	8000690 <main+0x118>
				if (USBTestWrite()) {
 8000610:	f000 f84a 	bl	80006a8 <USBTestWrite>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d028      	beq.n	800066c <main+0xf4>
					if(USBTestRead()){
 800061a:	f000 f885 	bl	8000728 <USBTestRead>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d018      	beq.n	8000656 <main+0xde>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //Red led
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	481d      	ldr	r0, [pc, #116]	; (80006a0 <main+0x128>)
 800062c:	f000 fde0 	bl	80011f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); //Blue led
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000636:	481a      	ldr	r0, [pc, #104]	; (80006a0 <main+0x128>)
 8000638:	f000 fdda 	bl	80011f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); //Orange led
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4817      	ldr	r0, [pc, #92]	; (80006a0 <main+0x128>)
 8000644:	f000 fdd4 	bl	80011f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); //Blue led
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <main+0x128>)
 8000650:	f000 fdce 	bl	80011f0 <HAL_GPIO_WritePin>
				} else {
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //Red led
					HAL_Delay(1000);
				}
			}
			break;
 8000654:	e01c      	b.n	8000690 <main+0x118>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //Red led
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0x128>)
 800065e:	f000 fdc7 	bl	80011f0 <HAL_GPIO_WritePin>
						HAL_Delay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f000 fad9 	bl	8000c1c <HAL_Delay>
			break;
 800066a:	e011      	b.n	8000690 <main+0x118>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //Red led
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0x128>)
 8000674:	f000 fdbc 	bl	80011f0 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f000 face 	bl	8000c1c <HAL_Delay>
			break;
 8000680:	e006      	b.n	8000690 <main+0x118>
		case APPLICATION_DISCONNECT:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <main+0x128>)
 800068a:	f000 fdb1 	bl	80011f0 <HAL_GPIO_WritePin>
			break;
 800068e:	e000      	b.n	8000692 <main+0x11a>
			break;
 8000690:	bf00      	nop
		MX_USB_HOST_Process();
 8000692:	e77d      	b.n	8000590 <main+0x18>
 8000694:	20000100 	.word	0x20000100
 8000698:	200021e8 	.word	0x200021e8
 800069c:	20001140 	.word	0x20001140
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	40020000 	.word	0x40020000

080006a8 <USBTestWrite>:
	}
	/* USER CODE END 3 */
}

//USB test write function
bool USBTestWrite(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	char *str =
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <USBTestWrite+0x68>)
 80006b0:	607b      	str	r3, [r7, #4]
					"\n<p>This page was generated by the Firebase Command-Line Interface. To modify it, edit the <code>404.html</code> file in your project's configured <code>public</code> directory.</p>"
					"\n</div>"
					"\n</body>"
					"\n</html>";
	FRESULT resultado;
	resultado = f_open(&myFile, "test2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80006b2:	220a      	movs	r2, #10
 80006b4:	4917      	ldr	r1, [pc, #92]	; (8000714 <USBTestWrite+0x6c>)
 80006b6:	4818      	ldr	r0, [pc, #96]	; (8000718 <USBTestWrite+0x70>)
 80006b8:	f008 fd78 	bl	80091ac <f_open>
 80006bc:	4603      	mov	r3, r0
 80006be:	70fb      	strb	r3, [r7, #3]
	if (resultado != FR_OK) {
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <USBTestWrite+0x22>
		return 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e01e      	b.n	8000708 <USBTestWrite+0x60>
	} else {
		sprintf(rwtext, str);
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <USBTestWrite+0x74>)
 80006ce:	f009 ff73 	bl	800a5b8 <siprintf>
		myRes = f_write(&myFile, (uint8_t*) rwtext, strlen(rwtext),
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <USBTestWrite+0x74>)
 80006d4:	f7ff fd7c 	bl	80001d0 <strlen>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <USBTestWrite+0x78>)
 80006dc:	490f      	ldr	r1, [pc, #60]	; (800071c <USBTestWrite+0x74>)
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <USBTestWrite+0x70>)
 80006e0:	f009 f88f 	bl	8009802 <f_write>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <USBTestWrite+0x7c>)
 80006ea:	701a      	strb	r2, [r3, #0]
				&byteswritten);
		if ((byteswritten == 0) && (myRes != FR_OK)) {
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <USBTestWrite+0x78>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d105      	bne.n	8000700 <USBTestWrite+0x58>
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <USBTestWrite+0x7c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <USBTestWrite+0x58>
			return 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e003      	b.n	8000708 <USBTestWrite+0x60>
		}
	}
	f_close(&myFile);
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <USBTestWrite+0x70>)
 8000702:	f009 fa90 	bl	8009c26 <f_close>
	return 1;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	0800ac9c 	.word	0x0800ac9c
 8000714:	0800b318 	.word	0x0800b318
 8000718:	2000010c 	.word	0x2000010c
 800071c:	20002178 	.word	0x20002178
 8000720:	2000113c 	.word	0x2000113c
 8000724:	200021dc 	.word	0x200021dc

08000728 <USBTestRead>:

bool USBTestRead(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	FRESULT resultado;
	resultado = f_open(&myFile, "test2.txt", FA_READ);
 800072e:	2201      	movs	r2, #1
 8000730:	491b      	ldr	r1, [pc, #108]	; (80007a0 <USBTestRead+0x78>)
 8000732:	481c      	ldr	r0, [pc, #112]	; (80007a4 <USBTestRead+0x7c>)
 8000734:	f008 fd3a 	bl	80091ac <f_open>
 8000738:	4603      	mov	r3, r0
 800073a:	71bb      	strb	r3, [r7, #6]
	if (resultado != FR_OK) {
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <USBTestRead+0x1e>
		return 0;
 8000742:	2300      	movs	r3, #0
 8000744:	e027      	b.n	8000796 <USBTestRead+0x6e>
	} else {
		for (uint8_t i = 0; i < 100; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	e017      	b.n	800077c <USBTestRead+0x54>
			myRes = f_read(&myFile, (uint8_t*) &rwtext[i], 1, &bytesread);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <USBTestRead+0x80>)
 8000750:	1899      	adds	r1, r3, r2
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <USBTestRead+0x84>)
 8000754:	2201      	movs	r2, #1
 8000756:	4813      	ldr	r0, [pc, #76]	; (80007a4 <USBTestRead+0x7c>)
 8000758:	f008 fef4 	bl	8009544 <f_read>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <USBTestRead+0x88>)
 8000762:	701a      	strb	r2, [r3, #0]
			if (rwtext[i] == 0x00) {
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <USBTestRead+0x80>)
 8000768:	5cd3      	ldrb	r3, [r2, r3]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <USBTestRead+0x4e>
				bytesread = 1;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <USBTestRead+0x84>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
				break;
 8000774:	e005      	b.n	8000782 <USBTestRead+0x5a>
		for (uint8_t i = 0; i < 100; i++) {
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3301      	adds	r3, #1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b63      	cmp	r3, #99	; 0x63
 8000780:	d9e4      	bls.n	800074c <USBTestRead+0x24>
			}
		}
		if (bytesread == 0) {
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <USBTestRead+0x84>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <USBTestRead+0x66>
			return 0;
 800078a:	2300      	movs	r3, #0
 800078c:	e003      	b.n	8000796 <USBTestRead+0x6e>
		}
	}

	f_close(&myFile);
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <USBTestRead+0x7c>)
 8000790:	f009 fa49 	bl	8009c26 <f_close>
	return 1;
 8000794:	2301      	movs	r3, #1
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	0800b318 	.word	0x0800b318
 80007a4:	2000010c 	.word	0x2000010c
 80007a8:	20002178 	.word	0x20002178
 80007ac:	20002174 	.word	0x20002174
 80007b0:	200021dc 	.word	0x200021dc

080007b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f009 fe36 	bl	800a434 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a27      	ldr	r2, [pc, #156]	; (8000880 <SystemClock_Config+0xcc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000824:	2308      	movs	r3, #8
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000832:	2307      	movs	r3, #7
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fa56 	bl	8002cec <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x96>
		Error_Handler();
 8000846:	f000 f8a3 	bl	8000990 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2105      	movs	r1, #5
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fcb7 	bl	80031dc <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc4>
		Error_Handler();
 8000874:	f000 f88c 	bl	8000990 <Error_Handler>
	}
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	; 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b37      	ldr	r3, [pc, #220]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a36      	ldr	r2, [pc, #216]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2f      	ldr	r2, [pc, #188]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a21      	ldr	r2, [pc, #132]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_GPIO_Init+0xf8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_PowerSwitch_GPIO_Port, OTG_PowerSwitch_Pin,
 800090e:	2200      	movs	r2, #0
 8000910:	2101      	movs	r1, #1
 8000912:	481c      	ldr	r0, [pc, #112]	; (8000984 <MX_GPIO_Init+0xfc>)
 8000914:	f000 fc6c 	bl	80011f0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <MX_GPIO_Init+0x100>)
 8000920:	f000 fc66 	bl	80011f0 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_PowerSwitch_Pin */
	GPIO_InitStruct.Pin = OTG_PowerSwitch_Pin;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(OTG_PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <MX_GPIO_Init+0xfc>)
 800093c:	f000 faa4 	bl	8000e88 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000940:	2301      	movs	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <MX_GPIO_Init+0x104>)
 8000954:	f000 fa98 	bl	8000e88 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000958:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800095c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_GPIO_Init+0x100>)
 8000972:	f000 fa89 	bl	8000e88 <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020000 	.word	0x40020000

08000990 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009da:	2007      	movs	r0, #7
 80009dc:	f000 fa12 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f8d0 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <OTG_FS_IRQHandler+0x10>)
 8000a46:	f000 fe57 	bl	80016f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20006694 	.word	0x20006694

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f009 fc8e 	bl	800a3a4 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20020000 	.word	0x20020000
 8000ab4:	00000800 	.word	0x00000800
 8000ab8:	200000c0 	.word	0x200000c0
 8000abc:	200069a8 	.word	0x200069a8

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aea:	490e      	ldr	r1, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b00:	4c0b      	ldr	r4, [pc, #44]	; (8000b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b0e:	f7ff ffd7 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f009 fc4d 	bl	800a3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd2f 	bl	8000578 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000b28:	0800b454 	.word	0x0800b454
  ldr r2, =_sbss
 8000b2c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000b30:	200069a8 	.word	0x200069a8

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f94f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff ff16 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f967 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f92f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200021e0 	.word	0x200021e0

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200021e0 	.word	0x200021e0

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e16b      	b.n	800117c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 815a 	bne.w	8001176 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d005      	beq.n	8000eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d130      	bne.n	8000f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80b4 	beq.w	8001176 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b60      	ldr	r3, [pc, #384]	; (8001194 <HAL_GPIO_Init+0x30c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a5f      	ldr	r2, [pc, #380]	; (8001194 <HAL_GPIO_Init+0x30c>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_GPIO_Init+0x30c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	4a5b      	ldr	r2, [pc, #364]	; (8001198 <HAL_GPIO_Init+0x310>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a52      	ldr	r2, [pc, #328]	; (800119c <HAL_GPIO_Init+0x314>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d02b      	beq.n	80010ae <HAL_GPIO_Init+0x226>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <HAL_GPIO_Init+0x318>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d025      	beq.n	80010aa <HAL_GPIO_Init+0x222>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a50      	ldr	r2, [pc, #320]	; (80011a4 <HAL_GPIO_Init+0x31c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d01f      	beq.n	80010a6 <HAL_GPIO_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4f      	ldr	r2, [pc, #316]	; (80011a8 <HAL_GPIO_Init+0x320>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x21a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x216>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4d      	ldr	r2, [pc, #308]	; (80011b0 <HAL_GPIO_Init+0x328>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x212>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <HAL_GPIO_Init+0x32c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x20e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4b      	ldr	r2, [pc, #300]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x20a>
 800108e:	2307      	movs	r3, #7
 8001090:	e00e      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 8001092:	2308      	movs	r3, #8
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 8001096:	2306      	movs	r3, #6
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x310>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f2:	4a32      	ldr	r2, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <HAL_GPIO_Init+0x334>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_GPIO_Init+0x334>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae90 	bls.w	8000ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40021c00 	.word	0x40021c00
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001224:	b08f      	sub	sp, #60	; 0x3c
 8001226:	af0a      	add	r7, sp, #40	; 0x28
 8001228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e054      	b.n	80012de <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f008 fdce 	bl	8009df0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 f9ec 	bl	8003650 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	687e      	ldr	r6, [r7, #4]
 8001280:	466d      	mov	r5, sp
 8001282:	f106 0410 	add.w	r4, r6, #16
 8001286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001292:	e885 0003 	stmia.w	r5, {r0, r1}
 8001296:	1d33      	adds	r3, r6, #4
 8001298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f002 f966 	bl	800356c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 f9e3 	bl	8003672 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	687e      	ldr	r6, [r7, #4]
 80012b4:	466d      	mov	r5, sp
 80012b6:	f106 0410 	add.w	r4, r6, #16
 80012ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ca:	1d33      	adds	r3, r6, #4
 80012cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f002 faf6 	bl	80038c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80012e6:	b590      	push	{r4, r7, lr}
 80012e8:	b089      	sub	sp, #36	; 0x24
 80012ea:	af04      	add	r7, sp, #16
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	4608      	mov	r0, r1
 80012f0:	4611      	mov	r1, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	70fb      	strb	r3, [r7, #3]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70bb      	strb	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_HCD_HC_Init+0x28>
 800130a:	2302      	movs	r3, #2
 800130c:	e076      	b.n	80013fc <HAL_HCD_HC_Init+0x116>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	212c      	movs	r1, #44	; 0x2c
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	4413      	add	r3, r2
 8001322:	333d      	adds	r3, #61	; 0x3d
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	212c      	movs	r1, #44	; 0x2c
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	4413      	add	r3, r2
 8001334:	3338      	adds	r3, #56	; 0x38
 8001336:	787a      	ldrb	r2, [r7, #1]
 8001338:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	212c      	movs	r1, #44	; 0x2c
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	4413      	add	r3, r2
 8001346:	3340      	adds	r3, #64	; 0x40
 8001348:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800134a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	212c      	movs	r1, #44	; 0x2c
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	3339      	adds	r3, #57	; 0x39
 800135a:	78fa      	ldrb	r2, [r7, #3]
 800135c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	212c      	movs	r1, #44	; 0x2c
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	4413      	add	r3, r2
 800136a:	333f      	adds	r3, #63	; 0x3f
 800136c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001370:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	78ba      	ldrb	r2, [r7, #2]
 8001376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800137a:	b2d0      	uxtb	r0, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	212c      	movs	r1, #44	; 0x2c
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	4413      	add	r3, r2
 8001386:	333a      	adds	r3, #58	; 0x3a
 8001388:	4602      	mov	r2, r0
 800138a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800138c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da09      	bge.n	80013a8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	212c      	movs	r1, #44	; 0x2c
 800139a:	fb01 f303 	mul.w	r3, r1, r3
 800139e:	4413      	add	r3, r2
 80013a0:	333b      	adds	r3, #59	; 0x3b
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e008      	b.n	80013ba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	212c      	movs	r1, #44	; 0x2c
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	333b      	adds	r3, #59	; 0x3b
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	212c      	movs	r1, #44	; 0x2c
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	333c      	adds	r3, #60	; 0x3c
 80013c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013cc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	787c      	ldrb	r4, [r7, #1]
 80013d4:	78ba      	ldrb	r2, [r7, #2]
 80013d6:	78f9      	ldrb	r1, [r7, #3]
 80013d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	4623      	mov	r3, r4
 80013ea:	f002 fbeb 	bl	8003bc4 <USB_HC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}

08001404 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_HCD_HC_Halt+0x1e>
 800141e:	2302      	movs	r3, #2
 8001420:	e00f      	b.n	8001442 <HAL_HCD_HC_Halt+0x3e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	78fa      	ldrb	r2, [r7, #3]
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f002 fe27 	bl	8004086 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	4608      	mov	r0, r1
 8001456:	4611      	mov	r1, r2
 8001458:	461a      	mov	r2, r3
 800145a:	4603      	mov	r3, r0
 800145c:	70fb      	strb	r3, [r7, #3]
 800145e:	460b      	mov	r3, r1
 8001460:	70bb      	strb	r3, [r7, #2]
 8001462:	4613      	mov	r3, r2
 8001464:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	212c      	movs	r1, #44	; 0x2c
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	4413      	add	r3, r2
 8001472:	333b      	adds	r3, #59	; 0x3b
 8001474:	78ba      	ldrb	r2, [r7, #2]
 8001476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	212c      	movs	r1, #44	; 0x2c
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4413      	add	r3, r2
 8001484:	333f      	adds	r3, #63	; 0x3f
 8001486:	787a      	ldrb	r2, [r7, #1]
 8001488:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800148a:	7c3b      	ldrb	r3, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d112      	bne.n	80014b6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	212c      	movs	r1, #44	; 0x2c
 8001496:	fb01 f303 	mul.w	r3, r1, r3
 800149a:	4413      	add	r3, r2
 800149c:	3342      	adds	r3, #66	; 0x42
 800149e:	2203      	movs	r2, #3
 80014a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	212c      	movs	r1, #44	; 0x2c
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	333d      	adds	r3, #61	; 0x3d
 80014b0:	7f3a      	ldrb	r2, [r7, #28]
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e008      	b.n	80014c8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	212c      	movs	r1, #44	; 0x2c
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	3342      	adds	r3, #66	; 0x42
 80014c4:	2202      	movs	r2, #2
 80014c6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	f200 80c6 	bhi.w	800165c <HAL_HCD_HC_SubmitRequest+0x210>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	08001649 	.word	0x08001649
 80014e0:	0800154d 	.word	0x0800154d
 80014e4:	080015cb 	.word	0x080015cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80014e8:	7c3b      	ldrb	r3, [r7, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	f040 80b8 	bne.w	8001660 <HAL_HCD_HC_SubmitRequest+0x214>
 80014f0:	78bb      	ldrb	r3, [r7, #2]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 80b4 	bne.w	8001660 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80014f8:	8b3b      	ldrh	r3, [r7, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d108      	bne.n	8001510 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	3355      	adds	r3, #85	; 0x55
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	3355      	adds	r3, #85	; 0x55
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	212c      	movs	r1, #44	; 0x2c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	3342      	adds	r3, #66	; 0x42
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001536:	e093      	b.n	8001660 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	3342      	adds	r3, #66	; 0x42
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
      break;
 800154a:	e089      	b.n	8001660 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800154c:	78bb      	ldrb	r3, [r7, #2]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d11d      	bne.n	800158e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	3355      	adds	r3, #85	; 0x55
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	212c      	movs	r1, #44	; 0x2c
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	3342      	adds	r3, #66	; 0x42
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001578:	e073      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	212c      	movs	r1, #44	; 0x2c
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	4413      	add	r3, r2
 8001586:	3342      	adds	r3, #66	; 0x42
 8001588:	2202      	movs	r2, #2
 800158a:	701a      	strb	r2, [r3, #0]
      break;
 800158c:	e069      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	3354      	adds	r3, #84	; 0x54
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	3342      	adds	r3, #66	; 0x42
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
      break;
 80015b4:	e055      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	212c      	movs	r1, #44	; 0x2c
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	3342      	adds	r3, #66	; 0x42
 80015c4:	2202      	movs	r2, #2
 80015c6:	701a      	strb	r2, [r3, #0]
      break;
 80015c8:	e04b      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80015ca:	78bb      	ldrb	r3, [r7, #2]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11d      	bne.n	800160c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	3355      	adds	r3, #85	; 0x55
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3342      	adds	r3, #66	; 0x42
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80015f6:	e034      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	212c      	movs	r1, #44	; 0x2c
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	4413      	add	r3, r2
 8001604:	3342      	adds	r3, #66	; 0x42
 8001606:	2202      	movs	r2, #2
 8001608:	701a      	strb	r2, [r3, #0]
      break;
 800160a:	e02a      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	212c      	movs	r1, #44	; 0x2c
 8001612:	fb01 f303 	mul.w	r3, r1, r3
 8001616:	4413      	add	r3, r2
 8001618:	3354      	adds	r3, #84	; 0x54
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3342      	adds	r3, #66	; 0x42
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
      break;
 8001632:	e016      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	3342      	adds	r3, #66	; 0x42
 8001642:	2202      	movs	r2, #2
 8001644:	701a      	strb	r2, [r3, #0]
      break;
 8001646:	e00c      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	3342      	adds	r3, #66	; 0x42
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
      break;
 800165a:	e002      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001660:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	212c      	movs	r1, #44	; 0x2c
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	3344      	adds	r3, #68	; 0x44
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	8b3a      	ldrh	r2, [r7, #24]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	202c      	movs	r0, #44	; 0x2c
 800167c:	fb00 f303 	mul.w	r3, r0, r3
 8001680:	440b      	add	r3, r1
 8001682:	334c      	adds	r3, #76	; 0x4c
 8001684:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3360      	adds	r3, #96	; 0x60
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	212c      	movs	r1, #44	; 0x2c
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	3350      	adds	r3, #80	; 0x50
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	3339      	adds	r3, #57	; 0x39
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	3361      	adds	r3, #97	; 0x61
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	222c      	movs	r2, #44	; 0x2c
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	3338      	adds	r3, #56	; 0x38
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	18d1      	adds	r1, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	f002 fb7a 	bl	8003de0 <USB_HC_StartXfer>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop

080016f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f002 f893 	bl	800383a <USB_GetMode>
 8001714:	4603      	mov	r3, r0
 8001716:	2b01      	cmp	r3, #1
 8001718:	f040 80ef 	bne.w	80018fa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f877 	bl	8003814 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80e5 	beq.w	80018f8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f002 f86e 	bl	8003814 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001742:	d104      	bne.n	800174e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800174c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f002 f85e 	bl	8003814 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001762:	d104      	bne.n	800176e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800176c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 f84e 	bl	8003814 <USB_ReadInterrupts>
 8001778:	4603      	mov	r3, r0
 800177a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800177e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001782:	d104      	bne.n	800178e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800178c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 f83e 	bl	8003814 <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d103      	bne.n	80017aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2202      	movs	r2, #2
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 f830 	bl	8003814 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017be:	d115      	bne.n	80017ec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d108      	bne.n	80017ec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f008 fb86 	bl	8009eec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 f926 	bl	8003a38 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 f80f 	bl	8003814 <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d102      	bne.n	8001808 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f001 f9ff 	bl	8002c06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f002 f801 	bl	8003814 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b08      	cmp	r3, #8
 800181a:	d106      	bne.n	800182a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f008 fb49 	bl	8009eb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2208      	movs	r2, #8
 8001828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fff0 	bl	8003814 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b10      	cmp	r3, #16
 800183c:	d101      	bne.n	8001842 <HAL_HCD_IRQHandler+0x14a>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_HCD_IRQHandler+0x14c>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d012      	beq.n	800186e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0210 	bic.w	r2, r2, #16
 8001856:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f001 f902 	bl	8002a62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0210 	orr.w	r2, r2, #16
 800186c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f001 ffce 	bl	8003814 <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001882:	d13a      	bne.n	80018fa <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f002 fbeb 	bl	8004064 <USB_HC_ReadInterrupt>
 800188e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e025      	b.n	80018e2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d018      	beq.n	80018dc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018c0:	d106      	bne.n	80018d0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f8ab 	bl	8001a24 <HCD_HC_IN_IRQHandler>
 80018ce:	e005      	b.n	80018dc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fcc6 	bl	8002268 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d3d4      	bcc.n	8001896 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	e000      	b.n	80018fa <HAL_HCD_IRQHandler+0x202>
      return;
 80018f8:	bf00      	nop
    }
  }
}
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_HCD_Start+0x16>
 8001912:	2302      	movs	r3, #2
 8001914:	e013      	b.n	800193e <HAL_HCD_Start+0x3e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fe83 	bl	800362e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f002 f8e6 	bl	8003b00 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_HCD_Stop+0x16>
 8001958:	2302      	movs	r3, #2
 800195a:	e00d      	b.n	8001978 <HAL_HCD_Stop+0x32>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fce5 	bl	8004338 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 f88d 	bl	8003aac <USB_ResetPort>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3360      	adds	r3, #96	; 0x60
 80019b6:	781b      	ldrb	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3350      	adds	r3, #80	; 0x50
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 f8d1 	bl	8003ba0 <USB_GetCurrentFrame>
 80019fe:	4603      	mov	r3, r0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 f8ac 	bl	8003b72 <USB_GetHostSpeed>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d119      	bne.n	8001a88 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a60:	461a      	mov	r2, r3
 8001a62:	2304      	movs	r3, #4
 8001a64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	0151      	lsls	r1, r2, #5
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	440a      	add	r2, r1
 8001a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	60d3      	str	r3, [r2, #12]
 8001a86:	e101      	b.n	8001c8c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a9e:	d12b      	bne.n	8001af8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aac:	461a      	mov	r2, r3
 8001aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3361      	adds	r3, #97	; 0x61
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fac8 	bl	8004086 <USB_HC_Halt>
 8001af6:	e0c9      	b.n	8001c8c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d109      	bne.n	8001b22 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	6093      	str	r3, [r2, #8]
 8001b20:	e0b4      	b.n	8001c8c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d133      	bne.n	8001ba0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	0151      	lsls	r1, r2, #5
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	440a      	add	r2, r1
 8001b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3361      	adds	r3, #97	; 0x61
 8001b66:	2205      	movs	r2, #5
 8001b68:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	461a      	mov	r2, r3
 8001b78:	2310      	movs	r3, #16
 8001b7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fa74 	bl	8004086 <USB_HC_Halt>
 8001b9e:	e075      	b.n	8001c8c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d134      	bne.n	8001c22 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	0151      	lsls	r1, r2, #5
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	440a      	add	r2, r1
 8001bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3361      	adds	r3, #97	; 0x61
 8001be6:	2208      	movs	r2, #8
 8001be8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fa33 	bl	8004086 <USB_HC_Halt>
 8001c20:	e034      	b.n	8001c8c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c34:	2b80      	cmp	r3, #128	; 0x80
 8001c36:	d129      	bne.n	8001c8c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	0151      	lsls	r1, r2, #5
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	440a      	add	r2, r1
 8001c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3361      	adds	r3, #97	; 0x61
 8001c66:	2206      	movs	r2, #6
 8001c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fa06 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	461a      	mov	r2, r3
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca2:	d122      	bne.n	8001cea <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	0151      	lsls	r1, r2, #5
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	440a      	add	r2, r1
 8001cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 f9d9 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ce8:	e2ba      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f040 811b 	bne.w	8001f38 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3348      	adds	r3, #72	; 0x48
 8001d18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0159      	lsls	r1, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	202c      	movs	r0, #44	; 0x2c
 8001d34:	fb00 f303 	mul.w	r3, r0, r3
 8001d38:	440b      	add	r3, r1
 8001d3a:	3350      	adds	r3, #80	; 0x50
 8001d3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3361      	adds	r3, #97	; 0x61
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	335c      	adds	r3, #92	; 0x5c
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2301      	movs	r3, #1
 8001d72:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	333f      	adds	r3, #63	; 0x3f
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	333f      	adds	r3, #63	; 0x3f
 8001d96:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d121      	bne.n	8001de0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	0151      	lsls	r1, r2, #5
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	440a      	add	r2, r1
 8001db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 f95d 	bl	8004086 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2310      	movs	r3, #16
 8001ddc:	6093      	str	r3, [r2, #8]
 8001dde:	e066      	b.n	8001eae <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	333f      	adds	r3, #63	; 0x3f
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d127      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	0151      	lsls	r1, r2, #5
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	440a      	add	r2, r1
 8001e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e12:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3360      	adds	r3, #96	; 0x60
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	b2d9      	uxtb	r1, r3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	fb00 f303 	mul.w	r3, r0, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3360      	adds	r3, #96	; 0x60
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f008 f863 	bl	8009f08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e42:	e034      	b.n	8001eae <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	333f      	adds	r3, #63	; 0x3f
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d12a      	bne.n	8001eae <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3360      	adds	r3, #96	; 0x60
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3354      	adds	r3, #84	; 0x54
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f083 0301 	eor.w	r3, r3, #1
 8001e7e:	b2d8      	uxtb	r0, r3
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3354      	adds	r3, #84	; 0x54
 8001e8e:	4602      	mov	r2, r0
 8001e90:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	b2d9      	uxtb	r1, r3
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3360      	adds	r3, #96	; 0x60
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f008 f82d 	bl	8009f08 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d12b      	bne.n	8001f0e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	212c      	movs	r1, #44	; 0x2c
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3348      	adds	r3, #72	; 0x48
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	202c      	movs	r0, #44	; 0x2c
 8001ecc:	fb00 f202 	mul.w	r2, r0, r2
 8001ed0:	440a      	add	r2, r1
 8001ed2:	3240      	adds	r2, #64	; 0x40
 8001ed4:	8812      	ldrh	r2, [r2, #0]
 8001ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 81be 	beq.w	8002260 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3354      	adds	r3, #84	; 0x54
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2d8      	uxtb	r0, r3
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3354      	adds	r3, #84	; 0x54
 8001f08:	4602      	mov	r2, r0
 8001f0a:	701a      	strb	r2, [r3, #0]
}
 8001f0c:	e1a8      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3354      	adds	r3, #84	; 0x54
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f083 0301 	eor.w	r3, r3, #1
 8001f22:	b2d8      	uxtb	r0, r3
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3354      	adds	r3, #84	; 0x54
 8001f32:	4602      	mov	r2, r0
 8001f34:	701a      	strb	r2, [r3, #0]
}
 8001f36:	e193      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	f040 8106 	bne.w	800215c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	0151      	lsls	r1, r2, #5
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	440a      	add	r2, r1
 8001f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	212c      	movs	r1, #44	; 0x2c
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3361      	adds	r3, #97	; 0x61
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d109      	bne.n	8001f98 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3360      	adds	r3, #96	; 0x60
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e0c9      	b.n	800212c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3361      	adds	r3, #97	; 0x61
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d109      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3360      	adds	r3, #96	; 0x60
 8001fba:	2205      	movs	r2, #5
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e0b5      	b.n	800212c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3361      	adds	r3, #97	; 0x61
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d009      	beq.n	8001fe8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3361      	adds	r3, #97	; 0x61
 8001fe2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d150      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	335c      	adds	r3, #92	; 0x5c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	202c      	movs	r0, #44	; 0x2c
 8002000:	fb00 f303 	mul.w	r3, r0, r3
 8002004:	440b      	add	r3, r1
 8002006:	335c      	adds	r3, #92	; 0x5c
 8002008:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	335c      	adds	r3, #92	; 0x5c
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d912      	bls.n	8002044 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	335c      	adds	r3, #92	; 0x5c
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3360      	adds	r3, #96	; 0x60
 800203e:	2204      	movs	r2, #4
 8002040:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002042:	e073      	b.n	800212c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3360      	adds	r3, #96	; 0x60
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800206c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002074:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002088:	e050      	b.n	800212c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3361      	adds	r3, #97	; 0x61
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d122      	bne.n	80020e4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3360      	adds	r3, #96	; 0x60
 80020ac:	2202      	movs	r2, #2
 80020ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e023      	b.n	800212c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3361      	adds	r3, #97	; 0x61
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b07      	cmp	r3, #7
 80020f6:	d119      	bne.n	800212c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	335c      	adds	r3, #92	; 0x5c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	202c      	movs	r0, #44	; 0x2c
 8002110:	fb00 f303 	mul.w	r3, r0, r3
 8002114:	440b      	add	r3, r1
 8002116:	335c      	adds	r3, #92	; 0x5c
 8002118:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3360      	adds	r3, #96	; 0x60
 8002128:	2204      	movs	r2, #4
 800212a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	461a      	mov	r2, r3
 800213a:	2302      	movs	r3, #2
 800213c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	b2d9      	uxtb	r1, r3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	202c      	movs	r0, #44	; 0x2c
 8002148:	fb00 f303 	mul.w	r3, r0, r3
 800214c:	4413      	add	r3, r2
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f007 fed7 	bl	8009f08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800215a:	e081      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b10      	cmp	r3, #16
 8002170:	d176      	bne.n	8002260 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	333f      	adds	r3, #63	; 0x3f
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d121      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	335c      	adds	r3, #92	; 0x5c
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	0151      	lsls	r1, r2, #5
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	440a      	add	r2, r1
 80021ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 ff5f 	bl	8004086 <USB_HC_Halt>
 80021c8:	e041      	b.n	800224e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	333f      	adds	r3, #63	; 0x3f
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	333f      	adds	r3, #63	; 0x3f
 80021ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d12d      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	335c      	adds	r3, #92	; 0x5c
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d120      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3361      	adds	r3, #97	; 0x61
 800221a:	2203      	movs	r2, #3
 800221c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	0151      	lsls	r1, r2, #5
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	440a      	add	r2, r1
 8002234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f001 ff1c 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	461a      	mov	r2, r3
 800225c:	2310      	movs	r3, #16
 800225e:	6093      	str	r3, [r2, #8]
}
 8002260:	bf00      	nop
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d119      	bne.n	80022cc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	461a      	mov	r2, r3
 80022a6:	2304      	movs	r3, #4
 80022a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	0151      	lsls	r1, r2, #5
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	440a      	add	r2, r1
 80022c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80022ca:	e3c6      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d13e      	bne.n	8002360 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	2320      	movs	r3, #32
 80022f2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	333d      	adds	r3, #61	; 0x3d
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 83a8 	bne.w	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	333d      	adds	r3, #61	; 0x3d
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	440a      	add	r2, r1
 8002344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f001 fe94 	bl	8004086 <USB_HC_Halt>
}
 800235e:	e37c      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002376:	d122      	bne.n	80023be <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	0151      	lsls	r1, r2, #5
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	440a      	add	r2, r1
 800238e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 fe6f 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	461a      	mov	r2, r3
 80023b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ba:	6093      	str	r3, [r2, #8]
}
 80023bc:	e34d      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d150      	bne.n	8002476 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	335c      	adds	r3, #92	; 0x5c
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d111      	bne.n	8002420 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	333d      	adds	r3, #61	; 0x3d
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	2340      	movs	r3, #64	; 0x40
 800241e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fe1b 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2301      	movs	r3, #1
 8002460:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3361      	adds	r3, #97	; 0x61
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
}
 8002474:	e2f1      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d13c      	bne.n	8002506 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3361      	adds	r3, #97	; 0x61
 800249a:	2204      	movs	r2, #4
 800249c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	333d      	adds	r3, #61	; 0x3d
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	335c      	adds	r3, #92	; 0x5c
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	0151      	lsls	r1, r2, #5
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	440a      	add	r2, r1
 80024d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fdca 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	461a      	mov	r2, r3
 8002500:	2340      	movs	r3, #64	; 0x40
 8002502:	6093      	str	r3, [r2, #8]
}
 8002504:	e2a9      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b08      	cmp	r3, #8
 800251a:	d12a      	bne.n	8002572 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	2308      	movs	r3, #8
 800252c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	440a      	add	r2, r1
 8002544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f001 fd94 	bl	8004086 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3361      	adds	r3, #97	; 0x61
 800256c:	2205      	movs	r2, #5
 800256e:	701a      	strb	r2, [r3, #0]
}
 8002570:	e273      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b10      	cmp	r3, #16
 8002586:	d150      	bne.n	800262a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	335c      	adds	r3, #92	; 0x5c
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3361      	adds	r3, #97	; 0x61
 80025a8:	2203      	movs	r2, #3
 80025aa:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	333d      	adds	r3, #61	; 0x3d
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d112      	bne.n	80025e6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	333c      	adds	r3, #60	; 0x3c
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	333d      	adds	r3, #61	; 0x3d
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	0151      	lsls	r1, r2, #5
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	440a      	add	r2, r1
 80025fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f001 fd38 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	461a      	mov	r2, r3
 8002624:	2310      	movs	r3, #16
 8002626:	6093      	str	r3, [r2, #8]
}
 8002628:	e217      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d174      	bne.n	800272a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d121      	bne.n	800268c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3361      	adds	r3, #97	; 0x61
 8002656:	2206      	movs	r2, #6
 8002658:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	0151      	lsls	r1, r2, #5
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	440a      	add	r2, r1
 8002670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f001 fcfe 	bl	8004086 <USB_HC_Halt>
 800268a:	e044      	b.n	8002716 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	335c      	adds	r3, #92	; 0x5c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	202c      	movs	r0, #44	; 0x2c
 80026a4:	fb00 f303 	mul.w	r3, r0, r3
 80026a8:	440b      	add	r3, r1
 80026aa:	335c      	adds	r3, #92	; 0x5c
 80026ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	335c      	adds	r3, #92	; 0x5c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d920      	bls.n	8002704 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	335c      	adds	r3, #92	; 0x5c
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3360      	adds	r3, #96	; 0x60
 80026e2:	2204      	movs	r2, #4
 80026e4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	b2d9      	uxtb	r1, r3
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	fb00 f303 	mul.w	r3, r0, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3360      	adds	r3, #96	; 0x60
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f007 fc03 	bl	8009f08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002702:	e008      	b.n	8002716 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3360      	adds	r3, #96	; 0x60
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	461a      	mov	r2, r3
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	6093      	str	r3, [r2, #8]
}
 8002728:	e197      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d134      	bne.n	80027ac <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	0151      	lsls	r1, r2, #5
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	440a      	add	r2, r1
 8002758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f001 fc8a 	bl	8004086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	2310      	movs	r3, #16
 8002782:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	461a      	mov	r2, r3
 8002792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002796:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3361      	adds	r3, #97	; 0x61
 80027a6:	2208      	movs	r2, #8
 80027a8:	701a      	strb	r2, [r3, #0]
}
 80027aa:	e156      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	f040 814b 	bne.w	8002a5a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	0151      	lsls	r1, r2, #5
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	440a      	add	r2, r1
 80027da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027de:	f023 0302 	bic.w	r3, r3, #2
 80027e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d179      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3360      	adds	r3, #96	; 0x60
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	333f      	adds	r3, #63	; 0x3f
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d00a      	beq.n	8002834 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	333f      	adds	r3, #63	; 0x3f
 800282c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800282e:	2b03      	cmp	r3, #3
 8002830:	f040 80fc 	bne.w	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d142      	bne.n	80028c2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	334c      	adds	r3, #76	; 0x4c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80ed 	beq.w	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	334c      	adds	r3, #76	; 0x4c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	202c      	movs	r0, #44	; 0x2c
 8002868:	fb00 f202 	mul.w	r2, r0, r2
 800286c:	440a      	add	r2, r1
 800286e:	3240      	adds	r2, #64	; 0x40
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	4413      	add	r3, r2
 8002874:	3b01      	subs	r3, #1
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	202c      	movs	r0, #44	; 0x2c
 800287c:	fb00 f202 	mul.w	r2, r0, r2
 8002880:	440a      	add	r2, r1
 8002882:	3240      	adds	r2, #64	; 0x40
 8002884:	8812      	ldrh	r2, [r2, #0]
 8002886:	fbb3 f3f2 	udiv	r3, r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80ca 	beq.w	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3355      	adds	r3, #85	; 0x55
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2d8      	uxtb	r0, r3
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3355      	adds	r3, #85	; 0x55
 80028bc:	4602      	mov	r2, r0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e0b4      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3355      	adds	r3, #85	; 0x55
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f083 0301 	eor.w	r3, r3, #1
 80028d6:	b2d8      	uxtb	r0, r3
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3355      	adds	r3, #85	; 0x55
 80028e6:	4602      	mov	r2, r0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e09f      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d109      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3360      	adds	r3, #96	; 0x60
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e08b      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3361      	adds	r3, #97	; 0x61
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d109      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	2202      	movs	r2, #2
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e077      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3361      	adds	r3, #97	; 0x61
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d109      	bne.n	8002964 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3360      	adds	r3, #96	; 0x60
 800295e:	2205      	movs	r2, #5
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e063      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d009      	beq.n	800298c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3361      	adds	r3, #97	; 0x61
 8002986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002988:	2b08      	cmp	r3, #8
 800298a:	d14f      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	335c      	adds	r3, #92	; 0x5c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	202c      	movs	r0, #44	; 0x2c
 80029a4:	fb00 f303 	mul.w	r3, r0, r3
 80029a8:	440b      	add	r3, r1
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d912      	bls.n	80029e8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3360      	adds	r3, #96	; 0x60
 80029e2:	2204      	movs	r2, #4
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e021      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	b2d9      	uxtb	r1, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	202c      	movs	r0, #44	; 0x2c
 8002a48:	fb00 f303 	mul.w	r3, r0, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3360      	adds	r3, #96	; 0x60
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f007 fa57 	bl	8009f08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a5a:	bf00      	nop
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08a      	sub	sp, #40	; 0x28
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	0c5b      	lsrs	r3, r3, #17
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d004      	beq.n	8002aa8 <HCD_RXQLVL_IRQHandler+0x46>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	f000 80a9 	beq.w	8002bf8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002aa6:	e0aa      	b.n	8002bfe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a6 	beq.w	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3344      	adds	r3, #68	; 0x44
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 809b 	beq.w	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3350      	adds	r3, #80	; 0x50
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	441a      	add	r2, r3
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	202c      	movs	r0, #44	; 0x2c
 8002ae0:	fb00 f303 	mul.w	r3, r0, r3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334c      	adds	r3, #76	; 0x4c
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d87a      	bhi.n	8002be4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3344      	adds	r3, #68	; 0x44
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	b292      	uxth	r2, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f000 fe5b 	bl	80037c2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3344      	adds	r3, #68	; 0x44
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	441a      	add	r2, r3
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	202c      	movs	r0, #44	; 0x2c
 8002b26:	fb00 f303 	mul.w	r3, r0, r3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3344      	adds	r3, #68	; 0x44
 8002b2e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3350      	adds	r3, #80	; 0x50
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	441a      	add	r2, r3
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3350      	adds	r3, #80	; 0x50
 8002b52:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	0cdb      	lsrs	r3, r3, #19
 8002b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3340      	adds	r3, #64	; 0x40
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d13c      	bne.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d039      	beq.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3354      	adds	r3, #84	; 0x54
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2d8      	uxtb	r0, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3354      	adds	r3, #84	; 0x54
 8002bde:	4602      	mov	r2, r0
 8002be0:	701a      	strb	r2, [r3, #0]
      break;
 8002be2:	e00b      	b.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3360      	adds	r3, #96	; 0x60
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	701a      	strb	r2, [r3, #0]
      break;
 8002bf6:	e001      	b.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bfc:	bf00      	nop
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d10b      	bne.n	8002c56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f007 f941 	bl	8009ed0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d132      	bne.n	8002cc6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d126      	bne.n	8002cc0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d113      	bne.n	8002ca2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c84:	d106      	bne.n	8002c94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fed3 	bl	8003a38 <USB_InitFSLSPClkSel>
 8002c92:	e011      	b.n	8002cb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fecc 	bl	8003a38 <USB_InitFSLSPClkSel>
 8002ca0:	e00a      	b.n	8002cb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f007 f933 	bl	8009f24 <HAL_HCD_PortEnabled_Callback>
 8002cbe:	e002      	b.n	8002cc6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f007 f93d 	bl	8009f40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d103      	bne.n	8002cd8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f043 0320 	orr.w	r3, r3, #32
 8002cd6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e264      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d075      	beq.n	8002df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0a:	4ba3      	ldr	r3, [pc, #652]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4ba0      	ldr	r3, [pc, #640]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d112      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d22:	4b9d      	ldr	r3, [pc, #628]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	4b99      	ldr	r3, [pc, #612]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05b      	beq.n	8002df4 <HAL_RCC_OscConfig+0x108>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d157      	bne.n	8002df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e23f      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCC_OscConfig+0x74>
 8002d52:	4b91      	ldr	r3, [pc, #580]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a90      	ldr	r2, [pc, #576]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a8a      	ldr	r2, [pc, #552]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a87      	ldr	r2, [pc, #540]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d84:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a83      	ldr	r2, [pc, #524]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a80      	ldr	r2, [pc, #512]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fd ff2e 	bl	8000c04 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fd ff2a 	bl	8000c04 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e204      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xc0>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fd ff1a 	bl	8000c04 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fd ff16 	bl	8000c04 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1f0      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xe8>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e02:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b5c      	ldr	r3, [pc, #368]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1c4      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b56      	ldr	r3, [pc, #344]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4952      	ldr	r1, [pc, #328]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <HAL_RCC_OscConfig+0x2b0>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fd fecf 	bl	8000c04 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fd fecb 	bl	8000c04 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1a5      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4940      	ldr	r1, [pc, #256]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCC_OscConfig+0x2b0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fd feae 	bl	8000c04 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fd feaa 	bl	8000c04 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e184      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d030      	beq.n	8002f38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x2b4>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fe8e 	bl	8000c04 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fd fe8a 	bl	8000c04 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e164      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x200>
 8002f0a:	e015      	b.n	8002f38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x2b4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fd fe77 	bl	8000c04 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7fd fe73 	bl	8000c04 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e14d      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a0 	beq.w	8003086 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x2b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d121      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_RCC_OscConfig+0x2b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <HAL_RCC_OscConfig+0x2b8>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7fd fe39 	bl	8000c04 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	e011      	b.n	8002fba <HAL_RCC_OscConfig+0x2ce>
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	42470000 	.word	0x42470000
 8002fa0:	42470e80 	.word	0x42470e80
 8002fa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa8:	f7fd fe2c 	bl	8000c04 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e106      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b85      	ldr	r3, [pc, #532]	; (80031d0 <HAL_RCC_OscConfig+0x4e4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
 8002fce:	4b81      	ldr	r3, [pc, #516]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a80      	ldr	r2, [pc, #512]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	e01c      	b.n	8003016 <HAL_RCC_OscConfig+0x32a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x312>
 8002fe4:	4b7b      	ldr	r3, [pc, #492]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a7a      	ldr	r2, [pc, #488]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	4b78      	ldr	r3, [pc, #480]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a77      	ldr	r2, [pc, #476]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x32a>
 8002ffe:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	4a74      	ldr	r2, [pc, #464]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	; 0x70
 800300a:	4b72      	ldr	r3, [pc, #456]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4a71      	ldr	r2, [pc, #452]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d015      	beq.n	800304a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fd fdf1 	bl	8000c04 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fd fded 	bl	8000c04 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0c5      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ee      	beq.n	8003026 <HAL_RCC_OscConfig+0x33a>
 8003048:	e014      	b.n	8003074 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fd fddb 	bl	8000c04 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fd fdd7 	bl	8000c04 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0af      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	4b5a      	ldr	r3, [pc, #360]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ee      	bne.n	8003052 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a55      	ldr	r2, [pc, #340]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 809b 	beq.w	80031c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003090:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d05c      	beq.n	8003156 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d141      	bne.n	8003128 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCC_OscConfig+0x4ec>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fd fdab 	bl	8000c04 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fd fda7 	bl	8000c04 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e081      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c4:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	019b      	lsls	r3, r3, #6
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	3b01      	subs	r3, #1
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	4937      	ldr	r1, [pc, #220]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fa:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <HAL_RCC_OscConfig+0x4ec>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd fd80 	bl	8000c04 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fd fd7c 	bl	8000c04 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e056      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x41c>
 8003126:	e04e      	b.n	80031c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_OscConfig+0x4ec>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd fd69 	bl	8000c04 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fd65 	bl	8000c04 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03f      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x44a>
 8003154:	e037      	b.n	80031c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e032      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d028      	beq.n	80031c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d121      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d11a      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003192:	4013      	ands	r3, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003198:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319a:	4293      	cmp	r3, r2
 800319c:	d111      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d001      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40007000 	.word	0x40007000
 80031d4:	40023800 	.word	0x40023800
 80031d8:	42470060 	.word	0x42470060

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0cc      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d044      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e067      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4934      	ldr	r1, [pc, #208]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fd fc9a 	bl	8000c04 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fd fc96 	bl	8000c04 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20c      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fbfa 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	0800b36c 	.word	0x0800b36c
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	2300      	movs	r3, #0
 80033ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c0:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	f200 80bd 	bhi.w	800354c <HAL_RCC_GetSysClockFreq+0x1a4>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033da:	e0b7      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033de:	60bb      	str	r3, [r7, #8]
       break;
 80033e0:	e0b7      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80033e4:	60bb      	str	r3, [r7, #8]
      break;
 80033e6:	e0b4      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b5d      	ldr	r3, [pc, #372]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f2:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d04d      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b58      	ldr	r3, [pc, #352]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	461a      	mov	r2, r3
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	ea02 0800 	and.w	r8, r2, r0
 8003416:	ea03 0901 	and.w	r9, r3, r1
 800341a:	4640      	mov	r0, r8
 800341c:	4649      	mov	r1, r9
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	014b      	lsls	r3, r1, #5
 8003428:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800342c:	0142      	lsls	r2, r0, #5
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	ebb0 0008 	subs.w	r0, r0, r8
 8003436:	eb61 0109 	sbc.w	r1, r1, r9
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	018b      	lsls	r3, r1, #6
 8003444:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003448:	0182      	lsls	r2, r0, #6
 800344a:	1a12      	subs	r2, r2, r0
 800344c:	eb63 0301 	sbc.w	r3, r3, r1
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	00d9      	lsls	r1, r3, #3
 800345a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800345e:	00d0      	lsls	r0, r2, #3
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	eb12 0208 	adds.w	r2, r2, r8
 8003468:	eb43 0309 	adc.w	r3, r3, r9
 800346c:	f04f 0000 	mov.w	r0, #0
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	0259      	lsls	r1, r3, #9
 8003476:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800347a:	0250      	lsls	r0, r2, #9
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	461a      	mov	r2, r3
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	f7fc fef8 	bl	8000280 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4613      	mov	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e04a      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	461a      	mov	r2, r3
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	ea02 0400 	and.w	r4, r2, r0
 80034b2:	ea03 0501 	and.w	r5, r3, r1
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	014b      	lsls	r3, r1, #5
 80034c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034c8:	0142      	lsls	r2, r0, #5
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	1b00      	subs	r0, r0, r4
 80034d0:	eb61 0105 	sbc.w	r1, r1, r5
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	018b      	lsls	r3, r1, #6
 80034de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034e2:	0182      	lsls	r2, r0, #6
 80034e4:	1a12      	subs	r2, r2, r0
 80034e6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	00d9      	lsls	r1, r3, #3
 80034f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034f8:	00d0      	lsls	r0, r2, #3
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	1912      	adds	r2, r2, r4
 8003500:	eb45 0303 	adc.w	r3, r5, r3
 8003504:	f04f 0000 	mov.w	r0, #0
 8003508:	f04f 0100 	mov.w	r1, #0
 800350c:	0299      	lsls	r1, r3, #10
 800350e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003512:	0290      	lsls	r0, r2, #10
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	f7fc feac 	bl	8000280 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	3301      	adds	r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	60bb      	str	r3, [r7, #8]
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800354e:	60bb      	str	r3, [r7, #8]
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	68bb      	ldr	r3, [r7, #8]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800356c:	b084      	sub	sp, #16
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	f107 001c 	add.w	r0, r7, #28
 800357a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2b01      	cmp	r3, #1
 8003582:	d122      	bne.n	80035ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f94a 	bl	8003858 <USB_CoreReset>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e01a      	b.n	8003600 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f93e 	bl	8003858 <USB_CoreReset>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
 80035f2:	e005      	b.n	8003600 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10b      	bne.n	800361e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f043 0206 	orr.w	r2, r3, #6
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800362a:	b004      	add	sp, #16
 800362c:	4770      	bx	lr

0800362e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 0201 	bic.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	e00b      	b.n	80036b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	e001      	b.n	80036b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e003      	b.n	80036be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80036b6:	2032      	movs	r0, #50	; 0x32
 80036b8:	f7fd fab0 	bl	8000c1c <HAL_Delay>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	019b      	lsls	r3, r3, #6
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <USB_FlushTxFifo+0x48>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e006      	b.n	8003702 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d0f0      	beq.n	80036e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	00030d40 	.word	0x00030d40

08003714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2210      	movs	r2, #16
 8003724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3301      	adds	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <USB_FlushRxFifo+0x40>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e006      	b.n	8003746 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b10      	cmp	r3, #16
 8003742:	d0f0      	beq.n	8003726 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	00030d40 	.word	0x00030d40

08003758 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	460b      	mov	r3, r1
 8003768:	71fb      	strb	r3, [r7, #7]
 800376a:	4613      	mov	r3, r2
 800376c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003776:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11a      	bne.n	80037b4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800377e:	88bb      	ldrh	r3, [r7, #4]
 8003780:	3303      	adds	r3, #3
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e00f      	b.n	80037ac <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	031a      	lsls	r2, r3, #12
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	4413      	add	r3, r2
 8003794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003798:	461a      	mov	r2, r3
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3304      	adds	r3, #4
 80037a4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3eb      	bcc.n	800378c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b089      	sub	sp, #36	; 0x24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	3303      	adds	r3, #3
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e00b      	b.n	80037fe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3304      	adds	r3, #4
 80037f6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	429a      	cmp	r2, r3
 8003804:	d3ef      	bcc.n	80037e6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003806:	69fb      	ldr	r3, [r7, #28]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3724      	adds	r7, #36	; 0x24
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0301 	and.w	r3, r3, #1
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3301      	adds	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <USB_CoreReset+0x64>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e01b      	b.n	80038ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	daf2      	bge.n	8003864 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <USB_CoreReset+0x64>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e006      	b.n	80038ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d0f0      	beq.n	800388e <USB_CoreReset+0x36>

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	00030d40 	.word	0x00030d40

080038c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c0:	b084      	sub	sp, #16
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	f107 001c 	add.w	r0, r7, #28
 80038ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038dc:	461a      	mov	r2, r3
 80038de:	2300      	movs	r3, #0
 80038e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	2b01      	cmp	r3, #1
 8003916:	d10a      	bne.n	800392e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e014      	b.n	8003958 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e009      	b.n	8003958 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003952:	f023 0304 	bic.w	r3, r3, #4
 8003956:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003958:	2110      	movs	r1, #16
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff feb4 	bl	80036c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fed7 	bl	8003714 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e015      	b.n	8003998 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398c:	461a      	mov	r2, r3
 800398e:	2300      	movs	r3, #0
 8003990:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	429a      	cmp	r2, r3
 800399e:	d3e5      	bcc.n	800396c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80039a0:	2101      	movs	r1, #1
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8ac 	bl	8003b00 <USB_DriveVbus>

  HAL_Delay(200U);
 80039a8:	20c8      	movs	r0, #200	; 0xc8
 80039aa:	f7fd f937 	bl	8000c1c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ba:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <USB_HostInit+0x164>)
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <USB_HostInit+0x168>)
 80039da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80039de:	e009      	b.n	80039f4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <USB_HostInit+0x16c>)
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <USB_HostInit+0x170>)
 80039f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <USB_HostInit+0x174>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a1e:	b004      	add	sp, #16
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	01000200 	.word	0x01000200
 8003a28:	00e00300 	.word	0x00e00300
 8003a2c:	00600080 	.word	0x00600080
 8003a30:	004000e0 	.word	0x004000e0
 8003a34:	a3200008 	.word	0xa3200008

08003a38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a80:	461a      	mov	r2, r3
 8003a82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003a86:	6053      	str	r3, [r2, #4]
 8003a88:	e009      	b.n	8003a9e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d106      	bne.n	8003a9e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a96:	461a      	mov	r2, r3
 8003a98:	f241 7370 	movw	r3, #6000	; 0x1770
 8003a9c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003acc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003adc:	2064      	movs	r0, #100	; 0x64
 8003ade:	f7fd f89d 	bl	8000c1c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003af0:	200a      	movs	r0, #10
 8003af2:	f7fd f893 	bl	8000c1c <HAL_Delay>

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <USB_DriveVbus+0x44>
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003b3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b42:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	d109      	bne.n	8003b64 <USB_DriveVbus+0x64>
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b62:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0c5b      	lsrs	r3, r3, #17
 8003b90:	f003 0303 	and.w	r3, r3, #3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	b29b      	uxth	r3, r3
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	70fb      	strb	r3, [r7, #3]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	70bb      	strb	r3, [r7, #2]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d87e      	bhi.n	8003d00 <USB_HC_Init+0x13c>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <USB_HC_Init+0x44>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003cc3 	.word	0x08003cc3
 8003c10:	08003c19 	.word	0x08003c19
 8003c14:	08003c85 	.word	0x08003c85
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	461a      	mov	r2, r3
 8003c26:	f240 439d 	movw	r3, #1181	; 0x49d
 8003c2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003c2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da10      	bge.n	8003c56 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003c54:	e057      	b.n	8003d06 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d051      	beq.n	8003d06 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	0151      	lsls	r1, r2, #5
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	440a      	add	r2, r1
 8003c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c80:	60d3      	str	r3, [r2, #12]
      break;
 8003c82:	e040      	b.n	8003d06 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	461a      	mov	r2, r3
 8003c92:	f240 639d 	movw	r3, #1693	; 0x69d
 8003c96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da34      	bge.n	8003d0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	0151      	lsls	r1, r2, #5
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003cc0:	e023      	b.n	8003d0a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f240 2325 	movw	r3, #549	; 0x225
 8003cd4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003cd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da17      	bge.n	8003d0e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003cfc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003cfe:	e006      	b.n	8003d0e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
      break;
 8003d04:	e004      	b.n	8003d10 <USB_HC_Init+0x14c>
      break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <USB_HC_Init+0x14c>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <USB_HC_Init+0x14c>
      break;
 8003d0e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	6939      	ldr	r1, [r7, #16]
 8003d26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003d3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da03      	bge.n	8003d4a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e001      	b.n	8003d4e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ff0f 	bl	8003b72 <USB_GetHostSpeed>
 8003d54:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d106      	bne.n	8003d6c <USB_HC_Init+0x1a8>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d003      	beq.n	8003d6c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e001      	b.n	8003d70 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	059b      	lsls	r3, r3, #22
 8003d74:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d78:	78bb      	ldrb	r3, [r7, #2]
 8003d7a:	02db      	lsls	r3, r3, #11
 8003d7c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d80:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d86:	049b      	lsls	r3, r3, #18
 8003d88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	0159      	lsls	r1, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003dac:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8003dae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d10f      	bne.n	8003dd6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dfc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02d      	beq.n	8003e66 <USB_HC_StartXfer+0x86>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	791b      	ldrb	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d129      	bne.n	8003e66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d117      	bne.n	8003e48 <USB_HC_StartXfer+0x68>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	79db      	ldrb	r3, [r3, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <USB_HC_StartXfer+0x48>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	79db      	ldrb	r3, [r3, #7]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d10f      	bne.n	8003e48 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <USB_HC_StartXfer+0x86>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	795b      	ldrb	r3, [r3, #5]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fa2f 	bl	80042c0 <USB_DoPing>
      return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e0f8      	b.n	8004058 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	8912      	ldrh	r2, [r2, #8]
 8003e76:	4413      	add	r3, r2
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	8912      	ldrh	r2, [r2, #8]
 8003e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e82:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003e84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e86:	8b7b      	ldrh	r3, [r7, #26]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d90b      	bls.n	8003ea4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8003e8c:	8b7b      	ldrh	r3, [r7, #26]
 8003e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003e90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	8912      	ldrh	r2, [r2, #8]
 8003e96:	fb02 f203 	mul.w	r2, r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	611a      	str	r2, [r3, #16]
 8003e9e:	e001      	b.n	8003ea4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	8912      	ldrh	r2, [r2, #8]
 8003eb2:	fb02 f203 	mul.w	r2, r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	e003      	b.n	8003ec4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ece:	04d9      	lsls	r1, r3, #19
 8003ed0:	4b63      	ldr	r3, [pc, #396]	; (8004060 <USB_HC_StartXfer+0x280>)
 8003ed2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ed4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	7a9b      	ldrb	r3, [r3, #10]
 8003eda:	075b      	lsls	r3, r3, #29
 8003edc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ee0:	69f9      	ldr	r1, [r7, #28]
 8003ee2:	0148      	lsls	r0, r1, #5
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003eec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003eee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	68d9      	ldr	r1, [r3, #12]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f06:	460a      	mov	r2, r1
 8003f08:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bf0c      	ite	eq
 8003f1a:	2301      	moveq	r3, #1
 8003f1c:	2300      	movne	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f40:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	7e7b      	ldrb	r3, [r7, #25]
 8003f52:	075b      	lsls	r3, r3, #29
 8003f54:	69f9      	ldr	r1, [r7, #28]
 8003f56:	0148      	lsls	r0, r1, #5
 8003f58:	6a39      	ldr	r1, [r7, #32]
 8003f5a:	4401      	add	r1, r0
 8003f5c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f7a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	78db      	ldrb	r3, [r3, #3]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	e003      	b.n	8003f96 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f94:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f9c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003faa:	461a      	mov	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e04e      	b.n	8004058 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	78db      	ldrb	r3, [r3, #3]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d149      	bne.n	8004056 <USB_HC_StartXfer+0x276>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d045      	beq.n	8004056 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	79db      	ldrb	r3, [r3, #7]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d830      	bhi.n	8004034 <USB_HC_StartXfer+0x254>
 8003fd2:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <USB_HC_StartXfer+0x1f8>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	0800400d 	.word	0x0800400d
 8003fe0:	08003fe9 	.word	0x08003fe9
 8003fe4:	0800400d 	.word	0x0800400d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	3303      	adds	r3, #3
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003ff2:	8afa      	ldrh	r2, [r7, #22]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d91c      	bls.n	8004038 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	619a      	str	r2, [r3, #24]
        }
        break;
 800400a:	e015      	b.n	8004038 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	3303      	adds	r3, #3
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004016:	8afa      	ldrh	r2, [r7, #22]
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	b29b      	uxth	r3, r3
 8004022:	429a      	cmp	r2, r3
 8004024:	d90a      	bls.n	800403c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	619a      	str	r2, [r3, #24]
        }
        break;
 8004032:	e003      	b.n	800403c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <USB_HC_StartXfer+0x25e>
        break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <USB_HC_StartXfer+0x25e>
        break;
 800403c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	68d9      	ldr	r1, [r3, #12]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	785a      	ldrb	r2, [r3, #1]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	b29b      	uxth	r3, r3
 800404c:	2000      	movs	r0, #0
 800404e:	9000      	str	r0, [sp, #0]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff fb81 	bl	8003758 <USB_WritePacket>
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3728      	adds	r7, #40	; 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	1ff80000 	.word	0x1ff80000

08004064 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	b29b      	uxth	r3, r3
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004086:	b480      	push	{r7}
 8004088:	b089      	sub	sp, #36	; 0x24
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0c9b      	lsrs	r3, r3, #18
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0fdb      	lsrs	r3, r3, #31
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d104      	bne.n	80040e0 <USB_HC_Halt+0x5a>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e0e8      	b.n	80042b2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <USB_HC_Halt+0x66>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d173      	bne.n	80041d4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	440a      	add	r2, r1
 8004102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 80cb 	bne.w	80042b0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d143      	bne.n	80041ae <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	440a      	add	r2, r1
 800413c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004144:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	440a      	add	r2, r1
 800415c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004164:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	440a      	add	r2, r1
 800417c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004180:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004184:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3301      	adds	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004192:	d81d      	bhi.n	80041d0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041aa:	d0ec      	beq.n	8004186 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041ac:	e080      	b.n	80042b0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041ce:	e06f      	b.n	80042b0 <USB_HC_Halt+0x22a>
            break;
 80041d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041d2:	e06d      	b.n	80042b0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d143      	bne.n	800428c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	440a      	add	r2, r1
 800421a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800421e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004222:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	440a      	add	r2, r1
 800423a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800423e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004242:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	4413      	add	r3, r2
 800424c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	440a      	add	r2, r1
 800425a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800425e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004262:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	3301      	adds	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004270:	d81d      	bhi.n	80042ae <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004288:	d0ec      	beq.n	8004264 <USB_HC_Halt+0x1de>
 800428a:	e011      	b.n	80042b0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e000      	b.n	80042b0 <USB_HC_Halt+0x22a>
          break;
 80042ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	; 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80042d4:	2301      	movs	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	04da      	lsls	r2, r3, #19
 80042dc:	4b15      	ldr	r3, [pc, #84]	; (8004334 <USB_DoPing+0x74>)
 80042de:	4013      	ands	r3, r2
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004308:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004310:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	1ff80000 	.word	0x1ff80000

08004338 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff f981 	bl	8003650 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800434e:	2110      	movs	r1, #16
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff f9b9 	bl	80036c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff f9dc 	bl	8003714 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	e01f      	b.n	80043a2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004378:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004380:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004388:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	3301      	adds	r3, #1
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b0f      	cmp	r3, #15
 80043a6:	d9dc      	bls.n	8004362 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e034      	b.n	8004418 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3301      	adds	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f4:	d80c      	bhi.n	8004410 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800440c:	d0ec      	beq.n	80043e8 <USB_StopHost+0xb0>
 800440e:	e000      	b.n	8004412 <USB_StopHost+0xda>
        break;
 8004410:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3301      	adds	r3, #1
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b0f      	cmp	r3, #15
 800441c:	d9c7      	bls.n	80043ae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004424:	461a      	mov	r2, r3
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f04f 32ff 	mov.w	r2, #4294967295
 8004432:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff f8fa 	bl	800362e <USB_EnableGlobalInt>

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8004448:	4908      	ldr	r1, [pc, #32]	; (800446c <MX_FATFS_Init+0x28>)
 800444a:	4809      	ldr	r0, [pc, #36]	; (8004470 <MX_FATFS_Init+0x2c>)
 800444c:	f005 fc62 	bl	8009d14 <FATFS_LinkDriver>
 8004450:	4603      	mov	r3, r0
 8004452:	461a      	mov	r2, r3
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <MX_FATFS_Init+0x30>)
 8004456:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004458:	4907      	ldr	r1, [pc, #28]	; (8004478 <MX_FATFS_Init+0x34>)
 800445a:	4808      	ldr	r0, [pc, #32]	; (800447c <MX_FATFS_Init+0x38>)
 800445c:	f005 fc5a 	bl	8009d14 <FATFS_LinkDriver>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <MX_FATFS_Init+0x3c>)
 8004466:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200021e8 	.word	0x200021e8
 8004470:	0800b37c 	.word	0x0800b37c
 8004474:	200062b8 	.word	0x200062b8
 8004478:	200021e4 	.word	0x200021e4
 800447c:	2000000c 	.word	0x2000000c
 8004480:	2000321c 	.word	0x2000321c

08004484 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004488:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800448a:	4618      	mov	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	4619      	mov	r1, r3
 80044be:	4808      	ldr	r0, [pc, #32]	; (80044e0 <USBH_status+0x34>)
 80044c0:	f000 fe72 	bl	80051a8 <USBH_MSC_UnitIsReady>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <USBH_status+0x24>
  {
    res = RES_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
 80044ce:	e001      	b.n	80044d4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200062bc 	.word	0x200062bc

080044e4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b094      	sub	sp, #80	; 0x50
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80044fa:	7bf9      	ldrb	r1, [r7, #15]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4813      	ldr	r0, [pc, #76]	; (8004554 <USBH_read+0x70>)
 8004506:	f000 fe99 	bl	800523c <USBH_MSC_Read>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <USBH_read+0x34>
  {
    res = RES_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004516:	e017      	b.n	8004548 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004518:	f107 0210 	add.w	r2, r7, #16
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	4619      	mov	r1, r3
 8004520:	480c      	ldr	r0, [pc, #48]	; (8004554 <USBH_read+0x70>)
 8004522:	f000 fe67 	bl	80051f4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004526:	7f7b      	ldrb	r3, [r7, #29]
 8004528:	2b3a      	cmp	r3, #58	; 0x3a
 800452a:	d005      	beq.n	8004538 <USBH_read+0x54>
 800452c:	2b3a      	cmp	r3, #58	; 0x3a
 800452e:	dc07      	bgt.n	8004540 <USBH_read+0x5c>
 8004530:	2b04      	cmp	r3, #4
 8004532:	d001      	beq.n	8004538 <USBH_read+0x54>
 8004534:	2b28      	cmp	r3, #40	; 0x28
 8004536:	d103      	bne.n	8004540 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004538:	2303      	movs	r3, #3
 800453a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800453e:	e003      	b.n	8004548 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004546:	bf00      	nop
    }
  }

  return res;
 8004548:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800454c:	4618      	mov	r0, r3
 800454e:	3748      	adds	r7, #72	; 0x48
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	200062bc 	.word	0x200062bc

08004558 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b094      	sub	sp, #80	; 0x50
 800455c:	af02      	add	r7, sp, #8
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800456e:	7bf9      	ldrb	r1, [r7, #15]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4817      	ldr	r0, [pc, #92]	; (80045d8 <USBH_write+0x80>)
 800457a:	f000 fec8 	bl	800530e <USBH_MSC_Write>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <USBH_write+0x34>
  {
    res = RES_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800458a:	e01f      	b.n	80045cc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800458c:	f107 0210 	add.w	r2, r7, #16
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	4619      	mov	r1, r3
 8004594:	4810      	ldr	r0, [pc, #64]	; (80045d8 <USBH_write+0x80>)
 8004596:	f000 fe2d 	bl	80051f4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800459a:	7f7b      	ldrb	r3, [r7, #29]
 800459c:	2b3a      	cmp	r3, #58	; 0x3a
 800459e:	d00d      	beq.n	80045bc <USBH_write+0x64>
 80045a0:	2b3a      	cmp	r3, #58	; 0x3a
 80045a2:	dc0f      	bgt.n	80045c4 <USBH_write+0x6c>
 80045a4:	2b28      	cmp	r3, #40	; 0x28
 80045a6:	d009      	beq.n	80045bc <USBH_write+0x64>
 80045a8:	2b28      	cmp	r3, #40	; 0x28
 80045aa:	dc0b      	bgt.n	80045c4 <USBH_write+0x6c>
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d005      	beq.n	80045bc <USBH_write+0x64>
 80045b0:	2b27      	cmp	r3, #39	; 0x27
 80045b2:	d107      	bne.n	80045c4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80045b4:	2302      	movs	r3, #2
 80045b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80045ba:	e007      	b.n	80045cc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80045bc:	2303      	movs	r3, #3
 80045be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80045c2:	e003      	b.n	80045cc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80045ca:	bf00      	nop
    }
  }

  return res;
 80045cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3748      	adds	r7, #72	; 0x48
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200062bc 	.word	0x200062bc

080045dc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b090      	sub	sp, #64	; 0x40
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	603a      	str	r2, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	460b      	mov	r3, r1
 80045ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80045f2:	79bb      	ldrb	r3, [r7, #6]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d852      	bhi.n	800469e <USBH_ioctl+0xc2>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <USBH_ioctl+0x24>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004611 	.word	0x08004611
 8004604:	08004619 	.word	0x08004619
 8004608:	08004643 	.word	0x08004643
 800460c:	0800466f 	.word	0x0800466f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004616:	e045      	b.n	80046a4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004618:	f107 0208 	add.w	r2, r7, #8
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	4619      	mov	r1, r3
 8004620:	4823      	ldr	r0, [pc, #140]	; (80046b0 <USBH_ioctl+0xd4>)
 8004622:	f000 fde7 	bl	80051f4 <USBH_MSC_GetLUNInfo>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004638:	e034      	b.n	80046a4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004640:	e030      	b.n	80046a4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004642:	f107 0208 	add.w	r2, r7, #8
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	4619      	mov	r1, r3
 800464a:	4819      	ldr	r0, [pc, #100]	; (80046b0 <USBH_ioctl+0xd4>)
 800464c:	f000 fdd2 	bl	80051f4 <USBH_MSC_GetLUNInfo>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8004656:	8a3b      	ldrh	r3, [r7, #16]
 8004658:	461a      	mov	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004664:	e01e      	b.n	80046a4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800466c:	e01a      	b.n	80046a4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800466e:	f107 0208 	add.w	r2, r7, #8
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	4619      	mov	r1, r3
 8004676:	480e      	ldr	r0, [pc, #56]	; (80046b0 <USBH_ioctl+0xd4>)
 8004678:	f000 fdbc 	bl	80051f4 <USBH_MSC_GetLUNInfo>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8004682:	8a3b      	ldrh	r3, [r7, #16]
 8004684:	0a5b      	lsrs	r3, r3, #9
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004694:	e006      	b.n	80046a4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800469c:	e002      	b.n	80046a4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800469e:	2304      	movs	r3, #4
 80046a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80046a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3740      	adds	r7, #64	; 0x40
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	200062bc 	.word	0x200062bc

080046b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <USER_initialize+0x24>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <USER_initialize+0x24>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000009 	.word	0x20000009

080046dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <USER_status+0x24>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <USER_status+0x24>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000009 	.word	0x20000009

08004704 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004714:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4603      	mov	r3, r0
 8004730:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004732:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	603a      	str	r2, [r7, #0]
 800474a:	71fb      	strb	r3, [r7, #7]
 800474c:	460b      	mov	r3, r1
 800474e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
    return res;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004762:	b590      	push	{r4, r7, lr}
 8004764:	b089      	sub	sp, #36	; 0x24
 8004766:	af04      	add	r7, sp, #16
 8004768:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004770:	7919      	ldrb	r1, [r3, #4]
 8004772:	2350      	movs	r3, #80	; 0x50
 8004774:	2206      	movs	r2, #6
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 fc54 	bl	8006024 <USBH_FindInterface>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2bff      	cmp	r3, #255	; 0xff
 8004784:	d002      	beq.n	800478c <USBH_MSC_InterfaceInit+0x2a>
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d901      	bls.n	8004790 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800478c:	2302      	movs	r3, #2
 800478e:	e0ef      	b.n	8004970 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 fc29 	bl	8005fec <USBH_SelectInterface>
 800479a:	4603      	mov	r3, r0
 800479c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800479e:	7bbb      	ldrb	r3, [r7, #14]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0e3      	b.n	8004970 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80047ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047b2:	f005 fe21 	bl	800a3f8 <malloc>
 80047b6:	4603      	mov	r3, r0
 80047b8:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80047ca:	2302      	movs	r3, #2
 80047cc:	e0d0      	b.n	8004970 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80047ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d2:	2100      	movs	r1, #0
 80047d4:	68b8      	ldr	r0, [r7, #8]
 80047d6:	f005 fe2d 	bl	800a434 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	211a      	movs	r1, #26
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da16      	bge.n	8004820 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	211a      	movs	r1, #26
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	211a      	movs	r1, #26
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	4413      	add	r3, r2
 8004814:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	815a      	strh	r2, [r3, #10]
 800481e:	e015      	b.n	800484c <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	211a      	movs	r1, #26
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	211a      	movs	r1, #26
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	4413      	add	r3, r2
 8004842:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	211a      	movs	r1, #26
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	f203 3356 	addw	r3, r3, #854	; 0x356
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b25b      	sxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	da16      	bge.n	8004892 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	211a      	movs	r1, #26
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	211a      	movs	r1, #26
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800488a:	881a      	ldrh	r2, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	815a      	strh	r2, [r3, #10]
 8004890:	e015      	b.n	80048be <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	211a      	movs	r1, #26
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	4413      	add	r3, r2
 800489e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	211a      	movs	r1, #26
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2200      	movs	r2, #0
 80048c2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2200      	movs	r2, #0
 80048ce:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	799b      	ldrb	r3, [r3, #6]
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 fdc5 	bl	8007466 <USBH_AllocPipe>
 80048dc:	4603      	mov	r3, r0
 80048de:	461a      	mov	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	79db      	ldrb	r3, [r3, #7]
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f002 fdbb 	bl	8007466 <USBH_AllocPipe>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fdad 	bl	8005458 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	7959      	ldrb	r1, [r3, #5]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	7998      	ldrb	r0, [r3, #6]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	8912      	ldrh	r2, [r2, #8]
 8004916:	9202      	str	r2, [sp, #8]
 8004918:	2202      	movs	r2, #2
 800491a:	9201      	str	r2, [sp, #4]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4623      	mov	r3, r4
 8004920:	4602      	mov	r2, r0
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f002 fd70 	bl	8007408 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	7919      	ldrb	r1, [r3, #4]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	79d8      	ldrb	r0, [r3, #7]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	8952      	ldrh	r2, [r2, #10]
 8004940:	9202      	str	r2, [sp, #8]
 8004942:	2202      	movs	r2, #2
 8004944:	9201      	str	r2, [sp, #4]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4623      	mov	r3, r4
 800494a:	4602      	mov	r2, r0
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f002 fd5b 	bl	8007408 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	791b      	ldrb	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f005 fc6e 	bl	800a23c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	795b      	ldrb	r3, [r3, #5]
 8004964:	2200      	movs	r2, #0
 8004966:	4619      	mov	r1, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f005 fc67 	bl	800a23c <USBH_LL_SetToggle>

  return USBH_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}

08004978 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	795b      	ldrb	r3, [r3, #5]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00e      	beq.n	80049b0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	795b      	ldrb	r3, [r3, #5]
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f002 fd54 	bl	8007446 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	795b      	ldrb	r3, [r3, #5]
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f002 fd7f 	bl	80074a8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	791b      	ldrb	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00e      	beq.n	80049d6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f002 fd41 	bl	8007446 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	791b      	ldrb	r3, [r3, #4]
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f002 fd6c 	bl	80074a8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f005 fd0c 	bl	800a408 <free>
    phost->pActiveClass->pData = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049f6:	2200      	movs	r2, #0
 80049f8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	7b9b      	ldrb	r3, [r3, #14]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d041      	beq.n	8004aa6 <USBH_MSC_ClassRequest+0xa2>
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	dc4b      	bgt.n	8004abe <USBH_MSC_ClassRequest+0xba>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <USBH_MSC_ClassRequest+0x2a>
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d147      	bne.n	8004abe <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fcf1 	bl	800541a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d104      	bne.n	8004a4c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d137      	bne.n	8004ac2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d804      	bhi.n	8004a64 <USBH_MSC_ClassRequest+0x60>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	e000      	b.n	8004a66 <USBH_MSC_ClassRequest+0x62>
 8004a64:	2202      	movs	r2, #2
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73bb      	strb	r3, [r7, #14]
 8004a6e:	e014      	b.n	8004a9a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8004a70:	7bbb      	ldrb	r3, [r7, #14]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	2134      	movs	r1, #52	; 0x34
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3392      	adds	r3, #146	; 0x92
 8004a7e:	2202      	movs	r2, #2
 8004a80:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8004a82:	7bbb      	ldrb	r3, [r7, #14]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	2134      	movs	r1, #52	; 0x34
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	33c1      	adds	r3, #193	; 0xc1
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8004a94:	7bbb      	ldrb	r3, [r7, #14]
 8004a96:	3301      	adds	r3, #1
 8004a98:	73bb      	strb	r3, [r7, #14]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	7bba      	ldrb	r2, [r7, #14]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3e5      	bcc.n	8004a70 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8004aa4:	e00d      	b.n	8004ac2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f002 f87c 	bl	8006ba6 <USBH_ClrFeature>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d108      	bne.n	8004ac6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	7bda      	ldrb	r2, [r3, #15]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	739a      	strb	r2, [r3, #14]
      }
      break;
 8004abc:	e003      	b.n	8004ac6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8004abe:	bf00      	nop
 8004ac0:	e002      	b.n	8004ac8 <USBH_MSC_ClassRequest+0xc4>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <USBH_MSC_ClassRequest+0xc4>
      break;
 8004ac6:	bf00      	nop
  }

  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	7b1b      	ldrb	r3, [r3, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <USBH_MSC_Process+0x2e>
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	f000 8271 	beq.w	8004fe2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8004b00:	e272      	b.n	8004fe8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	f080 824f 	bcs.w	8004fb2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	2334      	movs	r3, #52	; 0x34
 8004b20:	fb03 f301 	mul.w	r3, r3, r1
 8004b24:	4413      	add	r3, r2
 8004b26:	3391      	adds	r3, #145	; 0x91
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b32:	4619      	mov	r1, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	2334      	movs	r3, #52	; 0x34
 8004b38:	fb03 f301 	mul.w	r3, r3, r1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3390      	adds	r3, #144	; 0x90
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	f200 8243 	bhi.w	8004fce <USBH_MSC_Process+0x4fa>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <USBH_MSC_Process+0x7c>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004fcf 	.word	0x08004fcf
 8004b58:	08004c3d 	.word	0x08004c3d
 8004b5c:	08004dc1 	.word	0x08004dc1
 8004b60:	08004b9b 	.word	0x08004b9b
 8004b64:	08004e8d 	.word	0x08004e8d
 8004b68:	08004fcf 	.word	0x08004fcf
 8004b6c:	08004fcf 	.word	0x08004fcf
 8004b70:	08004fa1 	.word	0x08004fa1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	2334      	movs	r3, #52	; 0x34
 8004b80:	fb03 f301 	mul.w	r3, r3, r1
 8004b84:	4413      	add	r3, r2
 8004b86:	3390      	adds	r3, #144	; 0x90
 8004b88:	2204      	movs	r2, #4
 8004b8a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8004b98:	e222      	b.n	8004fe0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ba0:	b2d9      	uxtb	r1, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2334      	movs	r3, #52	; 0x34
 8004bac:	fb03 f302 	mul.w	r3, r3, r2
 8004bb0:	3398      	adds	r3, #152	; 0x98
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3307      	adds	r3, #7
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 ff6a 	bl	8005a94 <USBH_MSC_SCSI_Inquiry>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	2334      	movs	r3, #52	; 0x34
 8004bd6:	fb03 f301 	mul.w	r3, r3, r1
 8004bda:	4413      	add	r3, r2
 8004bdc:	3390      	adds	r3, #144	; 0x90
 8004bde:	2202      	movs	r2, #2
 8004be0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d10c      	bne.n	8004c02 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bee:	4619      	mov	r1, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	2334      	movs	r3, #52	; 0x34
 8004bf4:	fb03 f301 	mul.w	r3, r3, r1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3390      	adds	r3, #144	; 0x90
 8004bfc:	2205      	movs	r2, #5
 8004bfe:	701a      	strb	r2, [r3, #0]
            break;
 8004c00:	e1e7      	b.n	8004fd2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	f040 81e4 	bne.w	8004fd2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c10:	4619      	mov	r1, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	2334      	movs	r3, #52	; 0x34
 8004c16:	fb03 f301 	mul.w	r3, r3, r1
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3390      	adds	r3, #144	; 0x90
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c28:	4619      	mov	r1, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	2334      	movs	r3, #52	; 0x34
 8004c2e:	fb03 f301 	mul.w	r3, r3, r1
 8004c32:	4413      	add	r3, r2
 8004c34:	3391      	adds	r3, #145	; 0x91
 8004c36:	2202      	movs	r2, #2
 8004c38:	701a      	strb	r2, [r3, #0]
            break;
 8004c3a:	e1ca      	b.n	8004fd2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fe66 	bl	8005918 <USBH_MSC_SCSI_TestUnitReady>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8004c50:	7bbb      	ldrb	r3, [r7, #14]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d149      	bne.n	8004cea <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	2334      	movs	r3, #52	; 0x34
 8004c62:	fb03 f301 	mul.w	r3, r3, r1
 8004c66:	4413      	add	r3, r2
 8004c68:	3392      	adds	r3, #146	; 0x92
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c76:	4619      	mov	r1, r3
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	2334      	movs	r3, #52	; 0x34
 8004c7c:	fb03 f301 	mul.w	r3, r3, r1
 8004c80:	4413      	add	r3, r2
 8004c82:	33c1      	adds	r3, #193	; 0xc1
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e00b      	b.n	8004ca2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c90:	4619      	mov	r1, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	2334      	movs	r3, #52	; 0x34
 8004c96:	fb03 f301 	mul.w	r3, r3, r1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	33c1      	adds	r3, #193	; 0xc1
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ca8:	4619      	mov	r1, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	2334      	movs	r3, #52	; 0x34
 8004cae:	fb03 f301 	mul.w	r3, r3, r1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3390      	adds	r3, #144	; 0x90
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	2334      	movs	r3, #52	; 0x34
 8004cc6:	fb03 f301 	mul.w	r3, r3, r1
 8004cca:	4413      	add	r3, r2
 8004ccc:	3391      	adds	r3, #145	; 0x91
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cd8:	4619      	mov	r1, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	2334      	movs	r3, #52	; 0x34
 8004cde:	fb03 f301 	mul.w	r3, r3, r1
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3392      	adds	r3, #146	; 0x92
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8004cea:	7bbb      	ldrb	r3, [r7, #14]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d14a      	bne.n	8004d86 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	2334      	movs	r3, #52	; 0x34
 8004cfc:	fb03 f301 	mul.w	r3, r3, r1
 8004d00:	4413      	add	r3, r2
 8004d02:	3392      	adds	r3, #146	; 0x92
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d00c      	beq.n	8004d24 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d10:	4619      	mov	r1, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	2334      	movs	r3, #52	; 0x34
 8004d16:	fb03 f301 	mul.w	r3, r3, r1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	33c1      	adds	r3, #193	; 0xc1
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e00b      	b.n	8004d3c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	2334      	movs	r3, #52	; 0x34
 8004d30:	fb03 f301 	mul.w	r3, r3, r1
 8004d34:	4413      	add	r3, r2
 8004d36:	33c1      	adds	r3, #193	; 0xc1
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d42:	4619      	mov	r1, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	2334      	movs	r3, #52	; 0x34
 8004d48:	fb03 f301 	mul.w	r3, r3, r1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3390      	adds	r3, #144	; 0x90
 8004d50:	2205      	movs	r2, #5
 8004d52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	2334      	movs	r3, #52	; 0x34
 8004d60:	fb03 f301 	mul.w	r3, r3, r1
 8004d64:	4413      	add	r3, r2
 8004d66:	3391      	adds	r3, #145	; 0x91
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d72:	4619      	mov	r1, r3
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	2334      	movs	r3, #52	; 0x34
 8004d78:	fb03 f301 	mul.w	r3, r3, r1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3392      	adds	r3, #146	; 0x92
 8004d80:	2202      	movs	r2, #2
 8004d82:	701a      	strb	r2, [r3, #0]
            break;
 8004d84:	e127      	b.n	8004fd6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8004d86:	7bbb      	ldrb	r3, [r7, #14]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	f040 8124 	bne.w	8004fd6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d94:	4619      	mov	r1, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	2334      	movs	r3, #52	; 0x34
 8004d9a:	fb03 f301 	mul.w	r3, r3, r1
 8004d9e:	4413      	add	r3, r2
 8004da0:	3390      	adds	r3, #144	; 0x90
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004dac:	4619      	mov	r1, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	2334      	movs	r3, #52	; 0x34
 8004db2:	fb03 f301 	mul.w	r3, r3, r1
 8004db6:	4413      	add	r3, r2
 8004db8:	3391      	adds	r3, #145	; 0x91
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
            break;
 8004dbe:	e10a      	b.n	8004fd6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004dc6:	b2d9      	uxtb	r1, r3
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2334      	movs	r3, #52	; 0x34
 8004dd2:	fb03 f302 	mul.w	r3, r3, r2
 8004dd6:	3390      	adds	r3, #144	; 0x90
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	3304      	adds	r3, #4
 8004dde:	461a      	mov	r2, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fddc 	bl	800599e <USBH_MSC_SCSI_ReadCapacity>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d120      	bne.n	8004e32 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004df6:	4619      	mov	r1, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	2334      	movs	r3, #52	; 0x34
 8004dfc:	fb03 f301 	mul.w	r3, r3, r1
 8004e00:	4413      	add	r3, r2
 8004e02:	3390      	adds	r3, #144	; 0x90
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e0e:	4619      	mov	r1, r3
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	2334      	movs	r3, #52	; 0x34
 8004e14:	fb03 f301 	mul.w	r3, r3, r1
 8004e18:	4413      	add	r3, r2
 8004e1a:	3391      	adds	r3, #145	; 0x91
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e26:	3301      	adds	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8004e30:	e0d3      	b.n	8004fda <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d10c      	bne.n	8004e52 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e3e:	4619      	mov	r1, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	2334      	movs	r3, #52	; 0x34
 8004e44:	fb03 f301 	mul.w	r3, r3, r1
 8004e48:	4413      	add	r3, r2
 8004e4a:	3390      	adds	r3, #144	; 0x90
 8004e4c:	2205      	movs	r2, #5
 8004e4e:	701a      	strb	r2, [r3, #0]
            break;
 8004e50:	e0c3      	b.n	8004fda <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	f040 80c0 	bne.w	8004fda <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e60:	4619      	mov	r1, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	2334      	movs	r3, #52	; 0x34
 8004e66:	fb03 f301 	mul.w	r3, r3, r1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3390      	adds	r3, #144	; 0x90
 8004e6e:	2201      	movs	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e78:	4619      	mov	r1, r3
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	2334      	movs	r3, #52	; 0x34
 8004e7e:	fb03 f301 	mul.w	r3, r3, r1
 8004e82:	4413      	add	r3, r2
 8004e84:	3391      	adds	r3, #145	; 0x91
 8004e86:	2202      	movs	r2, #2
 8004e88:	701a      	strb	r2, [r3, #0]
            break;
 8004e8a:	e0a6      	b.n	8004fda <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e92:	b2d9      	uxtb	r1, r3
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2334      	movs	r3, #52	; 0x34
 8004e9e:	fb03 f302 	mul.w	r3, r3, r2
 8004ea2:	3398      	adds	r3, #152	; 0x98
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fe96 	bl	8005bde <USBH_MSC_SCSI_RequestSense>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d145      	bne.n	8004f48 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	2334      	movs	r3, #52	; 0x34
 8004ec8:	fb03 f301 	mul.w	r3, r3, r1
 8004ecc:	4413      	add	r3, r2
 8004ece:	339c      	adds	r3, #156	; 0x9c
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	d00c      	beq.n	8004ef0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004edc:	4619      	mov	r1, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	2334      	movs	r3, #52	; 0x34
 8004ee2:	fb03 f301 	mul.w	r3, r3, r1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	339c      	adds	r3, #156	; 0x9c
 8004eea:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d117      	bne.n	8004f20 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d80c      	bhi.n	8004f20 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	2334      	movs	r3, #52	; 0x34
 8004f12:	fb03 f301 	mul.w	r3, r3, r1
 8004f16:	4413      	add	r3, r2
 8004f18:	3390      	adds	r3, #144	; 0x90
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	701a      	strb	r2, [r3, #0]
                  break;
 8004f1e:	e05f      	b.n	8004fe0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f26:	4619      	mov	r1, r3
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	2334      	movs	r3, #52	; 0x34
 8004f2c:	fb03 f301 	mul.w	r3, r3, r1
 8004f30:	4413      	add	r3, r2
 8004f32:	3390      	adds	r3, #144	; 0x90
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f3e:	3301      	adds	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d10c      	bne.n	8004f68 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f54:	4619      	mov	r1, r3
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	2334      	movs	r3, #52	; 0x34
 8004f5a:	fb03 f301 	mul.w	r3, r3, r1
 8004f5e:	4413      	add	r3, r2
 8004f60:	3390      	adds	r3, #144	; 0x90
 8004f62:	2208      	movs	r2, #8
 8004f64:	701a      	strb	r2, [r3, #0]
            break;
 8004f66:	e03a      	b.n	8004fde <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d137      	bne.n	8004fde <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f74:	4619      	mov	r1, r3
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	2334      	movs	r3, #52	; 0x34
 8004f7a:	fb03 f301 	mul.w	r3, r3, r1
 8004f7e:	4413      	add	r3, r2
 8004f80:	3390      	adds	r3, #144	; 0x90
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	2334      	movs	r3, #52	; 0x34
 8004f92:	fb03 f301 	mul.w	r3, r3, r1
 8004f96:	4413      	add	r3, r2
 8004f98:	3391      	adds	r3, #145	; 0x91
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	701a      	strb	r2, [r3, #0]
            break;
 8004f9e:	e01e      	b.n	8004fde <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8004fb0:	e016      	b.n	8004fe0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
      break;
 8004fcc:	e00c      	b.n	8004fe8 <USBH_MSC_Process+0x514>
            break;
 8004fce:	bf00      	nop
 8004fd0:	e00a      	b.n	8004fe8 <USBH_MSC_Process+0x514>
            break;
 8004fd2:	bf00      	nop
 8004fd4:	e008      	b.n	8004fe8 <USBH_MSC_Process+0x514>
            break;
 8004fd6:	bf00      	nop
 8004fd8:	e006      	b.n	8004fe8 <USBH_MSC_Process+0x514>
            break;
 8004fda:	bf00      	nop
 8004fdc:	e004      	b.n	8004fe8 <USBH_MSC_Process+0x514>
            break;
 8004fde:	bf00      	nop
      break;
 8004fe0:	e002      	b.n	8004fe8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe6:	bf00      	nop
  }
  return error;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop

08004ff4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af02      	add	r7, sp, #8
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	2134      	movs	r1, #52	; 0x34
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3390      	adds	r3, #144	; 0x90
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b07      	cmp	r3, #7
 800503a:	d03c      	beq.n	80050b6 <USBH_MSC_RdWrProcess+0xac>
 800503c:	2b07      	cmp	r3, #7
 800503e:	f300 80a7 	bgt.w	8005190 <USBH_MSC_RdWrProcess+0x186>
 8005042:	2b05      	cmp	r3, #5
 8005044:	d06c      	beq.n	8005120 <USBH_MSC_RdWrProcess+0x116>
 8005046:	2b06      	cmp	r3, #6
 8005048:	f040 80a2 	bne.w	8005190 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800504c:	78f9      	ldrb	r1, [r7, #3]
 800504e:	2300      	movs	r3, #0
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	2200      	movs	r2, #0
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fea5 	bl	8005da6 <USBH_MSC_SCSI_Read>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	2134      	movs	r1, #52	; 0x34
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	3390      	adds	r3, #144	; 0x90
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800507c:	e08a      	b.n	8005194 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d109      	bne.n	8005098 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	2134      	movs	r1, #52	; 0x34
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	3390      	adds	r3, #144	; 0x90
 8005092:	2205      	movs	r2, #5
 8005094:	701a      	strb	r2, [r3, #0]
      break;
 8005096:	e07d      	b.n	8005194 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d17a      	bne.n	8005194 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	2134      	movs	r1, #52	; 0x34
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	4413      	add	r3, r2
 80050aa:	3390      	adds	r3, #144	; 0x90
 80050ac:	2208      	movs	r2, #8
 80050ae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80050b0:	2302      	movs	r3, #2
 80050b2:	75fb      	strb	r3, [r7, #23]
      break;
 80050b4:	e06e      	b.n	8005194 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80050b6:	78f9      	ldrb	r1, [r7, #3]
 80050b8:	2300      	movs	r3, #0
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2300      	movs	r3, #0
 80050be:	2200      	movs	r2, #0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fe05 	bl	8005cd0 <USBH_MSC_SCSI_Write>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	2134      	movs	r1, #52	; 0x34
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	3390      	adds	r3, #144	; 0x90
 80050de:	2201      	movs	r2, #1
 80050e0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80050e6:	e057      	b.n	8005198 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d109      	bne.n	8005102 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	2134      	movs	r1, #52	; 0x34
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	4413      	add	r3, r2
 80050fa:	3390      	adds	r3, #144	; 0x90
 80050fc:	2205      	movs	r2, #5
 80050fe:	701a      	strb	r2, [r3, #0]
      break;
 8005100:	e04a      	b.n	8005198 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d147      	bne.n	8005198 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	2134      	movs	r1, #52	; 0x34
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	4413      	add	r3, r2
 8005114:	3390      	adds	r3, #144	; 0x90
 8005116:	2208      	movs	r2, #8
 8005118:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800511a:	2302      	movs	r3, #2
 800511c:	75fb      	strb	r3, [r7, #23]
      break;
 800511e:	e03b      	b.n	8005198 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	2234      	movs	r2, #52	; 0x34
 8005124:	fb02 f303 	mul.w	r3, r2, r3
 8005128:	3398      	adds	r3, #152	; 0x98
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fd52 	bl	8005bde <USBH_MSC_SCSI_RequestSense>
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d113      	bne.n	800516c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	2134      	movs	r1, #52	; 0x34
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	4413      	add	r3, r2
 8005150:	3390      	adds	r3, #144	; 0x90
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	2134      	movs	r1, #52	; 0x34
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3391      	adds	r3, #145	; 0x91
 8005164:	2202      	movs	r2, #2
 8005166:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8005168:	2302      	movs	r3, #2
 800516a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d014      	beq.n	800519c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d111      	bne.n	800519c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	2134      	movs	r1, #52	; 0x34
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	3390      	adds	r3, #144	; 0x90
 8005186:	2208      	movs	r2, #8
 8005188:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800518a:	2302      	movs	r3, #2
 800518c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800518e:	e005      	b.n	800519c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8005190:	bf00      	nop
 8005192:	e004      	b.n	800519e <USBH_MSC_RdWrProcess+0x194>
      break;
 8005194:	bf00      	nop
 8005196:	e002      	b.n	800519e <USBH_MSC_RdWrProcess+0x194>
      break;
 8005198:	bf00      	nop
 800519a:	e000      	b.n	800519e <USBH_MSC_RdWrProcess+0x194>
      break;
 800519c:	bf00      	nop

  }
  return error;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b0b      	cmp	r3, #11
 80051c6:	d10c      	bne.n	80051e2 <USBH_MSC_UnitIsReady+0x3a>
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	2134      	movs	r1, #52	; 0x34
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	3391      	adds	r3, #145	; 0x91
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e001      	b.n	80051e6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	460b      	mov	r3, r1
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b0b      	cmp	r3, #11
 8005214:	d10d      	bne.n	8005232 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8005216:	7afb      	ldrb	r3, [r7, #11]
 8005218:	2234      	movs	r2, #52	; 0x34
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	3390      	adds	r3, #144	; 0x90
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	2234      	movs	r2, #52	; 0x34
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f005 f8f5 	bl	800a418 <memcpy>
    return USBH_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e000      	b.n	8005234 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8005232:	2302      	movs	r3, #2
  }
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	460b      	mov	r3, r1
 800524a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00e      	beq.n	8005280 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005268:	2b0b      	cmp	r3, #11
 800526a:	d109      	bne.n	8005280 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800526c:	7afb      	ldrb	r3, [r7, #11]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	2134      	movs	r1, #52	; 0x34
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	4413      	add	r3, r2
 8005278:	3390      	adds	r3, #144	; 0x90
 800527a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800527c:	2b01      	cmp	r3, #1
 800527e:	d001      	beq.n	8005284 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8005280:	2302      	movs	r3, #2
 8005282:	e040      	b.n	8005306 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2206      	movs	r2, #6
 8005288:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800528a:	7afb      	ldrb	r3, [r7, #11]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	2134      	movs	r1, #52	; 0x34
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	3390      	adds	r3, #144	; 0x90
 8005298:	2206      	movs	r2, #6
 800529a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	b29a      	uxth	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80052a6:	7af9      	ldrb	r1, [r7, #11]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fd78 	bl	8005da6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80052bc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80052be:	e016      	b.n	80052ee <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad2      	subs	r2, r2, r3
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d805      	bhi.n	80052e4 <USBH_MSC_Read+0xa8>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2201      	movs	r2, #1
 80052e8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80052ea:	2302      	movs	r3, #2
 80052ec:	e00b      	b.n	8005306 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80052ee:	7afb      	ldrb	r3, [r7, #11]
 80052f0:	4619      	mov	r1, r3
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fe89 	bl	800500a <USBH_MSC_RdWrProcess>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d0e0      	beq.n	80052c0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2201      	movs	r2, #1
 8005302:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b088      	sub	sp, #32
 8005312:	af02      	add	r7, sp, #8
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	460b      	mov	r3, r1
 800531c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800533a:	2b0b      	cmp	r3, #11
 800533c:	d109      	bne.n	8005352 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	2134      	movs	r1, #52	; 0x34
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	4413      	add	r3, r2
 800534a:	3390      	adds	r3, #144	; 0x90
 800534c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8005352:	2302      	movs	r3, #2
 8005354:	e040      	b.n	80053d8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2207      	movs	r2, #7
 800535a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	2134      	movs	r1, #52	; 0x34
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	4413      	add	r3, r2
 8005368:	3390      	adds	r3, #144	; 0x90
 800536a:	2207      	movs	r2, #7
 800536c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800536e:	7afb      	ldrb	r3, [r7, #11]
 8005370:	b29a      	uxth	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8005378:	7af9      	ldrb	r1, [r7, #11]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fca4 	bl	8005cd0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800538e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005390:	e016      	b.n	80053c0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad2      	subs	r2, r2, r3
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	f242 7110 	movw	r1, #10000	; 0x2710
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d805      	bhi.n	80053b6 <USBH_MSC_Write+0xa8>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2201      	movs	r2, #1
 80053ba:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80053bc:	2302      	movs	r3, #2
 80053be:	e00b      	b.n	80053d8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80053c0:	7afb      	ldrb	r3, [r7, #11]
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff fe20 	bl	800500a <USBH_MSC_RdWrProcess>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d0e0      	beq.n	8005392 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2201      	movs	r2, #1
 80053d4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2221      	movs	r2, #33	; 0x21
 80053ec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005406:	2200      	movs	r2, #0
 8005408:	2100      	movs	r1, #0
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fdab 	bl	8006f66 <USBH_CtlReq>
 8005410:	4603      	mov	r3, r0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	22a1      	movs	r2, #161	; 0xa1
 8005428:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	22fe      	movs	r2, #254	; 0xfe
 800542e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005442:	2201      	movs	r2, #1
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fd8d 	bl	8006f66 <USBH_CtlReq>
 800544c:	4603      	mov	r3, r0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <USBH_MSC_BOT_Init+0x3c>)
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <USBH_MSC_BOT_Init+0x40>)
 8005474:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	43425355 	.word	0x43425355
 8005498:	20304050 	.word	0x20304050

0800549c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80054b0:	2301      	movs	r3, #1
 80054b2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054cc:	3b01      	subs	r3, #1
 80054ce:	2b0a      	cmp	r3, #10
 80054d0:	f200 819e 	bhi.w	8005810 <USBH_MSC_BOT_Process+0x374>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <USBH_MSC_BOT_Process+0x40>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005509 	.word	0x08005509
 80054e0:	08005531 	.word	0x08005531
 80054e4:	0800559b 	.word	0x0800559b
 80054e8:	080055b9 	.word	0x080055b9
 80054ec:	0800563d 	.word	0x0800563d
 80054f0:	0800565f 	.word	0x0800565f
 80054f4:	080056f7 	.word	0x080056f7
 80054f8:	08005713 	.word	0x08005713
 80054fc:	08005765 	.word	0x08005765
 8005500:	08005795 	.word	0x08005795
 8005504:	080057f7 	.word	0x080057f7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	795b      	ldrb	r3, [r3, #5]
 8005522:	2201      	movs	r2, #1
 8005524:	9200      	str	r2, [sp, #0]
 8005526:	221f      	movs	r2, #31
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 ff2a 	bl	8007382 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800552e:	e17e      	b.n	800582e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	795b      	ldrb	r3, [r3, #5]
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f004 fe56 	bl	800a1e8 <USBH_LL_GetURBState>
 800553c:	4603      	mov	r3, r0
 800553e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005540:	7d3b      	ldrb	r3, [r7, #20]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d118      	bne.n	8005578 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00f      	beq.n	800556e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005554:	b25b      	sxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	da04      	bge.n	8005564 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005562:	e157      	b.n	8005814 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2205      	movs	r2, #5
 8005568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800556c:	e152      	b.n	8005814 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2207      	movs	r2, #7
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005576:	e14d      	b.n	8005814 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005578:	7d3b      	ldrb	r3, [r7, #20]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d104      	bne.n	8005588 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005586:	e145      	b.n	8005814 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8005588:	7d3b      	ldrb	r3, [r7, #20]
 800558a:	2b05      	cmp	r3, #5
 800558c:	f040 8142 	bne.w	8005814 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	220a      	movs	r2, #10
 8005594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005598:	e13c      	b.n	8005814 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	895a      	ldrh	r2, [r3, #10]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	791b      	ldrb	r3, [r3, #4]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 ff0f 	bl	80073cc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2204      	movs	r2, #4
 80055b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80055b6:	e13a      	b.n	800582e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	791b      	ldrb	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f004 fe12 	bl	800a1e8 <USBH_LL_GetURBState>
 80055c4:	4603      	mov	r3, r0
 80055c6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80055c8:	7d3b      	ldrb	r3, [r7, #20]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d12d      	bne.n	800562a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	8952      	ldrh	r2, [r2, #10]
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d910      	bls.n	80055fc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	8952      	ldrh	r2, [r2, #10]
 80055e4:	441a      	add	r2, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	8952      	ldrh	r2, [r2, #10]
 80055f4:	1a9a      	subs	r2, r3, r2
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80055fa:	e002      	b.n	8005602 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2200      	movs	r2, #0
 8005600:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	895a      	ldrh	r2, [r3, #10]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	791b      	ldrb	r3, [r3, #4]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 fed7 	bl	80073cc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800561e:	e0fb      	b.n	8005818 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2207      	movs	r2, #7
 8005624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005628:	e0f6      	b.n	8005818 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800562a:	7d3b      	ldrb	r3, [r7, #20]
 800562c:	2b05      	cmp	r3, #5
 800562e:	f040 80f3 	bne.w	8005818 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2209      	movs	r2, #9
 8005636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800563a:	e0ed      	b.n	8005818 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	891a      	ldrh	r2, [r3, #8]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	795b      	ldrb	r3, [r3, #5]
 800564a:	2001      	movs	r0, #1
 800564c:	9000      	str	r0, [sp, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fe97 	bl	8007382 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2206      	movs	r2, #6
 8005658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800565c:	e0e7      	b.n	800582e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	795b      	ldrb	r3, [r3, #5]
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f004 fdbf 	bl	800a1e8 <USBH_LL_GetURBState>
 800566a:	4603      	mov	r3, r0
 800566c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800566e:	7d3b      	ldrb	r3, [r7, #20]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d12f      	bne.n	80056d4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	8912      	ldrh	r2, [r2, #8]
 800567c:	4293      	cmp	r3, r2
 800567e:	d910      	bls.n	80056a2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	8912      	ldrh	r2, [r2, #8]
 800568a:	441a      	add	r2, r3
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	8912      	ldrh	r2, [r2, #8]
 800569a:	1a9a      	subs	r2, r3, r2
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c
 80056a0:	e002      	b.n	80056a8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2200      	movs	r2, #0
 80056a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00c      	beq.n	80056ca <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	891a      	ldrh	r2, [r3, #8]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	795b      	ldrb	r3, [r3, #5]
 80056be:	2001      	movs	r0, #1
 80056c0:	9000      	str	r0, [sp, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fe5d 	bl	8007382 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80056c8:	e0a8      	b.n	800581c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2207      	movs	r2, #7
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056d2:	e0a3      	b.n	800581c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80056d4:	7d3b      	ldrb	r3, [r7, #20]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d104      	bne.n	80056e4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2205      	movs	r2, #5
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056e2:	e09b      	b.n	800581c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80056e4:	7d3b      	ldrb	r3, [r7, #20]
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	f040 8098 	bne.w	800581c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	220a      	movs	r2, #10
 80056f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056f4:	e092      	b.n	800581c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	791b      	ldrb	r3, [r3, #4]
 8005700:	220d      	movs	r2, #13
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f001 fe62 	bl	80073cc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2208      	movs	r2, #8
 800570c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005710:	e08d      	b.n	800582e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	791b      	ldrb	r3, [r3, #4]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f004 fd65 	bl	800a1e8 <USBH_LL_GetURBState>
 800571e:	4603      	mov	r3, r0
 8005720:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8005722:	7d3b      	ldrb	r3, [r7, #20]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d115      	bne.n	8005754 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f8a9 	bl	8005890 <USBH_MSC_DecodeCSW>
 800573e:	4603      	mov	r3, r0
 8005740:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8005742:	7d7b      	ldrb	r3, [r7, #21]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800574c:	e068      	b.n	8005820 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800574e:	2302      	movs	r3, #2
 8005750:	75fb      	strb	r3, [r7, #23]
      break;
 8005752:	e065      	b.n	8005820 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8005754:	7d3b      	ldrb	r3, [r7, #20]
 8005756:	2b05      	cmp	r3, #5
 8005758:	d162      	bne.n	8005820 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2209      	movs	r2, #9
 800575e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005762:	e05d      	b.n	8005820 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	2200      	movs	r2, #0
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f864 	bl	8005838 <USBH_MSC_BOT_Abort>
 8005770:	4603      	mov	r3, r0
 8005772:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8005774:	7dbb      	ldrb	r3, [r7, #22]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2207      	movs	r2, #7
 800577e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8005782:	e04f      	b.n	8005824 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005784:	7dbb      	ldrb	r3, [r7, #22]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d14c      	bne.n	8005824 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	220b      	movs	r2, #11
 800578e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005792:	e047      	b.n	8005824 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2201      	movs	r2, #1
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f84c 	bl	8005838 <USBH_MSC_BOT_Abort>
 80057a0:	4603      	mov	r3, r0
 80057a2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80057a4:	7dbb      	ldrb	r3, [r7, #22]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d11d      	bne.n	80057e6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	795b      	ldrb	r3, [r3, #5]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f004 fd73 	bl	800a29c <USBH_LL_GetToggle>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	7959      	ldrb	r1, [r3, #5]
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	f1c3 0301 	rsb	r3, r3, #1
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f004 fd37 	bl	800a23c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	791b      	ldrb	r3, [r3, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f004 fd30 	bl	800a23c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2209      	movs	r2, #9
 80057e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80057e4:	e020      	b.n	8005828 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80057e6:	7dbb      	ldrb	r3, [r7, #22]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d11d      	bne.n	8005828 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	220b      	movs	r2, #11
 80057f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80057f4:	e018      	b.n	8005828 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fdf2 	bl	80053e0 <USBH_MSC_BOT_REQ_Reset>
 80057fc:	4603      	mov	r3, r0
 80057fe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d112      	bne.n	800582c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800580e:	e00d      	b.n	800582c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8005810:	bf00      	nop
 8005812:	e00c      	b.n	800582e <USBH_MSC_BOT_Process+0x392>
      break;
 8005814:	bf00      	nop
 8005816:	e00a      	b.n	800582e <USBH_MSC_BOT_Process+0x392>
      break;
 8005818:	bf00      	nop
 800581a:	e008      	b.n	800582e <USBH_MSC_BOT_Process+0x392>
      break;
 800581c:	bf00      	nop
 800581e:	e006      	b.n	800582e <USBH_MSC_BOT_Process+0x392>
      break;
 8005820:	bf00      	nop
 8005822:	e004      	b.n	800582e <USBH_MSC_BOT_Process+0x392>
      break;
 8005824:	bf00      	nop
 8005826:	e002      	b.n	800582e <USBH_MSC_BOT_Process+0x392>
      break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <USBH_MSC_BOT_Process+0x392>
      break;
 800582c:	bf00      	nop
  }
  return status;
 800582e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
 8005844:	4613      	mov	r3, r2
 8005846:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8005848:	2302      	movs	r3, #2
 800584a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8005856:	78bb      	ldrb	r3, [r7, #2]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <USBH_MSC_BOT_Abort+0x2a>
 800585c:	2b01      	cmp	r3, #1
 800585e:	d009      	beq.n	8005874 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8005860:	e011      	b.n	8005886 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	79db      	ldrb	r3, [r3, #7]
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 f99c 	bl	8006ba6 <USBH_ClrFeature>
 800586e:	4603      	mov	r3, r0
 8005870:	73fb      	strb	r3, [r7, #15]
      break;
 8005872:	e008      	b.n	8005886 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	799b      	ldrb	r3, [r3, #6]
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 f993 	bl	8006ba6 <USBH_ClrFeature>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
      break;
 8005884:	bf00      	nop
  }
  return status;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	791b      	ldrb	r3, [r3, #4]
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f004 fc09 	bl	800a0c4 <USBH_LL_GetLastXferSize>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b0d      	cmp	r3, #13
 80058b6:	d002      	beq.n	80058be <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80058b8:	2302      	movs	r3, #2
 80058ba:	73fb      	strb	r3, [r7, #15]
 80058bc:	e024      	b.n	8005908 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c2:	4a14      	ldr	r2, [pc, #80]	; (8005914 <USBH_MSC_DecodeCSW+0x84>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d11d      	bne.n	8005904 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d119      	bne.n	8005908 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
 80058e2:	e011      	b.n	8005908 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d102      	bne.n	80058f4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	e009      	b.n	8005908 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d104      	bne.n	8005908 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80058fe:	2302      	movs	r3, #2
 8005900:	73fb      	strb	r3, [r7, #15]
 8005902:	e001      	b.n	8005908 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8005904:	2302      	movs	r3, #2
 8005906:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	53425355 	.word	0x53425355

08005918 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005924:	2302      	movs	r3, #2
 8005926:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005938:	2b01      	cmp	r3, #1
 800593a:	d002      	beq.n	8005942 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800593c:	2b02      	cmp	r3, #2
 800593e:	d021      	beq.n	8005984 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005940:	e028      	b.n	8005994 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	220a      	movs	r2, #10
 8005954:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	3363      	adds	r3, #99	; 0x63
 800595c:	2210      	movs	r2, #16
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f004 fd67 	bl	800a434 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      break;
 8005982:	e007      	b.n	8005994 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fd87 	bl	800549c <USBH_MSC_BOT_Process>
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]
      break;
 8005992:	bf00      	nop
  }

  return error;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	460b      	mov	r3, r1
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d002      	beq.n	80059ca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d027      	beq.n	8005a18 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80059c8:	e05f      	b.n	8005a8a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2208      	movs	r2, #8
 80059ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	220a      	movs	r2, #10
 80059dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3363      	adds	r3, #99	; 0x63
 80059e4:	2210      	movs	r2, #16
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f004 fd23 	bl	800a434 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2225      	movs	r2, #37	; 0x25
 80059f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2202      	movs	r2, #2
 8005a02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f103 0210 	add.w	r2, r3, #16
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
      break;
 8005a16:	e038      	b.n	8005a8a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005a18:	7afb      	ldrb	r3, [r7, #11]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff fd3d 	bl	800549c <USBH_MSC_BOT_Process>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d12d      	bne.n	8005a88 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	3303      	adds	r3, #3
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3e:	3302      	adds	r3, #2
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005a52:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	061b      	lsls	r3, r3, #24
 8005a5e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a6a:	3307      	adds	r3, #7
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a76:	3306      	adds	r3, #6
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	809a      	strh	r2, [r3, #4]
      break;
 8005a88:	bf00      	nop
  }

  return error;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d002      	beq.n	8005ac0 <USBH_MSC_SCSI_Inquiry+0x2c>
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d03d      	beq.n	8005b3a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8005abe:	e089      	b.n	8005bd4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2224      	movs	r2, #36	; 0x24
 8005ac4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	220a      	movs	r2, #10
 8005ad2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3363      	adds	r3, #99	; 0x63
 8005ada:	220a      	movs	r2, #10
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f004 fca8 	bl	800a434 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2212      	movs	r2, #18
 8005ae8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005aec:	7afb      	ldrb	r3, [r7, #11]
 8005aee:	015b      	lsls	r3, r3, #5
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f103 0210 	add.w	r2, r3, #16
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
      break;
 8005b38:	e04c      	b.n	8005bd4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff fcac 	bl	800549c <USBH_MSC_BOT_Process>
 8005b44:	4603      	mov	r3, r0
 8005b46:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d141      	bne.n	8005bd2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8005b4e:	2222      	movs	r2, #34	; 0x22
 8005b50:	2100      	movs	r1, #0
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f004 fc6e 	bl	800a434 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b80:	3301      	adds	r3, #1
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da03      	bge.n	8005b92 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	709a      	strb	r2, [r3, #2]
 8005b90:	e002      	b.n	8005b98 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	1cd8      	adds	r0, r3, #3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f004 fc36 	bl	800a418 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 000c 	add.w	r0, r3, #12
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb8:	3310      	adds	r3, #16
 8005bba:	2210      	movs	r2, #16
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f004 fc2b 	bl	800a418 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	331d      	adds	r3, #29
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005bcc:	3220      	adds	r2, #32
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	601a      	str	r2, [r3, #0]
      break;
 8005bd2:	bf00      	nop
  }

  return error;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	460b      	mov	r3, r1
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005bec:	2302      	movs	r3, #2
 8005bee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d002      	beq.n	8005c0a <USBH_MSC_SCSI_RequestSense+0x2c>
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d03d      	beq.n	8005c84 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8005c08:	e05d      	b.n	8005cc6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	220e      	movs	r2, #14
 8005c0e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2280      	movs	r2, #128	; 0x80
 8005c14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	220a      	movs	r2, #10
 8005c1c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	3363      	adds	r3, #99	; 0x63
 8005c24:	2210      	movs	r2, #16
 8005c26:	2100      	movs	r1, #0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f004 fc03 	bl	800a434 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2203      	movs	r2, #3
 8005c32:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	015b      	lsls	r3, r3, #5
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	220e      	movs	r2, #14
 8005c56:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f103 0210 	add.w	r2, r3, #16
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
      break;
 8005c82:	e020      	b.n	8005cc6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005c84:	7afb      	ldrb	r3, [r7, #11]
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fc07 	bl	800549c <USBH_MSC_BOT_Process>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d115      	bne.n	8005cc4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb2:	7b1a      	ldrb	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbe:	7b5a      	ldrb	r2, [r3, #13]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	709a      	strb	r2, [r3, #2]
      break;
 8005cc4:	bf00      	nop
  }

  return error;
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d002      	beq.n	8005cfe <USBH_MSC_SCSI_Write+0x2e>
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d047      	beq.n	8005d8c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005cfc:	e04e      	b.n	8005d9c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005d04:	461a      	mov	r2, r3
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	fb03 f202 	mul.w	r2, r3, r2
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	220a      	movs	r2, #10
 8005d1c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	3363      	adds	r3, #99	; 0x63
 8005d24:	2210      	movs	r2, #16
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f004 fb83 	bl	800a434 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	222a      	movs	r2, #42	; 0x2a
 8005d32:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005d36:	79fa      	ldrb	r2, [r7, #7]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005d3e:	79ba      	ldrb	r2, [r7, #6]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005d46:	797a      	ldrb	r2, [r7, #5]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005d4e:	1d3b      	adds	r3, r7, #4
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005d58:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005d62:	f107 0320 	add.w	r3, r7, #32
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8a:	e007      	b.n	8005d9c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fb83 	bl	800549c <USBH_MSC_BOT_Process>
 8005d96:	4603      	mov	r3, r0
 8005d98:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9a:	bf00      	nop
  }

  return error;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	460b      	mov	r3, r1
 8005db4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005db6:	2302      	movs	r3, #2
 8005db8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d002      	beq.n	8005dd4 <USBH_MSC_SCSI_Read+0x2e>
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d047      	beq.n	8005e62 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005dd2:	e04e      	b.n	8005e72 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	fb03 f202 	mul.w	r2, r3, r2
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2280      	movs	r2, #128	; 0x80
 8005dea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	220a      	movs	r2, #10
 8005df2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3363      	adds	r3, #99	; 0x63
 8005dfa:	2210      	movs	r2, #16
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f004 fb18 	bl	800a434 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2228      	movs	r2, #40	; 0x28
 8005e08:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005e0c:	79fa      	ldrb	r2, [r7, #7]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005e14:	79ba      	ldrb	r2, [r7, #6]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005e1c:	797a      	ldrb	r2, [r7, #5]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005e2e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005e38:	f107 0320 	add.w	r3, r7, #32
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e60:	e007      	b.n	8005e72 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005e62:	7afb      	ldrb	r3, [r7, #11]
 8005e64:	4619      	mov	r1, r3
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff fb18 	bl	800549c <USBH_MSC_BOT_Process>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e70:	bf00      	nop
  }

  return error;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e90:	2302      	movs	r3, #2
 8005e92:	e029      	b.n	8005ee8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	79fa      	ldrb	r2, [r7, #7]
 8005e98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f81f 	bl	8005ef0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f004 f83b 	bl	8009f5c <USBH_LL_Init>

  return USBH_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e009      	b.n	8005f16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	33e0      	adds	r3, #224	; 0xe0
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b0e      	cmp	r3, #14
 8005f1a:	d9f2      	bls.n	8005f02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e009      	b.n	8005f36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3c:	d3f1      	bcc.n	8005f22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2240      	movs	r2, #64	; 0x40
 8005f62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d016      	beq.n	8005fda <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10e      	bne.n	8005fd4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005fbc:	1c59      	adds	r1, r3, #1
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	33de      	adds	r3, #222	; 0xde
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
 8005fd2:	e004      	b.n	8005fde <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	73fb      	strb	r3, [r7, #15]
 8005fd8:	e001      	b.n	8005fde <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	429a      	cmp	r2, r3
 8006006:	d204      	bcs.n	8006012 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	78fa      	ldrb	r2, [r7, #3]
 800600c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006010:	e001      	b.n	8006016 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006012:	2302      	movs	r3, #2
 8006014:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	461a      	mov	r2, r3
 8006032:	4603      	mov	r3, r0
 8006034:	70fb      	strb	r3, [r7, #3]
 8006036:	460b      	mov	r3, r1
 8006038:	70bb      	strb	r3, [r7, #2]
 800603a:	4613      	mov	r3, r2
 800603c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006042:	2300      	movs	r3, #0
 8006044:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800604c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800604e:	e025      	b.n	800609c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	221a      	movs	r2, #26
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	3308      	adds	r3, #8
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	3302      	adds	r3, #2
 8006060:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	795b      	ldrb	r3, [r3, #5]
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	429a      	cmp	r2, r3
 800606a:	d002      	beq.n	8006072 <USBH_FindInterface+0x4e>
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2bff      	cmp	r3, #255	; 0xff
 8006070:	d111      	bne.n	8006096 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006076:	78ba      	ldrb	r2, [r7, #2]
 8006078:	429a      	cmp	r2, r3
 800607a:	d002      	beq.n	8006082 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800607c:	78bb      	ldrb	r3, [r7, #2]
 800607e:	2bff      	cmp	r3, #255	; 0xff
 8006080:	d109      	bne.n	8006096 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006086:	787a      	ldrb	r2, [r7, #1]
 8006088:	429a      	cmp	r2, r3
 800608a:	d002      	beq.n	8006092 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800608c:	787b      	ldrb	r3, [r7, #1]
 800608e:	2bff      	cmp	r3, #255	; 0xff
 8006090:	d101      	bne.n	8006096 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	e006      	b.n	80060a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	3301      	adds	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d9d6      	bls.n	8006050 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80060a2:	23ff      	movs	r3, #255	; 0xff
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f003 ff8b 	bl	8009fd4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80060be:	2101      	movs	r1, #1
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f004 f8a4 	bl	800a20e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80060d8:	2302      	movs	r3, #2
 80060da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d102      	bne.n	80060f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2203      	movs	r2, #3
 80060f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b0b      	cmp	r3, #11
 80060fa:	f200 81b3 	bhi.w	8006464 <USBH_Process+0x394>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <USBH_Process+0x34>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006135 	.word	0x08006135
 8006108:	08006167 	.word	0x08006167
 800610c:	080061cf 	.word	0x080061cf
 8006110:	080063ff 	.word	0x080063ff
 8006114:	08006465 	.word	0x08006465
 8006118:	08006273 	.word	0x08006273
 800611c:	080063a5 	.word	0x080063a5
 8006120:	080062a9 	.word	0x080062a9
 8006124:	080062c9 	.word	0x080062c9
 8006128:	080062e9 	.word	0x080062e9
 800612c:	08006317 	.word	0x08006317
 8006130:	080063e7 	.word	0x080063e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8193 	beq.w	8006468 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006148:	20c8      	movs	r0, #200	; 0xc8
 800614a:	f004 f8d7 	bl	800a2fc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f003 ff9d 	bl	800a08e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006164:	e180      	b.n	8006468 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800616c:	2b01      	cmp	r3, #1
 800616e:	d107      	bne.n	8006180 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800617e:	e182      	b.n	8006486 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800618a:	d914      	bls.n	80061b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006192:	3301      	adds	r3, #1
 8006194:	b2da      	uxtb	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d903      	bls.n	80061ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	220d      	movs	r2, #13
 80061aa:	701a      	strb	r2, [r3, #0]
      break;
 80061ac:	e16b      	b.n	8006486 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
      break;
 80061b4:	e167      	b.n	8006486 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061bc:	f103 020a 	add.w	r2, r3, #10
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80061c6:	200a      	movs	r0, #10
 80061c8:	f004 f898 	bl	800a2fc <USBH_Delay>
      break;
 80061cc:	e15b      	b.n	8006486 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061de:	2104      	movs	r1, #4
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80061e4:	2064      	movs	r0, #100	; 0x64
 80061e6:	f004 f889 	bl	800a2fc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f003 ff28 	bl	800a040 <USBH_LL_GetSpeed>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2205      	movs	r2, #5
 80061fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006200:	2100      	movs	r1, #0
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f92f 	bl	8007466 <USBH_AllocPipe>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 f927 	bl	8007466 <USBH_AllocPipe>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	7919      	ldrb	r1, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006234:	b292      	uxth	r2, r2
 8006236:	9202      	str	r2, [sp, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	9201      	str	r2, [sp, #4]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4603      	mov	r3, r0
 8006240:	2280      	movs	r2, #128	; 0x80
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 f8e0 	bl	8007408 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	7959      	ldrb	r1, [r3, #5]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800625c:	b292      	uxth	r2, r2
 800625e:	9202      	str	r2, [sp, #8]
 8006260:	2200      	movs	r2, #0
 8006262:	9201      	str	r2, [sp, #4]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	4603      	mov	r3, r0
 8006268:	2200      	movs	r2, #0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 f8cc 	bl	8007408 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006270:	e109      	b.n	8006486 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f90c 	bl	8006490 <USBH_HandleEnum>
 8006278:	4603      	mov	r3, r0
 800627a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	f040 80f3 	bne.w	800646c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006294:	2b01      	cmp	r3, #1
 8006296:	d103      	bne.n	80062a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2208      	movs	r2, #8
 800629c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800629e:	e0e5      	b.n	800646c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2207      	movs	r2, #7
 80062a4:	701a      	strb	r2, [r3, #0]
      break;
 80062a6:	e0e1      	b.n	800646c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80de 	beq.w	8006470 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ba:	2101      	movs	r1, #1
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2208      	movs	r2, #8
 80062c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80062c6:	e0d3      	b.n	8006470 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fc20 	bl	8006b18 <USBH_SetCfg>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 80ca 	bne.w	8006474 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2209      	movs	r2, #9
 80062e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062e6:	e0c5      	b.n	8006474 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80062f6:	2101      	movs	r1, #1
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc30 	bl	8006b5e <USBH_SetFeature>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 80b9 	bne.w	8006478 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	220a      	movs	r2, #10
 800630a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800630c:	e0b4      	b.n	8006478 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	220a      	movs	r2, #10
 8006312:	701a      	strb	r2, [r3, #0]
      break;
 8006314:	e0b0      	b.n	8006478 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80ad 	beq.w	800647c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
 800632e:	e016      	b.n	800635e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006330:	7bfa      	ldrb	r2, [r7, #15]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	32de      	adds	r2, #222	; 0xde
 8006336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633a:	791a      	ldrb	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006342:	429a      	cmp	r2, r3
 8006344:	d108      	bne.n	8006358 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006346:	7bfa      	ldrb	r2, [r7, #15]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	32de      	adds	r2, #222	; 0xde
 800634c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006356:	e005      	b.n	8006364 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	3301      	adds	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0e5      	beq.n	8006330 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d016      	beq.n	800639c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2206      	movs	r2, #6
 8006384:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800638c:	2103      	movs	r1, #3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006392:	e073      	b.n	800647c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	220d      	movs	r2, #13
 8006398:	701a      	strb	r2, [r3, #0]
      break;
 800639a:	e06f      	b.n	800647c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	220d      	movs	r2, #13
 80063a0:	701a      	strb	r2, [r3, #0]
      break;
 80063a2:	e06b      	b.n	800647c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d017      	beq.n	80063de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	220b      	movs	r2, #11
 80063ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063cc:	e058      	b.n	8006480 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d154      	bne.n	8006480 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	220d      	movs	r2, #13
 80063da:	701a      	strb	r2, [r3, #0]
      break;
 80063dc:	e050      	b.n	8006480 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	220d      	movs	r2, #13
 80063e2:	701a      	strb	r2, [r3, #0]
      break;
 80063e4:	e04c      	b.n	8006480 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d049      	beq.n	8006484 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
      }
      break;
 80063fc:	e042      	b.n	8006484 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fd72 	bl	8005ef0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800643a:	2105      	movs	r1, #5
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	d107      	bne.n	800645c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fe2b 	bl	80060b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800645a:	e014      	b.n	8006486 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f003 fdb9 	bl	8009fd4 <USBH_LL_Start>
      break;
 8006462:	e010      	b.n	8006486 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006464:	bf00      	nop
 8006466:	e00e      	b.n	8006486 <USBH_Process+0x3b6>
      break;
 8006468:	bf00      	nop
 800646a:	e00c      	b.n	8006486 <USBH_Process+0x3b6>
      break;
 800646c:	bf00      	nop
 800646e:	e00a      	b.n	8006486 <USBH_Process+0x3b6>
    break;
 8006470:	bf00      	nop
 8006472:	e008      	b.n	8006486 <USBH_Process+0x3b6>
      break;
 8006474:	bf00      	nop
 8006476:	e006      	b.n	8006486 <USBH_Process+0x3b6>
      break;
 8006478:	bf00      	nop
 800647a:	e004      	b.n	8006486 <USBH_Process+0x3b6>
      break;
 800647c:	bf00      	nop
 800647e:	e002      	b.n	8006486 <USBH_Process+0x3b6>
      break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <USBH_Process+0x3b6>
      break;
 8006484:	bf00      	nop
  }
  return USBH_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af04      	add	r7, sp, #16
 8006496:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800649c:	2301      	movs	r3, #1
 800649e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b07      	cmp	r3, #7
 80064a6:	f200 81c1 	bhi.w	800682c <USBH_HandleEnum+0x39c>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <USBH_HandleEnum+0x20>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064d1 	.word	0x080064d1
 80064b4:	0800658f 	.word	0x0800658f
 80064b8:	080065f9 	.word	0x080065f9
 80064bc:	08006687 	.word	0x08006687
 80064c0:	080066f1 	.word	0x080066f1
 80064c4:	08006761 	.word	0x08006761
 80064c8:	080067a7 	.word	0x080067a7
 80064cc:	080067ed 	.word	0x080067ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80064d0:	2108      	movs	r1, #8
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa50 	bl	8006978 <USBH_Get_DevDesc>
 80064d8:	4603      	mov	r3, r0
 80064da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d130      	bne.n	8006544 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	7919      	ldrb	r1, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006506:	b292      	uxth	r2, r2
 8006508:	9202      	str	r2, [sp, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	9201      	str	r2, [sp, #4]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	4603      	mov	r3, r0
 8006512:	2280      	movs	r2, #128	; 0x80
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 ff77 	bl	8007408 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	7959      	ldrb	r1, [r3, #5]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800652e:	b292      	uxth	r2, r2
 8006530:	9202      	str	r2, [sp, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	9201      	str	r2, [sp, #4]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4603      	mov	r3, r0
 800653a:	2200      	movs	r2, #0
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 ff63 	bl	8007408 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006542:	e175      	b.n	8006830 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	2b03      	cmp	r3, #3
 8006548:	f040 8172 	bne.w	8006830 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006552:	3301      	adds	r3, #1
 8006554:	b2da      	uxtb	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006562:	2b03      	cmp	r3, #3
 8006564:	d903      	bls.n	800656e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	220d      	movs	r2, #13
 800656a:	701a      	strb	r2, [r3, #0]
      break;
 800656c:	e160      	b.n	8006830 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	795b      	ldrb	r3, [r3, #5]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 ff97 	bl	80074a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	791b      	ldrb	r3, [r3, #4]
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 ff91 	bl	80074a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
      break;
 800658c:	e150      	b.n	8006830 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800658e:	2112      	movs	r1, #18
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f9f1 	bl	8006978 <USBH_Get_DevDesc>
 8006596:	4603      	mov	r3, r0
 8006598:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d103      	bne.n	80065a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065a6:	e145      	b.n	8006834 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	f040 8142 	bne.w	8006834 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065b6:	3301      	adds	r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d903      	bls.n	80065d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	220d      	movs	r2, #13
 80065ce:	701a      	strb	r2, [r3, #0]
      break;
 80065d0:	e130      	b.n	8006834 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	795b      	ldrb	r3, [r3, #5]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 ff65 	bl	80074a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	791b      	ldrb	r3, [r3, #4]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 ff5f 	bl	80074a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
      break;
 80065f6:	e11d      	b.n	8006834 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80065f8:	2101      	movs	r1, #1
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa68 	bl	8006ad0 <USBH_SetAddress>
 8006600:	4603      	mov	r3, r0
 8006602:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d132      	bne.n	8006670 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800660a:	2002      	movs	r0, #2
 800660c:	f003 fe76 	bl	800a2fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2203      	movs	r2, #3
 800661c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	7919      	ldrb	r1, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006632:	b292      	uxth	r2, r2
 8006634:	9202      	str	r2, [sp, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	9201      	str	r2, [sp, #4]
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	4603      	mov	r3, r0
 800663e:	2280      	movs	r2, #128	; 0x80
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fee1 	bl	8007408 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7959      	ldrb	r1, [r3, #5]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800665a:	b292      	uxth	r2, r2
 800665c:	9202      	str	r2, [sp, #8]
 800665e:	2200      	movs	r2, #0
 8006660:	9201      	str	r2, [sp, #4]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	4603      	mov	r3, r0
 8006666:	2200      	movs	r2, #0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fecd 	bl	8007408 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800666e:	e0e3      	b.n	8006838 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	2b03      	cmp	r3, #3
 8006674:	f040 80e0 	bne.w	8006838 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	220d      	movs	r2, #13
 800667c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	705a      	strb	r2, [r3, #1]
      break;
 8006684:	e0d8      	b.n	8006838 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006686:	2109      	movs	r1, #9
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f99d 	bl	80069c8 <USBH_Get_CfgDesc>
 800668e:	4603      	mov	r3, r0
 8006690:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2204      	movs	r2, #4
 800669c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800669e:	e0cd      	b.n	800683c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	f040 80ca 	bne.w	800683c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066ae:	3301      	adds	r3, #1
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d903      	bls.n	80066ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	220d      	movs	r2, #13
 80066c6:	701a      	strb	r2, [r3, #0]
      break;
 80066c8:	e0b8      	b.n	800683c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	795b      	ldrb	r3, [r3, #5]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fee9 	bl	80074a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	791b      	ldrb	r3, [r3, #4]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fee3 	bl	80074a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
      break;
 80066ee:	e0a5      	b.n	800683c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f965 	bl	80069c8 <USBH_Get_CfgDesc>
 80066fe:	4603      	mov	r3, r0
 8006700:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2205      	movs	r2, #5
 800670c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800670e:	e097      	b.n	8006840 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b03      	cmp	r3, #3
 8006714:	f040 8094 	bne.w	8006840 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800671e:	3301      	adds	r3, #1
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800672e:	2b03      	cmp	r3, #3
 8006730:	d903      	bls.n	800673a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	220d      	movs	r2, #13
 8006736:	701a      	strb	r2, [r3, #0]
      break;
 8006738:	e082      	b.n	8006840 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	795b      	ldrb	r3, [r3, #5]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 feb1 	bl	80074a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	791b      	ldrb	r3, [r3, #4]
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 feab 	bl	80074a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
      break;
 800675e:	e06f      	b.n	8006840 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006766:	2b00      	cmp	r3, #0
 8006768:	d019      	beq.n	800679e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006776:	23ff      	movs	r3, #255	; 0xff
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f949 	bl	8006a10 <USBH_Get_StringDesc>
 800677e:	4603      	mov	r3, r0
 8006780:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2206      	movs	r2, #6
 800678c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800678e:	e059      	b.n	8006844 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d156      	bne.n	8006844 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2206      	movs	r2, #6
 800679a:	705a      	strb	r2, [r3, #1]
      break;
 800679c:	e052      	b.n	8006844 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2206      	movs	r2, #6
 80067a2:	705a      	strb	r2, [r3, #1]
      break;
 80067a4:	e04e      	b.n	8006844 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d019      	beq.n	80067e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80067bc:	23ff      	movs	r3, #255	; 0xff
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f926 	bl	8006a10 <USBH_Get_StringDesc>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2207      	movs	r2, #7
 80067d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80067d4:	e038      	b.n	8006848 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d135      	bne.n	8006848 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2207      	movs	r2, #7
 80067e0:	705a      	strb	r2, [r3, #1]
      break;
 80067e2:	e031      	b.n	8006848 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2207      	movs	r2, #7
 80067e8:	705a      	strb	r2, [r3, #1]
      break;
 80067ea:	e02d      	b.n	8006848 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d017      	beq.n	8006826 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006802:	23ff      	movs	r3, #255	; 0xff
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f903 	bl	8006a10 <USBH_Get_StringDesc>
 800680a:	4603      	mov	r3, r0
 800680c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006818:	e018      	b.n	800684c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	2b03      	cmp	r3, #3
 800681e:	d115      	bne.n	800684c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	e012      	b.n	800684c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	73fb      	strb	r3, [r7, #15]
      break;
 800682a:	e00f      	b.n	800684c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800682c:	bf00      	nop
 800682e:	e00e      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 8006830:	bf00      	nop
 8006832:	e00c      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 8006834:	bf00      	nop
 8006836:	e00a      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 8006838:	bf00      	nop
 800683a:	e008      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 800683c:	bf00      	nop
 800683e:	e006      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 8006840:	bf00      	nop
 8006842:	e004      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 8006844:	bf00      	nop
 8006846:	e002      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <USBH_HandleEnum+0x3be>
      break;
 800684c:	bf00      	nop
  }
  return Status;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f804 	bl	800689a <USBH_HandleSof>
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b0b      	cmp	r3, #11
 80068aa:	d10a      	bne.n	80068c2 <USBH_HandleSof+0x28>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
  }
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80068da:	bf00      	nop
}
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80068f6:	bf00      	nop
}
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f003 fb5a 	bl	800a00a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	791b      	ldrb	r3, [r3, #4]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fda3 	bl	80074a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	795b      	ldrb	r3, [r3, #5]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fd9d 	bl	80074a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af02      	add	r7, sp, #8
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	b29b      	uxth	r3, r3
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4613      	mov	r3, r2
 8006992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006996:	2100      	movs	r1, #0
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f864 	bl	8006a66 <USBH_GetDescriptor>
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	b292      	uxth	r2, r2
 80069b8:	4619      	mov	r1, r3
 80069ba:	f000 f918 	bl	8006bee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	331c      	adds	r3, #28
 80069d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80069da:	887b      	ldrh	r3, [r7, #2]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f83d 	bl	8006a66 <USBH_GetDescriptor>
 80069ec:	4603      	mov	r3, r0
 80069ee:	72fb      	strb	r3, [r7, #11]
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d107      	bne.n	8006a06 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069fc:	887a      	ldrh	r2, [r7, #2]
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 f964 	bl	8006cce <USBH_ParseCfgDesc>
  }

  return status;
 8006a06:	7afb      	ldrb	r3, [r7, #11]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	72fb      	strb	r3, [r7, #11]
 8006a20:	4613      	mov	r3, r2
 8006a22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a2c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006a34:	893b      	ldrh	r3, [r7, #8]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f812 	bl	8006a66 <USBH_GetDescriptor>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75fb      	strb	r3, [r7, #23]
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d107      	bne.n	8006a5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a52:	893a      	ldrh	r2, [r7, #8]
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fa37 	bl	8006eca <USBH_ParseStringDesc>
  }

  return status;
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	72fb      	strb	r3, [r7, #11]
 8006a74:	4613      	mov	r3, r2
 8006a76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	789b      	ldrb	r3, [r3, #2]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d11c      	bne.n	8006aba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2206      	movs	r2, #6
 8006a90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	893a      	ldrh	r2, [r7, #8]
 8006a96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006a98:	893b      	ldrh	r3, [r7, #8]
 8006a9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa2:	d104      	bne.n	8006aae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f240 4209 	movw	r2, #1033	; 0x409
 8006aaa:	829a      	strh	r2, [r3, #20]
 8006aac:	e002      	b.n	8006ab4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8b3a      	ldrh	r2, [r7, #24]
 8006ab8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006aba:	8b3b      	ldrh	r3, [r7, #24]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fa50 	bl	8006f66 <USBH_CtlReq>
 8006ac6:	4603      	mov	r3, r0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	789b      	ldrb	r3, [r3, #2]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d10f      	bne.n	8006b04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2205      	movs	r2, #5
 8006aee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b04:	2200      	movs	r2, #0
 8006b06:	2100      	movs	r1, #0
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa2c 	bl	8006f66 <USBH_CtlReq>
 8006b0e:	4603      	mov	r3, r0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	789b      	ldrb	r3, [r3, #2]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d10e      	bne.n	8006b4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2209      	movs	r2, #9
 8006b36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	887a      	ldrh	r2, [r7, #2]
 8006b3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa09 	bl	8006f66 <USBH_CtlReq>
 8006b54:	4603      	mov	r3, r0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	789b      	ldrb	r3, [r3, #2]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d10f      	bne.n	8006b92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b92:	2200      	movs	r2, #0
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9e5 	bl	8006f66 <USBH_CtlReq>
 8006b9c:	4603      	mov	r3, r0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	789b      	ldrb	r3, [r3, #2]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d10f      	bne.n	8006bda <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2100      	movs	r1, #0
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f9c1 	bl	8006f66 <USBH_CtlReq>
 8006be4:	4603      	mov	r3, r0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	785a      	ldrb	r2, [r3, #1]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3302      	adds	r3, #2
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	3303      	adds	r3, #3
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	791a      	ldrb	r2, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	795a      	ldrb	r2, [r3, #5]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	799a      	ldrb	r2, [r3, #6]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	79da      	ldrb	r2, [r3, #7]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d939      	bls.n	8006cc2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	3308      	adds	r3, #8
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	3309      	adds	r3, #9
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4313      	orrs	r3, r2
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	330a      	adds	r3, #10
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	330b      	adds	r3, #11
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	330d      	adds	r3, #13
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7b9a      	ldrb	r2, [r3, #14]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	7bda      	ldrb	r2, [r3, #15]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	7c1a      	ldrb	r2, [r3, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	7c5a      	ldrb	r2, [r3, #17]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	745a      	strb	r2, [r3, #17]
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b08a      	sub	sp, #40	; 0x28
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	785a      	ldrb	r2, [r3, #1]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3302      	adds	r3, #2
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	3303      	adds	r3, #3
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	791a      	ldrb	r2, [r3, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	795a      	ldrb	r2, [r3, #5]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	799a      	ldrb	r2, [r3, #6]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	79da      	ldrb	r2, [r3, #7]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	7a1a      	ldrb	r2, [r3, #8]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	2b09      	cmp	r3, #9
 8006d48:	d95f      	bls.n	8006e0a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006d4a:	2309      	movs	r3, #9
 8006d4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d52:	e051      	b.n	8006df8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d54:	f107 0316 	add.w	r3, r7, #22
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d5c:	f000 f8e8 	bl	8006f30 <USBH_GetNextDesc>
 8006d60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d146      	bne.n	8006df8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d6e:	221a      	movs	r2, #26
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	3308      	adds	r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d80:	69f8      	ldr	r0, [r7, #28]
 8006d82:	f000 f846 	bl	8006e12 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d90:	e022      	b.n	8006dd8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d92:	f107 0316 	add.w	r3, r7, #22
 8006d96:	4619      	mov	r1, r3
 8006d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d9a:	f000 f8c9 	bl	8006f30 <USBH_GetNextDesc>
 8006d9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b05      	cmp	r3, #5
 8006da6:	d117      	bne.n	8006dd8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006db0:	3201      	adds	r2, #1
 8006db2:	00d2      	lsls	r2, r2, #3
 8006db4:	211a      	movs	r1, #26
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dc8:	69b8      	ldr	r0, [r7, #24]
 8006dca:	f000 f851 	bl	8006e70 <USBH_ParseEPDesc>
            ep_ix++;
 8006dce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	791b      	ldrb	r3, [r3, #4]
 8006ddc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d204      	bcs.n	8006dee <USBH_ParseCfgDesc+0x120>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	885a      	ldrh	r2, [r3, #2]
 8006de8:	8afb      	ldrh	r3, [r7, #22]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d8d1      	bhi.n	8006d92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006df2:	3301      	adds	r3, #1
 8006df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d804      	bhi.n	8006e0a <USBH_ParseCfgDesc+0x13c>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	885a      	ldrh	r2, [r3, #2]
 8006e04:	8afb      	ldrh	r3, [r7, #22]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d8a4      	bhi.n	8006d54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	3728      	adds	r7, #40	; 0x28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	785a      	ldrb	r2, [r3, #1]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	789a      	ldrb	r2, [r3, #2]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	78da      	ldrb	r2, [r3, #3]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	791a      	ldrb	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	795a      	ldrb	r2, [r3, #5]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	799a      	ldrb	r2, [r3, #6]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	79da      	ldrb	r2, [r3, #7]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	7a1a      	ldrb	r2, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	721a      	strb	r2, [r3, #8]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781a      	ldrb	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785a      	ldrb	r2, [r3, #1]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	789a      	ldrb	r2, [r3, #2]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	78da      	ldrb	r2, [r3, #3]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	3305      	adds	r3, #5
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	799a      	ldrb	r2, [r3, #6]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	719a      	strb	r2, [r3, #6]
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b087      	sub	sp, #28
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d120      	bne.n	8006f24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	1e9a      	subs	r2, r3, #2
 8006ee8:	88fb      	ldrh	r3, [r7, #6]
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bf28      	it	cs
 8006eee:	4613      	movcs	r3, r2
 8006ef0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3302      	adds	r3, #2
 8006ef6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	82fb      	strh	r3, [r7, #22]
 8006efc:	e00b      	b.n	8006f16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006efe:	8afb      	ldrh	r3, [r7, #22]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006f10:	8afb      	ldrh	r3, [r7, #22]
 8006f12:	3302      	adds	r3, #2
 8006f14:	82fb      	strh	r3, [r7, #22]
 8006f16:	8afa      	ldrh	r2, [r7, #22]
 8006f18:	8abb      	ldrh	r3, [r7, #20]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d3ef      	bcc.n	8006efe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
  }
}
 8006f24:	bf00      	nop
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	881a      	ldrh	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4413      	add	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f58:	68fb      	ldr	r3, [r7, #12]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	4613      	mov	r3, r2
 8006f72:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f74:	2301      	movs	r3, #1
 8006f76:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d002      	beq.n	8006f86 <USBH_CtlReq+0x20>
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d00f      	beq.n	8006fa4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f84:	e027      	b.n	8006fd6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa2:	e018      	b.n	8006fd6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f81b 	bl	8006fe0 <USBH_HandleControl>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <USBH_CtlReq+0x54>
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d106      	bne.n	8006fc8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	761a      	strb	r2, [r3, #24]
      break;
 8006fc6:	e005      	b.n	8006fd4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d102      	bne.n	8006fd4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	709a      	strb	r2, [r3, #2]
      break;
 8006fd4:	bf00      	nop
  }
  return status;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7e1b      	ldrb	r3, [r3, #24]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	2b0a      	cmp	r3, #10
 8006ff8:	f200 8156 	bhi.w	80072a8 <USBH_HandleControl+0x2c8>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <USBH_HandleControl+0x24>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007031 	.word	0x08007031
 8007008:	0800704b 	.word	0x0800704b
 800700c:	080070b5 	.word	0x080070b5
 8007010:	080070db 	.word	0x080070db
 8007014:	08007113 	.word	0x08007113
 8007018:	0800713d 	.word	0x0800713d
 800701c:	0800718f 	.word	0x0800718f
 8007020:	080071b1 	.word	0x080071b1
 8007024:	080071ed 	.word	0x080071ed
 8007028:	08007213 	.word	0x08007213
 800702c:	08007251 	.word	0x08007251
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f103 0110 	add.w	r1, r3, #16
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	795b      	ldrb	r3, [r3, #5]
 800703a:	461a      	mov	r2, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f943 	bl	80072c8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	761a      	strb	r2, [r3, #24]
      break;
 8007048:	e139      	b.n	80072be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	795b      	ldrb	r3, [r3, #5]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f003 f8c9 	bl	800a1e8 <USBH_LL_GetURBState>
 8007056:	4603      	mov	r3, r0
 8007058:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d11e      	bne.n	800709e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7c1b      	ldrb	r3, [r3, #16]
 8007064:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007068:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8adb      	ldrh	r3, [r3, #22]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007072:	7b7b      	ldrb	r3, [r7, #13]
 8007074:	2b80      	cmp	r3, #128	; 0x80
 8007076:	d103      	bne.n	8007080 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2203      	movs	r2, #3
 800707c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800707e:	e115      	b.n	80072ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2205      	movs	r2, #5
 8007084:	761a      	strb	r2, [r3, #24]
      break;
 8007086:	e111      	b.n	80072ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007088:	7b7b      	ldrb	r3, [r7, #13]
 800708a:	2b80      	cmp	r3, #128	; 0x80
 800708c:	d103      	bne.n	8007096 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2209      	movs	r2, #9
 8007092:	761a      	strb	r2, [r3, #24]
      break;
 8007094:	e10a      	b.n	80072ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2207      	movs	r2, #7
 800709a:	761a      	strb	r2, [r3, #24]
      break;
 800709c:	e106      	b.n	80072ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d003      	beq.n	80070ac <USBH_HandleControl+0xcc>
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	f040 8100 	bne.w	80072ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	220b      	movs	r2, #11
 80070b0:	761a      	strb	r2, [r3, #24]
      break;
 80070b2:	e0fb      	b.n	80072ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6899      	ldr	r1, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	899a      	ldrh	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	791b      	ldrb	r3, [r3, #4]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f93a 	bl	8007346 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	761a      	strb	r2, [r3, #24]
      break;
 80070d8:	e0f1      	b.n	80072be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	791b      	ldrb	r3, [r3, #4]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f003 f881 	bl	800a1e8 <USBH_LL_GetURBState>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d102      	bne.n	80070f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2209      	movs	r2, #9
 80070f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d102      	bne.n	8007102 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80070fc:	2303      	movs	r3, #3
 80070fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007100:	e0d6      	b.n	80072b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	2b04      	cmp	r3, #4
 8007106:	f040 80d3 	bne.w	80072b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	220b      	movs	r2, #11
 800710e:	761a      	strb	r2, [r3, #24]
      break;
 8007110:	e0ce      	b.n	80072b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6899      	ldr	r1, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	899a      	ldrh	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	795b      	ldrb	r3, [r3, #5]
 800711e:	2001      	movs	r0, #1
 8007120:	9000      	str	r0, [sp, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8ea 	bl	80072fc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2206      	movs	r2, #6
 8007138:	761a      	strb	r2, [r3, #24]
      break;
 800713a:	e0c0      	b.n	80072be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	795b      	ldrb	r3, [r3, #5]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f003 f850 	bl	800a1e8 <USBH_LL_GetURBState>
 8007148:	4603      	mov	r3, r0
 800714a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d103      	bne.n	800715a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2207      	movs	r2, #7
 8007156:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007158:	e0ac      	b.n	80072b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	2b05      	cmp	r3, #5
 800715e:	d105      	bne.n	800716c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	220c      	movs	r2, #12
 8007164:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007166:	2303      	movs	r3, #3
 8007168:	73fb      	strb	r3, [r7, #15]
      break;
 800716a:	e0a3      	b.n	80072b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d103      	bne.n	800717a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2205      	movs	r2, #5
 8007176:	761a      	strb	r2, [r3, #24]
      break;
 8007178:	e09c      	b.n	80072b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b04      	cmp	r3, #4
 800717e:	f040 8099 	bne.w	80072b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	220b      	movs	r2, #11
 8007186:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007188:	2302      	movs	r3, #2
 800718a:	73fb      	strb	r3, [r7, #15]
      break;
 800718c:	e092      	b.n	80072b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	791b      	ldrb	r3, [r3, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8d5 	bl	8007346 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2208      	movs	r2, #8
 80071ac:	761a      	strb	r2, [r3, #24]

      break;
 80071ae:	e086      	b.n	80072be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	791b      	ldrb	r3, [r3, #4]
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f003 f816 	bl	800a1e8 <USBH_LL_GetURBState>
 80071bc:	4603      	mov	r3, r0
 80071be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d105      	bne.n	80071d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	220d      	movs	r2, #13
 80071ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071d0:	e072      	b.n	80072b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d103      	bne.n	80071e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220b      	movs	r2, #11
 80071dc:	761a      	strb	r2, [r3, #24]
      break;
 80071de:	e06b      	b.n	80072b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d168      	bne.n	80072b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80071e6:	2303      	movs	r3, #3
 80071e8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ea:	e065      	b.n	80072b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	795b      	ldrb	r3, [r3, #5]
 80071f0:	2201      	movs	r2, #1
 80071f2:	9200      	str	r2, [sp, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2100      	movs	r1, #0
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f87f 	bl	80072fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	220a      	movs	r2, #10
 800720e:	761a      	strb	r2, [r3, #24]
      break;
 8007210:	e055      	b.n	80072be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	795b      	ldrb	r3, [r3, #5]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f002 ffe5 	bl	800a1e8 <USBH_LL_GetURBState>
 800721e:	4603      	mov	r3, r0
 8007220:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d105      	bne.n	8007234 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	220d      	movs	r2, #13
 8007230:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007232:	e043      	b.n	80072bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d103      	bne.n	8007242 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2209      	movs	r2, #9
 800723e:	761a      	strb	r2, [r3, #24]
      break;
 8007240:	e03c      	b.n	80072bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d139      	bne.n	80072bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	220b      	movs	r2, #11
 800724c:	761a      	strb	r2, [r3, #24]
      break;
 800724e:	e035      	b.n	80072bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7e5b      	ldrb	r3, [r3, #25]
 8007254:	3301      	adds	r3, #1
 8007256:	b2da      	uxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	765a      	strb	r2, [r3, #25]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7e5b      	ldrb	r3, [r3, #25]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d806      	bhi.n	8007272 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007270:	e025      	b.n	80072be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007278:	2106      	movs	r1, #6
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	795b      	ldrb	r3, [r3, #5]
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f90c 	bl	80074a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	791b      	ldrb	r3, [r3, #4]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f906 	bl	80074a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80072a2:	2302      	movs	r3, #2
 80072a4:	73fb      	strb	r3, [r7, #15]
      break;
 80072a6:	e00a      	b.n	80072be <USBH_HandleControl+0x2de>

    default:
      break;
 80072a8:	bf00      	nop
 80072aa:	e008      	b.n	80072be <USBH_HandleControl+0x2de>
      break;
 80072ac:	bf00      	nop
 80072ae:	e006      	b.n	80072be <USBH_HandleControl+0x2de>
      break;
 80072b0:	bf00      	nop
 80072b2:	e004      	b.n	80072be <USBH_HandleControl+0x2de>
      break;
 80072b4:	bf00      	nop
 80072b6:	e002      	b.n	80072be <USBH_HandleControl+0x2de>
      break;
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <USBH_HandleControl+0x2de>
      break;
 80072bc:	bf00      	nop
  }

  return status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af04      	add	r7, sp, #16
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072d6:	79f9      	ldrb	r1, [r7, #7]
 80072d8:	2300      	movs	r3, #0
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	2308      	movs	r3, #8
 80072de:	9302      	str	r3, [sp, #8]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2300      	movs	r3, #0
 80072ea:	2200      	movs	r2, #0
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f002 ff4a 	bl	800a186 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af04      	add	r7, sp, #16
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4611      	mov	r1, r2
 8007308:	461a      	mov	r2, r3
 800730a:	460b      	mov	r3, r1
 800730c:	80fb      	strh	r3, [r7, #6]
 800730e:	4613      	mov	r3, r2
 8007310:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007320:	7979      	ldrb	r1, [r7, #5]
 8007322:	7e3b      	ldrb	r3, [r7, #24]
 8007324:	9303      	str	r3, [sp, #12]
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	2301      	movs	r3, #1
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	2300      	movs	r3, #0
 8007334:	2200      	movs	r2, #0
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f002 ff25 	bl	800a186 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b088      	sub	sp, #32
 800734a:	af04      	add	r7, sp, #16
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	4611      	mov	r1, r2
 8007352:	461a      	mov	r2, r3
 8007354:	460b      	mov	r3, r1
 8007356:	80fb      	strh	r3, [r7, #6]
 8007358:	4613      	mov	r3, r2
 800735a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800735c:	7979      	ldrb	r1, [r7, #5]
 800735e:	2300      	movs	r3, #0
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	9302      	str	r3, [sp, #8]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	2301      	movs	r3, #1
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	2300      	movs	r3, #0
 8007370:	2201      	movs	r2, #1
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f002 ff07 	bl	800a186 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007378:	2300      	movs	r3, #0

}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b088      	sub	sp, #32
 8007386:	af04      	add	r7, sp, #16
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	4611      	mov	r1, r2
 800738e:	461a      	mov	r2, r3
 8007390:	460b      	mov	r3, r1
 8007392:	80fb      	strh	r3, [r7, #6]
 8007394:	4613      	mov	r3, r2
 8007396:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073a6:	7979      	ldrb	r1, [r7, #5]
 80073a8:	7e3b      	ldrb	r3, [r7, #24]
 80073aa:	9303      	str	r3, [sp, #12]
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	2301      	movs	r3, #1
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	2302      	movs	r3, #2
 80073ba:	2200      	movs	r2, #0
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f002 fee2 	bl	800a186 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af04      	add	r7, sp, #16
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	4611      	mov	r1, r2
 80073d8:	461a      	mov	r2, r3
 80073da:	460b      	mov	r3, r1
 80073dc:	80fb      	strh	r3, [r7, #6]
 80073de:	4613      	mov	r3, r2
 80073e0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073e2:	7979      	ldrb	r1, [r7, #5]
 80073e4:	2300      	movs	r3, #0
 80073e6:	9303      	str	r3, [sp, #12]
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	9302      	str	r3, [sp, #8]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	2301      	movs	r3, #1
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2302      	movs	r3, #2
 80073f6:	2201      	movs	r2, #1
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f002 fec4 	bl	800a186 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af04      	add	r7, sp, #16
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	4608      	mov	r0, r1
 8007412:	4611      	mov	r1, r2
 8007414:	461a      	mov	r2, r3
 8007416:	4603      	mov	r3, r0
 8007418:	70fb      	strb	r3, [r7, #3]
 800741a:	460b      	mov	r3, r1
 800741c:	70bb      	strb	r3, [r7, #2]
 800741e:	4613      	mov	r3, r2
 8007420:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007422:	7878      	ldrb	r0, [r7, #1]
 8007424:	78ba      	ldrb	r2, [r7, #2]
 8007426:	78f9      	ldrb	r1, [r7, #3]
 8007428:	8b3b      	ldrh	r3, [r7, #24]
 800742a:	9302      	str	r3, [sp, #8]
 800742c:	7d3b      	ldrb	r3, [r7, #20]
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	7c3b      	ldrb	r3, [r7, #16]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	4603      	mov	r3, r0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f002 fe57 	bl	800a0ea <USBH_LL_OpenPipe>

  return USBH_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f002 fe76 	bl	800a148 <USBH_LL_ClosePipe>

  return USBH_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f836 	bl	80074e4 <USBH_GetFreePipe>
 8007478:	4603      	mov	r3, r0
 800747a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800747c:	89fb      	ldrh	r3, [r7, #14]
 800747e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007482:	4293      	cmp	r3, r2
 8007484:	d00a      	beq.n	800749c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	89fb      	ldrh	r3, [r7, #14]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	33e0      	adds	r3, #224	; 0xe0
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800749c:	89fb      	ldrh	r3, [r7, #14]
 800749e:	b2db      	uxtb	r3, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	2b0a      	cmp	r3, #10
 80074b8:	d80d      	bhi.n	80074d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	33e0      	adds	r3, #224	; 0xe0
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	33e0      	adds	r3, #224	; 0xe0
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	e00f      	b.n	8007516 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	33e0      	adds	r3, #224	; 0xe0
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	b29b      	uxth	r3, r3
 800750e:	e007      	b.n	8007520 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	3301      	adds	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b0a      	cmp	r3, #10
 800751a:	d9ec      	bls.n	80074f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800751c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	4a08      	ldr	r2, [pc, #32]	; (800755c <disk_status+0x30>)
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	79fa      	ldrb	r2, [r7, #7]
 8007544:	4905      	ldr	r1, [pc, #20]	; (800755c <disk_status+0x30>)
 8007546:	440a      	add	r2, r1
 8007548:	7b12      	ldrb	r2, [r2, #12]
 800754a:	4610      	mov	r0, r2
 800754c:	4798      	blx	r3
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	200000f0 	.word	0x200000f0

08007560 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	4a0d      	ldr	r2, [pc, #52]	; (80075a8 <disk_initialize+0x48>)
 8007572:	5cd3      	ldrb	r3, [r2, r3]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d111      	bne.n	800759c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	4a0b      	ldr	r2, [pc, #44]	; (80075a8 <disk_initialize+0x48>)
 800757c:	2101      	movs	r1, #1
 800757e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <disk_initialize+0x48>)
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	79fa      	ldrb	r2, [r7, #7]
 800758e:	4906      	ldr	r1, [pc, #24]	; (80075a8 <disk_initialize+0x48>)
 8007590:	440a      	add	r2, r1
 8007592:	7b12      	ldrb	r2, [r2, #12]
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200000f0 	.word	0x200000f0

080075ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <disk_read+0x3c>)
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	689c      	ldr	r4, [r3, #8]
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <disk_read+0x3c>)
 80075cc:	4413      	add	r3, r2
 80075ce:	7b18      	ldrb	r0, [r3, #12]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	47a0      	blx	r4
 80075d8:	4603      	mov	r3, r0
 80075da:	75fb      	strb	r3, [r7, #23]
  return res;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd90      	pop	{r4, r7, pc}
 80075e6:	bf00      	nop
 80075e8:	200000f0 	.word	0x200000f0

080075ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	4a0a      	ldr	r2, [pc, #40]	; (8007628 <disk_write+0x3c>)
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	68dc      	ldr	r4, [r3, #12]
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	4a07      	ldr	r2, [pc, #28]	; (8007628 <disk_write+0x3c>)
 800760c:	4413      	add	r3, r2
 800760e:	7b18      	ldrb	r0, [r3, #12]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	47a0      	blx	r4
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
  return res;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
}
 800761e:	4618      	mov	r0, r3
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	bd90      	pop	{r4, r7, pc}
 8007626:	bf00      	nop
 8007628:	200000f0 	.word	0x200000f0

0800762c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	603a      	str	r2, [r7, #0]
 8007636:	71fb      	strb	r3, [r7, #7]
 8007638:	460b      	mov	r3, r1
 800763a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	4a09      	ldr	r2, [pc, #36]	; (8007664 <disk_ioctl+0x38>)
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	79fa      	ldrb	r2, [r7, #7]
 800764a:	4906      	ldr	r1, [pc, #24]	; (8007664 <disk_ioctl+0x38>)
 800764c:	440a      	add	r2, r1
 800764e:	7b10      	ldrb	r0, [r2, #12]
 8007650:	79b9      	ldrb	r1, [r7, #6]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
  return res;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	200000f0 	.word	0x200000f0

08007668 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3301      	adds	r3, #1
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007678:	89fb      	ldrh	r3, [r7, #14]
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	b21a      	sxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	b21b      	sxth	r3, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	b21b      	sxth	r3, r3
 8007688:	81fb      	strh	r3, [r7, #14]
	return rv;
 800768a:	89fb      	ldrh	r3, [r7, #14]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3303      	adds	r3, #3
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	3202      	adds	r2, #2
 80076b0:	7812      	ldrb	r2, [r2, #0]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	3201      	adds	r2, #1
 80076be:	7812      	ldrb	r2, [r2, #0]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80076d0:	68fb      	ldr	r3, [r7, #12]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	887a      	ldrh	r2, [r7, #2]
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	887b      	ldrh	r3, [r7, #2]
 80076f8:	0a1b      	lsrs	r3, r3, #8
 80076fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	607a      	str	r2, [r7, #4]
 8007702:	887a      	ldrh	r2, [r7, #2]
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	0a1b      	lsrs	r3, r3, #8
 800772e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00d      	beq.n	80077a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	1c53      	adds	r3, r2, #1
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	1c59      	adds	r1, r3, #1
 8007790:	6179      	str	r1, [r7, #20]
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3b01      	subs	r3, #1
 800779a:	607b      	str	r3, [r7, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f1      	bne.n	8007786 <mem_cpy+0x1a>
	}
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80077ae:	b480      	push	{r7}
 80077b0:	b087      	sub	sp, #28
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	617a      	str	r2, [r7, #20]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	607b      	str	r3, [r7, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1f3      	bne.n	80077be <mem_set+0x10>
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80077e4:	b480      	push	{r7}
 80077e6:	b089      	sub	sp, #36	; 0x24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	61fa      	str	r2, [r7, #28]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	4619      	mov	r1, r3
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	61ba      	str	r2, [r7, #24]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	1acb      	subs	r3, r1, r3
 8007810:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	607b      	str	r3, [r7, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <mem_cmp+0x40>
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0eb      	beq.n	80077fc <mem_cmp+0x18>

	return r;
 8007824:	697b      	ldr	r3, [r7, #20]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3724      	adds	r7, #36	; 0x24
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800783c:	e002      	b.n	8007844 <chk_chr+0x12>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3301      	adds	r3, #1
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <chk_chr+0x26>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	4293      	cmp	r3, r2
 8007856:	d1f2      	bne.n	800783e <chk_chr+0xc>
	return *str;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	781b      	ldrb	r3, [r3, #0]
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007872:	2300      	movs	r3, #0
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e029      	b.n	80078d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800787c:	4a27      	ldr	r2, [pc, #156]	; (800791c <chk_lock+0xb4>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	4413      	add	r3, r2
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01d      	beq.n	80078c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800788a:	4a24      	ldr	r2, [pc, #144]	; (800791c <chk_lock+0xb4>)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	4413      	add	r3, r2
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d116      	bne.n	80078ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800789c:	4a1f      	ldr	r2, [pc, #124]	; (800791c <chk_lock+0xb4>)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	4413      	add	r3, r2
 80078a4:	3304      	adds	r3, #4
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d10c      	bne.n	80078ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078b0:	4a1a      	ldr	r2, [pc, #104]	; (800791c <chk_lock+0xb4>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	4413      	add	r3, r2
 80078b8:	3308      	adds	r3, #8
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d102      	bne.n	80078ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078c4:	e007      	b.n	80078d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80078c6:	2301      	movs	r3, #1
 80078c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3301      	adds	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d9d2      	bls.n	800787c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d109      	bne.n	80078f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <chk_lock+0x80>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d101      	bne.n	80078ec <chk_lock+0x84>
 80078e8:	2300      	movs	r3, #0
 80078ea:	e010      	b.n	800790e <chk_lock+0xa6>
 80078ec:	2312      	movs	r3, #18
 80078ee:	e00e      	b.n	800790e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d108      	bne.n	8007908 <chk_lock+0xa0>
 80078f6:	4a09      	ldr	r2, [pc, #36]	; (800791c <chk_lock+0xb4>)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	4413      	add	r3, r2
 80078fe:	330c      	adds	r3, #12
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d101      	bne.n	800790c <chk_lock+0xa4>
 8007908:	2310      	movs	r3, #16
 800790a:	e000      	b.n	800790e <chk_lock+0xa6>
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	200000d0 	.word	0x200000d0

08007920 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	e002      	b.n	8007932 <enq_lock+0x12>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3301      	adds	r3, #1
 8007930:	607b      	str	r3, [r7, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d806      	bhi.n	8007946 <enq_lock+0x26>
 8007938:	4a09      	ldr	r2, [pc, #36]	; (8007960 <enq_lock+0x40>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	4413      	add	r3, r2
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f2      	bne.n	800792c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b02      	cmp	r3, #2
 800794a:	bf14      	ite	ne
 800794c:	2301      	movne	r3, #1
 800794e:	2300      	moveq	r3, #0
 8007950:	b2db      	uxtb	r3, r3
}
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	200000d0 	.word	0x200000d0

08007964 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	e01f      	b.n	80079b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007974:	4a41      	ldr	r2, [pc, #260]	; (8007a7c <inc_lock+0x118>)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	4413      	add	r3, r2
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d113      	bne.n	80079ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007986:	4a3d      	ldr	r2, [pc, #244]	; (8007a7c <inc_lock+0x118>)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4413      	add	r3, r2
 800798e:	3304      	adds	r3, #4
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007996:	429a      	cmp	r2, r3
 8007998:	d109      	bne.n	80079ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800799a:	4a38      	ldr	r2, [pc, #224]	; (8007a7c <inc_lock+0x118>)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	4413      	add	r3, r2
 80079a2:	3308      	adds	r3, #8
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d006      	beq.n	80079bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3301      	adds	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d9dc      	bls.n	8007974 <inc_lock+0x10>
 80079ba:	e000      	b.n	80079be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d132      	bne.n	8007a2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	e002      	b.n	80079d0 <inc_lock+0x6c>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3301      	adds	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d806      	bhi.n	80079e4 <inc_lock+0x80>
 80079d6:	4a29      	ldr	r2, [pc, #164]	; (8007a7c <inc_lock+0x118>)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	4413      	add	r3, r2
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1f2      	bne.n	80079ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d101      	bne.n	80079ee <inc_lock+0x8a>
 80079ea:	2300      	movs	r3, #0
 80079ec:	e040      	b.n	8007a70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4922      	ldr	r1, [pc, #136]	; (8007a7c <inc_lock+0x118>)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	440b      	add	r3, r1
 80079fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	491e      	ldr	r1, [pc, #120]	; (8007a7c <inc_lock+0x118>)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	011b      	lsls	r3, r3, #4
 8007a06:	440b      	add	r3, r1
 8007a08:	3304      	adds	r3, #4
 8007a0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	491a      	ldr	r1, [pc, #104]	; (8007a7c <inc_lock+0x118>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	440b      	add	r3, r1
 8007a18:	3308      	adds	r3, #8
 8007a1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a1c:	4a17      	ldr	r2, [pc, #92]	; (8007a7c <inc_lock+0x118>)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	4413      	add	r3, r2
 8007a24:	330c      	adds	r3, #12
 8007a26:	2200      	movs	r2, #0
 8007a28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d009      	beq.n	8007a44 <inc_lock+0xe0>
 8007a30:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <inc_lock+0x118>)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	4413      	add	r3, r2
 8007a38:	330c      	adds	r3, #12
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <inc_lock+0xe0>
 8007a40:	2300      	movs	r3, #0
 8007a42:	e015      	b.n	8007a70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d108      	bne.n	8007a5c <inc_lock+0xf8>
 8007a4a:	4a0c      	ldr	r2, [pc, #48]	; (8007a7c <inc_lock+0x118>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	4413      	add	r3, r2
 8007a52:	330c      	adds	r3, #12
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	3301      	adds	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	e001      	b.n	8007a60 <inc_lock+0xfc>
 8007a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a60:	4906      	ldr	r1, [pc, #24]	; (8007a7c <inc_lock+0x118>)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	440b      	add	r3, r1
 8007a68:	330c      	adds	r3, #12
 8007a6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	200000d0 	.word	0x200000d0

08007a80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d825      	bhi.n	8007ae0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007a94:	4a17      	ldr	r2, [pc, #92]	; (8007af4 <dec_lock+0x74>)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	4413      	add	r3, r2
 8007a9c:	330c      	adds	r3, #12
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007aa2:	89fb      	ldrh	r3, [r7, #14]
 8007aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa8:	d101      	bne.n	8007aae <dec_lock+0x2e>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007aae:	89fb      	ldrh	r3, [r7, #14]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <dec_lock+0x3a>
 8007ab4:	89fb      	ldrh	r3, [r7, #14]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007aba:	4a0e      	ldr	r2, [pc, #56]	; (8007af4 <dec_lock+0x74>)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	4413      	add	r3, r2
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	89fa      	ldrh	r2, [r7, #14]
 8007ac6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <dec_lock+0x5a>
 8007ace:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <dec_lock+0x74>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	4413      	add	r3, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	737b      	strb	r3, [r7, #13]
 8007ade:	e001      	b.n	8007ae4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ae4:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	200000d0 	.word	0x200000d0

08007af8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e010      	b.n	8007b28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b06:	4a0d      	ldr	r2, [pc, #52]	; (8007b3c <clear_lock+0x44>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	4413      	add	r3, r2
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d105      	bne.n	8007b22 <clear_lock+0x2a>
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <clear_lock+0x44>)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	4413      	add	r3, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d9eb      	bls.n	8007b06 <clear_lock+0xe>
	}
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	200000d0 	.word	0x200000d0

08007b40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	78db      	ldrb	r3, [r3, #3]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d034      	beq.n	8007bbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7858      	ldrb	r0, [r3, #1]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b64:	2301      	movs	r3, #1
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	f7ff fd40 	bl	80075ec <disk_write>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]
 8007b76:	e022      	b.n	8007bbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	1ad2      	subs	r2, r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d217      	bcs.n	8007bbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	789b      	ldrb	r3, [r3, #2]
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	e010      	b.n	8007bb8 <sync_window+0x78>
					wsect += fs->fsize;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7858      	ldrb	r0, [r3, #1]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007baa:	2301      	movs	r3, #1
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	f7ff fd1d 	bl	80075ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	613b      	str	r3, [r7, #16]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d8eb      	bhi.n	8007b96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d01b      	beq.n	8007c18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff ffad 	bl	8007b40 <sync_window>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d113      	bne.n	8007c18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7858      	ldrb	r0, [r3, #1]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	f7ff fcd5 	bl	80075ac <disk_read>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c08:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ff87 	bl	8007b40 <sync_window>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d159      	bne.n	8007cf0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d149      	bne.n	8007cd8 <sync_fs+0xb4>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	791b      	ldrb	r3, [r3, #4]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d145      	bne.n	8007cd8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	899b      	ldrh	r3, [r3, #12]
 8007c56:	461a      	mov	r2, r3
 8007c58:	2100      	movs	r1, #0
 8007c5a:	f7ff fda8 	bl	80077ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3334      	adds	r3, #52	; 0x34
 8007c62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fd37 	bl	80076de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3334      	adds	r3, #52	; 0x34
 8007c74:	4921      	ldr	r1, [pc, #132]	; (8007cfc <sync_fs+0xd8>)
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fd4c 	bl	8007714 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3334      	adds	r3, #52	; 0x34
 8007c80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c84:	491e      	ldr	r1, [pc, #120]	; (8007d00 <sync_fs+0xdc>)
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff fd44 	bl	8007714 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3334      	adds	r3, #52	; 0x34
 8007c90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	f7ff fd3a 	bl	8007714 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3334      	adds	r3, #52	; 0x34
 8007ca4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f7ff fd30 	bl	8007714 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	7858      	ldrb	r0, [r3, #1]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f7ff fc8d 	bl	80075ec <disk_write>
			fs->fsi_flag = 0;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff fca3 	bl	800762c <disk_ioctl>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <sync_fs+0xcc>
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	41615252 	.word	0x41615252
 8007d00:	61417272 	.word	0x61417272

08007d04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	3b02      	subs	r3, #2
 8007d12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	3b02      	subs	r3, #2
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d301      	bcc.n	8007d24 <clust2sect+0x20>
 8007d20:	2300      	movs	r3, #0
 8007d22:	e008      	b.n	8007d36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	895b      	ldrh	r3, [r3, #10]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	fb03 f202 	mul.w	r2, r3, r2
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	4413      	add	r3, r2
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d904      	bls.n	8007d62 <get_fat+0x20>
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d302      	bcc.n	8007d68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d62:	2301      	movs	r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	e0bb      	b.n	8007ee0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	f000 8083 	beq.w	8007e7e <get_fat+0x13c>
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	f300 80a7 	bgt.w	8007ecc <get_fat+0x18a>
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d002      	beq.n	8007d88 <get_fat+0x46>
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d056      	beq.n	8007e34 <get_fat+0xf2>
 8007d86:	e0a1      	b.n	8007ecc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	899b      	ldrh	r3, [r3, #12]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da6:	4413      	add	r3, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f7ff ff0c 	bl	8007bc8 <move_window>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f040 808d 	bne.w	8007ed2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	60fa      	str	r2, [r7, #12]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	8992      	ldrh	r2, [r2, #12]
 8007dc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc6:	fb02 f201 	mul.w	r2, r2, r1
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	899b      	ldrh	r3, [r3, #12]
 8007dde:	4619      	mov	r1, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007de6:	4413      	add	r3, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	6938      	ldr	r0, [r7, #16]
 8007dec:	f7ff feec 	bl	8007bc8 <move_window>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d16f      	bne.n	8007ed6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	899b      	ldrh	r3, [r3, #12]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e02:	fb02 f201 	mul.w	r2, r2, r1
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	461a      	mov	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <get_fat+0xe8>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	091b      	lsrs	r3, r3, #4
 8007e28:	e002      	b.n	8007e30 <get_fat+0xee>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e30:	617b      	str	r3, [r7, #20]
			break;
 8007e32:	e055      	b.n	8007ee0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	899b      	ldrh	r3, [r3, #12]
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e48:	4413      	add	r3, r2
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6938      	ldr	r0, [r7, #16]
 8007e4e:	f7ff febb 	bl	8007bc8 <move_window>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d140      	bne.n	8007eda <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	8992      	ldrh	r2, [r2, #12]
 8007e66:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e6a:	fb02 f200 	mul.w	r2, r2, r0
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	440b      	add	r3, r1
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fbf8 	bl	8007668 <ld_word>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	617b      	str	r3, [r7, #20]
			break;
 8007e7c:	e030      	b.n	8007ee0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	899b      	ldrh	r3, [r3, #12]
 8007e86:	089b      	lsrs	r3, r3, #2
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e92:	4413      	add	r3, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	6938      	ldr	r0, [r7, #16]
 8007e98:	f7ff fe96 	bl	8007bc8 <move_window>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d11d      	bne.n	8007ede <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	8992      	ldrh	r2, [r2, #12]
 8007eb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eb4:	fb02 f200 	mul.w	r2, r2, r0
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	440b      	add	r3, r1
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff fbeb 	bl	8007698 <ld_dword>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ec8:	617b      	str	r3, [r7, #20]
			break;
 8007eca:	e009      	b.n	8007ee0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ecc:	2301      	movs	r3, #1
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e006      	b.n	8007ee0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ede:	bf00      	nop
		}
	}

	return val;
 8007ee0:	697b      	ldr	r3, [r7, #20]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007eea:	b590      	push	{r4, r7, lr}
 8007eec:	b089      	sub	sp, #36	; 0x24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	f240 8102 	bls.w	8008106 <put_fat+0x21c>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	f080 80fc 	bcs.w	8008106 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	f000 80b6 	beq.w	8008084 <put_fat+0x19a>
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	f300 80fd 	bgt.w	8008118 <put_fat+0x22e>
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d003      	beq.n	8007f2a <put_fat+0x40>
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	f000 8083 	beq.w	800802e <put_fat+0x144>
 8007f28:	e0f6      	b.n	8008118 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	085b      	lsrs	r3, r3, #1
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	4413      	add	r3, r2
 8007f36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	899b      	ldrh	r3, [r3, #12]
 8007f40:	4619      	mov	r1, r3
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f48:	4413      	add	r3, r2
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7ff fe3b 	bl	8007bc8 <move_window>
 8007f52:	4603      	mov	r3, r0
 8007f54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f56:	7ffb      	ldrb	r3, [r7, #31]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f040 80d6 	bne.w	800810a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	61ba      	str	r2, [r7, #24]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	8992      	ldrh	r2, [r2, #12]
 8007f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f72:	fb02 f200 	mul.w	r2, r2, r0
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	440b      	add	r3, r1
 8007f7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00d      	beq.n	8007fa2 <put_fat+0xb8>
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b25b      	sxtb	r3, r3
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	b25a      	sxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b25b      	sxtb	r3, r3
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	e001      	b.n	8007fa6 <put_fat+0xbc>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	899b      	ldrh	r3, [r3, #12]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fc0:	4413      	add	r3, r2
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff fdff 	bl	8007bc8 <move_window>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fce:	7ffb      	ldrb	r3, [r7, #31]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 809c 	bne.w	800810e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	899b      	ldrh	r3, [r3, #12]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fe8:	fb02 f200 	mul.w	r2, r2, r0
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	440b      	add	r3, r1
 8007ff0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <put_fat+0x11a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	b2db      	uxtb	r3, r3
 8008002:	e00e      	b.n	8008022 <put_fat+0x138>
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	b25b      	sxtb	r3, r3
 800800a:	f023 030f 	bic.w	r3, r3, #15
 800800e:	b25a      	sxtb	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	b25b      	sxtb	r3, r3
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	b25b      	sxtb	r3, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	b25b      	sxtb	r3, r3
 8008020:	b2db      	uxtb	r3, r3
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	70da      	strb	r2, [r3, #3]
			break;
 800802c:	e074      	b.n	8008118 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	899b      	ldrh	r3, [r3, #12]
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	4619      	mov	r1, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008042:	4413      	add	r3, r2
 8008044:	4619      	mov	r1, r3
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7ff fdbe 	bl	8007bc8 <move_window>
 800804c:	4603      	mov	r3, r0
 800804e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008050:	7ffb      	ldrb	r3, [r7, #31]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d15d      	bne.n	8008112 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	8992      	ldrh	r2, [r2, #12]
 8008064:	fbb3 f0f2 	udiv	r0, r3, r2
 8008068:	fb02 f200 	mul.w	r2, r2, r0
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	440b      	add	r3, r1
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	b292      	uxth	r2, r2
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fb31 	bl	80076de <st_word>
			fs->wflag = 1;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	70da      	strb	r2, [r3, #3]
			break;
 8008082:	e049      	b.n	8008118 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	899b      	ldrh	r3, [r3, #12]
 800808c:	089b      	lsrs	r3, r3, #2
 800808e:	b29b      	uxth	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	fbb3 f3f1 	udiv	r3, r3, r1
 8008098:	4413      	add	r3, r2
 800809a:	4619      	mov	r1, r3
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fd93 	bl	8007bc8 <move_window>
 80080a2:	4603      	mov	r3, r0
 80080a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080a6:	7ffb      	ldrb	r3, [r7, #31]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d134      	bne.n	8008116 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	8992      	ldrh	r2, [r2, #12]
 80080c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80080c4:	fb02 f200 	mul.w	r2, r2, r0
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	440b      	add	r3, r1
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fae3 	bl	8007698 <ld_dword>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080d8:	4323      	orrs	r3, r4
 80080da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	8992      	ldrh	r2, [r2, #12]
 80080ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80080ee:	fb02 f200 	mul.w	r2, r2, r0
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	440b      	add	r3, r1
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff fb0b 	bl	8007714 <st_dword>
			fs->wflag = 1;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	70da      	strb	r2, [r3, #3]
			break;
 8008104:	e008      	b.n	8008118 <put_fat+0x22e>
		}
	}
 8008106:	bf00      	nop
 8008108:	e006      	b.n	8008118 <put_fat+0x22e>
			if (res != FR_OK) break;
 800810a:	bf00      	nop
 800810c:	e004      	b.n	8008118 <put_fat+0x22e>
			if (res != FR_OK) break;
 800810e:	bf00      	nop
 8008110:	e002      	b.n	8008118 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008112:	bf00      	nop
 8008114:	e000      	b.n	8008118 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008116:	bf00      	nop
	return res;
 8008118:	7ffb      	ldrb	r3, [r7, #31]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3724      	adds	r7, #36	; 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd90      	pop	{r4, r7, pc}

08008122 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b088      	sub	sp, #32
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d904      	bls.n	8008148 <remove_chain+0x26>
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	429a      	cmp	r2, r3
 8008146:	d301      	bcc.n	800814c <remove_chain+0x2a>
 8008148:	2302      	movs	r3, #2
 800814a:	e04b      	b.n	80081e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	69b8      	ldr	r0, [r7, #24]
 800815a:	f7ff fec6 	bl	8007eea <put_fat>
 800815e:	4603      	mov	r3, r0
 8008160:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008162:	7ffb      	ldrb	r3, [r7, #31]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <remove_chain+0x4a>
 8008168:	7ffb      	ldrb	r3, [r7, #31]
 800816a:	e03b      	b.n	80081e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff fde7 	bl	8007d42 <get_fat>
 8008174:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d031      	beq.n	80081e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <remove_chain+0x64>
 8008182:	2302      	movs	r3, #2
 8008184:	e02e      	b.n	80081e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d101      	bne.n	8008192 <remove_chain+0x70>
 800818e:	2301      	movs	r3, #1
 8008190:	e028      	b.n	80081e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008192:	2200      	movs	r2, #0
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	69b8      	ldr	r0, [r7, #24]
 8008198:	f7ff fea7 	bl	8007eea <put_fat>
 800819c:	4603      	mov	r3, r0
 800819e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80081a0:	7ffb      	ldrb	r3, [r7, #31]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <remove_chain+0x88>
 80081a6:	7ffb      	ldrb	r3, [r7, #31]
 80081a8:	e01c      	b.n	80081e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	3b02      	subs	r3, #2
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d20b      	bcs.n	80081d0 <remove_chain+0xae>
			fs->free_clst++;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3c6      	bcc.n	800816c <remove_chain+0x4a>
 80081de:	e000      	b.n	80081e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10d      	bne.n	800821e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <create_chain+0x2c>
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	429a      	cmp	r2, r3
 8008216:	d31b      	bcc.n	8008250 <create_chain+0x64>
 8008218:	2301      	movs	r3, #1
 800821a:	61bb      	str	r3, [r7, #24]
 800821c:	e018      	b.n	8008250 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fd8e 	bl	8007d42 <get_fat>
 8008226:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d801      	bhi.n	8008232 <create_chain+0x46>
 800822e:	2301      	movs	r3, #1
 8008230:	e070      	b.n	8008314 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d101      	bne.n	800823e <create_chain+0x52>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	e06a      	b.n	8008314 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d201      	bcs.n	800824c <create_chain+0x60>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	e063      	b.n	8008314 <create_chain+0x128>
		scl = clst;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	3301      	adds	r3, #1
 8008258:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	429a      	cmp	r2, r3
 8008262:	d307      	bcc.n	8008274 <create_chain+0x88>
				ncl = 2;
 8008264:	2302      	movs	r3, #2
 8008266:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	429a      	cmp	r2, r3
 800826e:	d901      	bls.n	8008274 <create_chain+0x88>
 8008270:	2300      	movs	r3, #0
 8008272:	e04f      	b.n	8008314 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008274:	69f9      	ldr	r1, [r7, #28]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fd63 	bl	8007d42 <get_fat>
 800827c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00e      	beq.n	80082a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d003      	beq.n	8008292 <create_chain+0xa6>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d101      	bne.n	8008296 <create_chain+0xaa>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	e03e      	b.n	8008314 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	429a      	cmp	r2, r3
 800829c:	d1da      	bne.n	8008254 <create_chain+0x68>
 800829e:	2300      	movs	r3, #0
 80082a0:	e038      	b.n	8008314 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80082a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	69f9      	ldr	r1, [r7, #28]
 80082aa:	6938      	ldr	r0, [r7, #16]
 80082ac:	f7ff fe1d 	bl	8007eea <put_fat>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <create_chain+0xe2>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d006      	beq.n	80082ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6938      	ldr	r0, [r7, #16]
 80082c6:	f7ff fe10 	bl	8007eea <put_fat>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d116      	bne.n	8008302 <create_chain+0x116>
		fs->last_clst = ncl;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	3b02      	subs	r3, #2
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d804      	bhi.n	80082f2 <create_chain+0x106>
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	1e5a      	subs	r2, r3, #1
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	791b      	ldrb	r3, [r3, #4]
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	711a      	strb	r2, [r3, #4]
 8008300:	e007      	b.n	8008312 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d102      	bne.n	800830e <create_chain+0x122>
 8008308:	f04f 33ff 	mov.w	r3, #4294967295
 800830c:	e000      	b.n	8008310 <create_chain+0x124>
 800830e:	2301      	movs	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008312:	69fb      	ldr	r3, [r7, #28]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3720      	adds	r7, #32
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	3304      	adds	r3, #4
 8008332:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	899b      	ldrh	r3, [r3, #12]
 8008338:	461a      	mov	r2, r3
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	8952      	ldrh	r2, [r2, #10]
 8008344:	fbb3 f3f2 	udiv	r3, r3, r2
 8008348:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1d1a      	adds	r2, r3, #4
 800834e:	613a      	str	r2, [r7, #16]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <clmt_clust+0x42>
 800835a:	2300      	movs	r3, #0
 800835c:	e010      	b.n	8008380 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	429a      	cmp	r2, r3
 8008364:	d307      	bcc.n	8008376 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3304      	adds	r3, #4
 8008372:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008374:	e7e9      	b.n	800834a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008376:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	4413      	add	r3, r2
}
 8008380:	4618      	mov	r0, r3
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083a2:	d204      	bcs.n	80083ae <dir_sdi+0x22>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80083ae:	2302      	movs	r3, #2
 80083b0:	e071      	b.n	8008496 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d106      	bne.n	80083d2 <dir_sdi+0x46>
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d902      	bls.n	80083d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10c      	bne.n	80083f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	8912      	ldrh	r2, [r2, #8]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d301      	bcc.n	80083e8 <dir_sdi+0x5c>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e056      	b.n	8008496 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	61da      	str	r2, [r3, #28]
 80083f0:	e02d      	b.n	800844e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	895b      	ldrh	r3, [r3, #10]
 80083f6:	461a      	mov	r2, r3
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	899b      	ldrh	r3, [r3, #12]
 80083fc:	fb03 f302 	mul.w	r3, r3, r2
 8008400:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008402:	e019      	b.n	8008438 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6979      	ldr	r1, [r7, #20]
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff fc9a 	bl	8007d42 <get_fat>
 800840e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d101      	bne.n	800841c <dir_sdi+0x90>
 8008418:	2301      	movs	r3, #1
 800841a:	e03c      	b.n	8008496 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d904      	bls.n	800842c <dir_sdi+0xa0>
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	429a      	cmp	r2, r3
 800842a:	d301      	bcc.n	8008430 <dir_sdi+0xa4>
 800842c:	2302      	movs	r3, #2
 800842e:	e032      	b.n	8008496 <dir_sdi+0x10a>
			ofs -= csz;
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	429a      	cmp	r2, r3
 800843e:	d2e1      	bcs.n	8008404 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008440:	6979      	ldr	r1, [r7, #20]
 8008442:	6938      	ldr	r0, [r7, #16]
 8008444:	f7ff fc5e 	bl	8007d04 <clust2sect>
 8008448:	4602      	mov	r2, r0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <dir_sdi+0xd4>
 800845c:	2302      	movs	r3, #2
 800845e:	e01a      	b.n	8008496 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	69da      	ldr	r2, [r3, #28]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	899b      	ldrh	r3, [r3, #12]
 8008468:	4619      	mov	r1, r3
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008470:	441a      	add	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	899b      	ldrh	r3, [r3, #12]
 8008480:	461a      	mov	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	fbb3 f0f2 	udiv	r0, r3, r2
 8008488:	fb02 f200 	mul.w	r2, r2, r0
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	18ca      	adds	r2, r1, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	3320      	adds	r3, #32
 80084b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <dir_next+0x28>
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084c4:	d301      	bcc.n	80084ca <dir_next+0x2c>
 80084c6:	2304      	movs	r3, #4
 80084c8:	e0bb      	b.n	8008642 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	899b      	ldrh	r3, [r3, #12]
 80084ce:	461a      	mov	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80084d6:	fb02 f201 	mul.w	r2, r2, r1
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 809d 	bne.w	800861c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	8912      	ldrh	r2, [r2, #8]
 80084fc:	4293      	cmp	r3, r2
 80084fe:	f0c0 808d 	bcc.w	800861c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	61da      	str	r2, [r3, #28]
 8008508:	2304      	movs	r3, #4
 800850a:	e09a      	b.n	8008642 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	899b      	ldrh	r3, [r3, #12]
 8008510:	461a      	mov	r2, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	fbb3 f3f2 	udiv	r3, r3, r2
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	8952      	ldrh	r2, [r2, #10]
 800851c:	3a01      	subs	r2, #1
 800851e:	4013      	ands	r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d17b      	bne.n	800861c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7ff fc08 	bl	8007d42 <get_fat>
 8008532:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d801      	bhi.n	800853e <dir_next+0xa0>
 800853a:	2302      	movs	r3, #2
 800853c:	e081      	b.n	8008642 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d101      	bne.n	800854a <dir_next+0xac>
 8008546:	2301      	movs	r3, #1
 8008548:	e07b      	b.n	8008642 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	429a      	cmp	r2, r3
 8008552:	d359      	bcc.n	8008608 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	61da      	str	r2, [r3, #28]
 8008560:	2304      	movs	r3, #4
 8008562:	e06e      	b.n	8008642 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f7ff fe3d 	bl	80081ec <create_chain>
 8008572:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <dir_next+0xe0>
 800857a:	2307      	movs	r3, #7
 800857c:	e061      	b.n	8008642 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <dir_next+0xea>
 8008584:	2302      	movs	r3, #2
 8008586:	e05c      	b.n	8008642 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d101      	bne.n	8008594 <dir_next+0xf6>
 8008590:	2301      	movs	r3, #1
 8008592:	e056      	b.n	8008642 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff fad3 	bl	8007b40 <sync_window>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <dir_next+0x106>
 80085a0:	2301      	movs	r3, #1
 80085a2:	e04e      	b.n	8008642 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	899b      	ldrh	r3, [r3, #12]
 80085ae:	461a      	mov	r2, r3
 80085b0:	2100      	movs	r1, #0
 80085b2:	f7ff f8fc 	bl	80077ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	6979      	ldr	r1, [r7, #20]
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff fba1 	bl	8007d04 <clust2sect>
 80085c2:	4602      	mov	r2, r0
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	631a      	str	r2, [r3, #48]	; 0x30
 80085c8:	e012      	b.n	80085f0 <dir_next+0x152>
						fs->wflag = 1;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fab5 	bl	8007b40 <sync_window>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <dir_next+0x142>
 80085dc:	2301      	movs	r3, #1
 80085de:	e030      	b.n	8008642 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	3301      	adds	r3, #1
 80085e4:	613b      	str	r3, [r7, #16]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	631a      	str	r2, [r3, #48]	; 0x30
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	895b      	ldrh	r3, [r3, #10]
 80085f4:	461a      	mov	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d3e6      	bcc.n	80085ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	1ad2      	subs	r2, r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800860e:	6979      	ldr	r1, [r7, #20]
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7ff fb77 	bl	8007d04 <clust2sect>
 8008616:	4602      	mov	r2, r0
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	899b      	ldrh	r3, [r3, #12]
 800862c:	461a      	mov	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	fbb3 f0f2 	udiv	r0, r3, r2
 8008634:	fb02 f200 	mul.w	r2, r2, r0
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	18ca      	adds	r2, r1, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7ff fe95 	bl	800838c <dir_sdi>
 8008662:	4603      	mov	r3, r0
 8008664:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d12b      	bne.n	80086c4 <dir_alloc+0x7a>
		n = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	4619      	mov	r1, r3
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff faa6 	bl	8007bc8 <move_window>
 800867c:	4603      	mov	r3, r0
 800867e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d11d      	bne.n	80086c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2be5      	cmp	r3, #229	; 0xe5
 800868e:	d004      	beq.n	800869a <dir_alloc+0x50>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d107      	bne.n	80086aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3301      	adds	r3, #1
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d102      	bne.n	80086ae <dir_alloc+0x64>
 80086a8:	e00c      	b.n	80086c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80086aa:	2300      	movs	r3, #0
 80086ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80086ae:	2101      	movs	r1, #1
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fef4 	bl	800849e <dir_next>
 80086b6:	4603      	mov	r3, r0
 80086b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0d7      	beq.n	8008670 <dir_alloc+0x26>
 80086c0:	e000      	b.n	80086c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d101      	bne.n	80086ce <dir_alloc+0x84>
 80086ca:	2307      	movs	r3, #7
 80086cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	331a      	adds	r3, #26
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe ffbe 	bl	8007668 <ld_word>
 80086ec:	4603      	mov	r3, r0
 80086ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d109      	bne.n	800870c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	3314      	adds	r3, #20
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe ffb3 	bl	8007668 <ld_word>
 8008702:	4603      	mov	r3, r0
 8008704:	041b      	lsls	r3, r3, #16
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800870c:	68fb      	ldr	r3, [r7, #12]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	331a      	adds	r3, #26
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	b292      	uxth	r2, r2
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe ffd6 	bl	80076de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b03      	cmp	r3, #3
 8008738:	d109      	bne.n	800874e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f103 0214 	add.w	r2, r3, #20
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	0c1b      	lsrs	r3, r3, #16
 8008744:	b29b      	uxth	r3, r3
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fe ffc8 	bl	80076de <st_word>
	}
}
 800874e:	bf00      	nop
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008764:	2100      	movs	r1, #0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fe10 	bl	800838c <dir_sdi>
 800876c:	4603      	mov	r3, r0
 800876e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <dir_find+0x24>
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	e03e      	b.n	80087f8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4619      	mov	r1, r3
 8008780:	6938      	ldr	r0, [r7, #16]
 8008782:	f7ff fa21 	bl	8007bc8 <move_window>
 8008786:	4603      	mov	r3, r0
 8008788:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d12f      	bne.n	80087f0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <dir_find+0x4e>
 800879e:	2304      	movs	r3, #4
 80087a0:	75fb      	strb	r3, [r7, #23]
 80087a2:	e028      	b.n	80087f6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	330b      	adds	r3, #11
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	330b      	adds	r3, #11
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10a      	bne.n	80087dc <dir_find+0x86>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a18      	ldr	r0, [r3, #32]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	220b      	movs	r2, #11
 80087d0:	4619      	mov	r1, r3
 80087d2:	f7ff f807 	bl	80077e4 <mem_cmp>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00b      	beq.n	80087f4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff fe5d 	bl	800849e <dir_next>
 80087e4:	4603      	mov	r3, r0
 80087e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0c5      	beq.n	800877a <dir_find+0x24>
 80087ee:	e002      	b.n	80087f6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80087f0:	bf00      	nop
 80087f2:	e000      	b.n	80087f6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80087f4:	bf00      	nop

	return res;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800880e:	2101      	movs	r1, #1
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff1a 	bl	800864a <dir_alloc>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d11c      	bne.n	800885a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	4619      	mov	r1, r3
 8008826:	68b8      	ldr	r0, [r7, #8]
 8008828:	f7ff f9ce 	bl	8007bc8 <move_window>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d111      	bne.n	800885a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	2220      	movs	r2, #32
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe ffb5 	bl	80077ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a18      	ldr	r0, [r3, #32]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3324      	adds	r3, #36	; 0x24
 800884c:	220b      	movs	r2, #11
 800884e:	4619      	mov	r1, r3
 8008850:	f7fe ff8c 	bl	800776c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2201      	movs	r2, #1
 8008858:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3324      	adds	r3, #36	; 0x24
 8008878:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800887a:	220b      	movs	r2, #11
 800887c:	2120      	movs	r1, #32
 800887e:	68b8      	ldr	r0, [r7, #8]
 8008880:	f7fe ff95 	bl	80077ae <mem_set>
	si = i = 0; ni = 8;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	2308      	movs	r3, #8
 800888e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	61fa      	str	r2, [r7, #28]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800889e:	7efb      	ldrb	r3, [r7, #27]
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d94e      	bls.n	8008942 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80088a4:	7efb      	ldrb	r3, [r7, #27]
 80088a6:	2b2f      	cmp	r3, #47	; 0x2f
 80088a8:	d006      	beq.n	80088b8 <create_name+0x54>
 80088aa:	7efb      	ldrb	r3, [r7, #27]
 80088ac:	2b5c      	cmp	r3, #92	; 0x5c
 80088ae:	d110      	bne.n	80088d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80088b0:	e002      	b.n	80088b8 <create_name+0x54>
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	3301      	adds	r3, #1
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b2f      	cmp	r3, #47	; 0x2f
 80088c2:	d0f6      	beq.n	80088b2 <create_name+0x4e>
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b5c      	cmp	r3, #92	; 0x5c
 80088ce:	d0f0      	beq.n	80088b2 <create_name+0x4e>
			break;
 80088d0:	e038      	b.n	8008944 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80088d2:	7efb      	ldrb	r3, [r7, #27]
 80088d4:	2b2e      	cmp	r3, #46	; 0x2e
 80088d6:	d003      	beq.n	80088e0 <create_name+0x7c>
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d30c      	bcc.n	80088fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b0b      	cmp	r3, #11
 80088e4:	d002      	beq.n	80088ec <create_name+0x88>
 80088e6:	7efb      	ldrb	r3, [r7, #27]
 80088e8:	2b2e      	cmp	r3, #46	; 0x2e
 80088ea:	d001      	beq.n	80088f0 <create_name+0x8c>
 80088ec:	2306      	movs	r3, #6
 80088ee:	e044      	b.n	800897a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80088f0:	2308      	movs	r3, #8
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	230b      	movs	r3, #11
 80088f6:	617b      	str	r3, [r7, #20]
			continue;
 80088f8:	e022      	b.n	8008940 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80088fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da04      	bge.n	800890c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008902:	7efb      	ldrb	r3, [r7, #27]
 8008904:	3b80      	subs	r3, #128	; 0x80
 8008906:	4a1f      	ldr	r2, [pc, #124]	; (8008984 <create_name+0x120>)
 8008908:	5cd3      	ldrb	r3, [r2, r3]
 800890a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800890c:	7efb      	ldrb	r3, [r7, #27]
 800890e:	4619      	mov	r1, r3
 8008910:	481d      	ldr	r0, [pc, #116]	; (8008988 <create_name+0x124>)
 8008912:	f7fe ff8e 	bl	8007832 <chk_chr>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <create_name+0xbc>
 800891c:	2306      	movs	r3, #6
 800891e:	e02c      	b.n	800897a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008920:	7efb      	ldrb	r3, [r7, #27]
 8008922:	2b60      	cmp	r3, #96	; 0x60
 8008924:	d905      	bls.n	8008932 <create_name+0xce>
 8008926:	7efb      	ldrb	r3, [r7, #27]
 8008928:	2b7a      	cmp	r3, #122	; 0x7a
 800892a:	d802      	bhi.n	8008932 <create_name+0xce>
 800892c:	7efb      	ldrb	r3, [r7, #27]
 800892e:	3b20      	subs	r3, #32
 8008930:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	613a      	str	r2, [r7, #16]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	4413      	add	r3, r2
 800893c:	7efa      	ldrb	r2, [r7, #27]
 800893e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008940:	e7a6      	b.n	8008890 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008942:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	441a      	add	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <create_name+0xf4>
 8008954:	2306      	movs	r3, #6
 8008956:	e010      	b.n	800897a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2be5      	cmp	r3, #229	; 0xe5
 800895e:	d102      	bne.n	8008966 <create_name+0x102>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2205      	movs	r2, #5
 8008964:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008966:	7efb      	ldrb	r3, [r7, #27]
 8008968:	2b20      	cmp	r3, #32
 800896a:	d801      	bhi.n	8008970 <create_name+0x10c>
 800896c:	2204      	movs	r2, #4
 800896e:	e000      	b.n	8008972 <create_name+0x10e>
 8008970:	2200      	movs	r2, #0
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	330b      	adds	r3, #11
 8008976:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008978:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800897a:	4618      	mov	r0, r3
 800897c:	3720      	adds	r7, #32
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	0800b390 	.word	0x0800b390
 8008988:	0800b328 	.word	0x0800b328

0800898c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80089a0:	e002      	b.n	80089a8 <follow_path+0x1c>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	3301      	adds	r3, #1
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b2f      	cmp	r3, #47	; 0x2f
 80089ae:	d0f8      	beq.n	80089a2 <follow_path+0x16>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b5c      	cmp	r3, #92	; 0x5c
 80089b6:	d0f4      	beq.n	80089a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2200      	movs	r2, #0
 80089bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b1f      	cmp	r3, #31
 80089c4:	d80a      	bhi.n	80089dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2280      	movs	r2, #128	; 0x80
 80089ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80089ce:	2100      	movs	r1, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fcdb 	bl	800838c <dir_sdi>
 80089d6:	4603      	mov	r3, r0
 80089d8:	75fb      	strb	r3, [r7, #23]
 80089da:	e048      	b.n	8008a6e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80089dc:	463b      	mov	r3, r7
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff ff3f 	bl	8008864 <create_name>
 80089e6:	4603      	mov	r3, r0
 80089e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d139      	bne.n	8008a64 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff feb0 	bl	8008756 <dir_find>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00a      	beq.n	8008a1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	d12c      	bne.n	8008a68 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d127      	bne.n	8008a68 <follow_path+0xdc>
 8008a18:	2305      	movs	r3, #5
 8008a1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008a1c:	e024      	b.n	8008a68 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d121      	bne.n	8008a6c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	799b      	ldrb	r3, [r3, #6]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008a34:	2305      	movs	r3, #5
 8008a36:	75fb      	strb	r3, [r7, #23]
 8008a38:	e019      	b.n	8008a6e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	8992      	ldrh	r2, [r2, #12]
 8008a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a4c:	fb02 f200 	mul.w	r2, r2, r0
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	440b      	add	r3, r1
 8008a54:	4619      	mov	r1, r3
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff fe3e 	bl	80086d8 <ld_clust>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a62:	e7bb      	b.n	80089dc <follow_path+0x50>
			if (res != FR_OK) break;
 8008a64:	bf00      	nop
 8008a66:	e002      	b.n	8008a6e <follow_path+0xe2>
				break;
 8008a68:	bf00      	nop
 8008a6a:	e000      	b.n	8008a6e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a6c:	bf00      	nop
			}
		}
	}

	return res;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008a80:	f04f 33ff 	mov.w	r3, #4294967295
 8008a84:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d031      	beq.n	8008af2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e002      	b.n	8008a9c <get_ldnumber+0x24>
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	d903      	bls.n	8008aac <get_ldnumber+0x34>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b3a      	cmp	r3, #58	; 0x3a
 8008aaa:	d1f4      	bne.n	8008a96 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b3a      	cmp	r3, #58	; 0x3a
 8008ab2:	d11c      	bne.n	8008aee <get_ldnumber+0x76>
			tp = *path;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	60fa      	str	r2, [r7, #12]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	3b30      	subs	r3, #48	; 0x30
 8008ac4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b09      	cmp	r3, #9
 8008aca:	d80e      	bhi.n	8008aea <get_ldnumber+0x72>
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d10a      	bne.n	8008aea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d807      	bhi.n	8008aea <get_ldnumber+0x72>
					vol = (int)i;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	e002      	b.n	8008af4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008aee:	2300      	movs	r3, #0
 8008af0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008af2:	693b      	ldr	r3, [r7, #16]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	70da      	strb	r2, [r3, #3]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295
 8008b16:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff f854 	bl	8007bc8 <move_window>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <check_fs+0x2a>
 8008b26:	2304      	movs	r3, #4
 8008b28:	e038      	b.n	8008b9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3334      	adds	r3, #52	; 0x34
 8008b2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fd98 	bl	8007668 <ld_word>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d001      	beq.n	8008b48 <check_fs+0x48>
 8008b44:	2303      	movs	r3, #3
 8008b46:	e029      	b.n	8008b9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b4e:	2be9      	cmp	r3, #233	; 0xe9
 8008b50:	d009      	beq.n	8008b66 <check_fs+0x66>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b58:	2beb      	cmp	r3, #235	; 0xeb
 8008b5a:	d11e      	bne.n	8008b9a <check_fs+0x9a>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008b62:	2b90      	cmp	r3, #144	; 0x90
 8008b64:	d119      	bne.n	8008b9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3334      	adds	r3, #52	; 0x34
 8008b6a:	3336      	adds	r3, #54	; 0x36
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fd93 	bl	8007698 <ld_dword>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b78:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <check_fs+0xa4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d101      	bne.n	8008b82 <check_fs+0x82>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e00c      	b.n	8008b9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3334      	adds	r3, #52	; 0x34
 8008b86:	3352      	adds	r3, #82	; 0x52
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe fd85 	bl	8007698 <ld_dword>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	4a05      	ldr	r2, [pc, #20]	; (8008ba8 <check_fs+0xa8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d101      	bne.n	8008b9a <check_fs+0x9a>
 8008b96:	2300      	movs	r3, #0
 8008b98:	e000      	b.n	8008b9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008b9a:	2302      	movs	r3, #2
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	00544146 	.word	0x00544146
 8008ba8:	33544146 	.word	0x33544146

08008bac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b096      	sub	sp, #88	; 0x58
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7ff ff59 	bl	8008a78 <get_ldnumber>
 8008bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da01      	bge.n	8008bd2 <find_volume+0x26>
 8008bce:	230b      	movs	r3, #11
 8008bd0:	e265      	b.n	800909e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008bd2:	4ab0      	ldr	r2, [pc, #704]	; (8008e94 <find_volume+0x2e8>)
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <find_volume+0x3a>
 8008be2:	230c      	movs	r3, #12
 8008be4:	e25b      	b.n	800909e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	f023 0301 	bic.w	r3, r3, #1
 8008bf2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01a      	beq.n	8008c32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe fc93 	bl	800752c <disk_status>
 8008c06:	4603      	mov	r3, r0
 8008c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10c      	bne.n	8008c32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <find_volume+0x82>
 8008c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	e237      	b.n	800909e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e235      	b.n	800909e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe fc8b 	bl	8007560 <disk_initialize>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008c50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e21e      	b.n	800909e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d007      	beq.n	8008c76 <find_volume+0xca>
 8008c66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008c72:	230a      	movs	r3, #10
 8008c74:	e213      	b.n	800909e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c78:	7858      	ldrb	r0, [r3, #1]
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2102      	movs	r1, #2
 8008c82:	f7fe fcd3 	bl	800762c <disk_ioctl>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <find_volume+0xe4>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e206      	b.n	800909e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	899b      	ldrh	r3, [r3, #12]
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c98:	d80d      	bhi.n	8008cb6 <find_volume+0x10a>
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	899b      	ldrh	r3, [r3, #12]
 8008c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca2:	d308      	bcc.n	8008cb6 <find_volume+0x10a>
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca6:	899b      	ldrh	r3, [r3, #12]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	899b      	ldrh	r3, [r3, #12]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <find_volume+0x10e>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e1f1      	b.n	800909e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008cbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008cc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cc2:	f7ff ff1d 	bl	8008b00 <check_fs>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d14b      	bne.n	8008d6c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8008cd8:	e01f      	b.n	8008d1a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008ce8:	4413      	add	r3, r2
 8008cea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	3304      	adds	r3, #4
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d006      	beq.n	8008d04 <find_volume+0x158>
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe fccc 	bl	8007698 <ld_dword>
 8008d00:	4602      	mov	r2, r0
 8008d02:	e000      	b.n	8008d06 <find_volume+0x15a>
 8008d04:	2200      	movs	r2, #0
 8008d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008d0e:	440b      	add	r3, r1
 8008d10:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d16:	3301      	adds	r3, #1
 8008d18:	643b      	str	r3, [r7, #64]	; 0x40
 8008d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d9dc      	bls.n	8008cda <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008d20:	2300      	movs	r3, #0
 8008d22:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <find_volume+0x184>
 8008d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008d38:	4413      	add	r3, r2
 8008d3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <find_volume+0x1a6>
 8008d46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d4a:	f7ff fed9 	bl	8008b00 <check_fs>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	e000      	b.n	8008d54 <find_volume+0x1a8>
 8008d52:	2303      	movs	r3, #3
 8008d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d905      	bls.n	8008d6c <find_volume+0x1c0>
 8008d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d62:	3301      	adds	r3, #1
 8008d64:	643b      	str	r3, [r7, #64]	; 0x40
 8008d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d9e1      	bls.n	8008d30 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d101      	bne.n	8008d78 <find_volume+0x1cc>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e192      	b.n	800909e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d901      	bls.n	8008d84 <find_volume+0x1d8>
 8008d80:	230d      	movs	r3, #13
 8008d82:	e18c      	b.n	800909e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	3334      	adds	r3, #52	; 0x34
 8008d88:	330b      	adds	r3, #11
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fc6c 	bl	8007668 <ld_word>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	899b      	ldrh	r3, [r3, #12]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d001      	beq.n	8008da0 <find_volume+0x1f4>
 8008d9c:	230d      	movs	r3, #13
 8008d9e:	e17e      	b.n	800909e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	3334      	adds	r3, #52	; 0x34
 8008da4:	3316      	adds	r3, #22
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fc5e 	bl	8007668 <ld_word>
 8008dac:	4603      	mov	r3, r0
 8008dae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <find_volume+0x218>
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	3334      	adds	r3, #52	; 0x34
 8008dba:	3324      	adds	r3, #36	; 0x24
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fc6b 	bl	8007698 <ld_dword>
 8008dc2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dc8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	789b      	ldrb	r3, [r3, #2]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d005      	beq.n	8008de8 <find_volume+0x23c>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	789b      	ldrb	r3, [r3, #2]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d001      	beq.n	8008de8 <find_volume+0x23c>
 8008de4:	230d      	movs	r3, #13
 8008de6:	e15a      	b.n	800909e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	789b      	ldrb	r3, [r3, #2]
 8008dec:	461a      	mov	r2, r3
 8008dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	895b      	ldrh	r3, [r3, #10]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d008      	beq.n	8008e1c <find_volume+0x270>
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0c:	895b      	ldrh	r3, [r3, #10]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	895b      	ldrh	r3, [r3, #10]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	4013      	ands	r3, r2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <find_volume+0x274>
 8008e1c:	230d      	movs	r3, #13
 8008e1e:	e13e      	b.n	800909e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e22:	3334      	adds	r3, #52	; 0x34
 8008e24:	3311      	adds	r3, #17
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fc1e 	bl	8007668 <ld_word>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	891b      	ldrh	r3, [r3, #8]
 8008e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e3a:	8992      	ldrh	r2, [r2, #12]
 8008e3c:	0952      	lsrs	r2, r2, #5
 8008e3e:	b292      	uxth	r2, r2
 8008e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e44:	fb02 f201 	mul.w	r2, r2, r1
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <find_volume+0x2a8>
 8008e50:	230d      	movs	r3, #13
 8008e52:	e124      	b.n	800909e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	3334      	adds	r3, #52	; 0x34
 8008e58:	3313      	adds	r3, #19
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fc04 	bl	8007668 <ld_word>
 8008e60:	4603      	mov	r3, r0
 8008e62:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <find_volume+0x2cc>
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	3334      	adds	r3, #52	; 0x34
 8008e6e:	3320      	adds	r3, #32
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe fc11 	bl	8007698 <ld_dword>
 8008e76:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	3334      	adds	r3, #52	; 0x34
 8008e7c:	330e      	adds	r3, #14
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fbf2 	bl	8007668 <ld_word>
 8008e84:	4603      	mov	r3, r0
 8008e86:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008e88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d104      	bne.n	8008e98 <find_volume+0x2ec>
 8008e8e:	230d      	movs	r3, #13
 8008e90:	e105      	b.n	800909e <find_volume+0x4f2>
 8008e92:	bf00      	nop
 8008e94:	200000c4 	.word	0x200000c4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008e98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9c:	4413      	add	r3, r2
 8008e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ea0:	8911      	ldrh	r1, [r2, #8]
 8008ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ea4:	8992      	ldrh	r2, [r2, #12]
 8008ea6:	0952      	lsrs	r2, r2, #5
 8008ea8:	b292      	uxth	r2, r2
 8008eaa:	fbb1 f2f2 	udiv	r2, r1, r2
 8008eae:	b292      	uxth	r2, r2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d201      	bcs.n	8008ec0 <find_volume+0x314>
 8008ebc:	230d      	movs	r3, #13
 8008ebe:	e0ee      	b.n	800909e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ec8:	8952      	ldrh	r2, [r2, #10]
 8008eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <find_volume+0x32e>
 8008ed6:	230d      	movs	r3, #13
 8008ed8:	e0e1      	b.n	800909e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008eda:	2303      	movs	r3, #3
 8008edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d802      	bhi.n	8008ef0 <find_volume+0x344>
 8008eea:	2302      	movs	r3, #2
 8008eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d802      	bhi.n	8008f00 <find_volume+0x354>
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	1c9a      	adds	r2, r3, #2
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f0c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008f0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f12:	441a      	add	r2, r3
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008f18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	441a      	add	r2, r3
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d11e      	bne.n	8008f68 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	3334      	adds	r3, #52	; 0x34
 8008f2e:	332a      	adds	r3, #42	; 0x2a
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fb99 	bl	8007668 <ld_word>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <find_volume+0x394>
 8008f3c:	230d      	movs	r3, #13
 8008f3e:	e0ae      	b.n	800909e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	891b      	ldrh	r3, [r3, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <find_volume+0x3a0>
 8008f48:	230d      	movs	r3, #13
 8008f4a:	e0a8      	b.n	800909e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	3334      	adds	r3, #52	; 0x34
 8008f50:	332c      	adds	r3, #44	; 0x2c
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fba0 	bl	8007698 <ld_dword>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	647b      	str	r3, [r7, #68]	; 0x44
 8008f66:	e01f      	b.n	8008fa8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	891b      	ldrh	r3, [r3, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <find_volume+0x3c8>
 8008f70:	230d      	movs	r3, #13
 8008f72:	e094      	b.n	800909e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f7a:	441a      	add	r2, r3
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d103      	bne.n	8008f90 <find_volume+0x3e4>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	e00a      	b.n	8008fa6 <find_volume+0x3fa>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	4613      	mov	r3, r2
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	4413      	add	r3, r2
 8008f9a:	085a      	lsrs	r2, r3, #1
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008fa6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	899b      	ldrh	r3, [r3, #12]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb4:	440b      	add	r3, r1
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fba:	8989      	ldrh	r1, [r1, #12]
 8008fbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d201      	bcs.n	8008fc8 <find_volume+0x41c>
 8008fc4:	230d      	movs	r3, #13
 8008fc6:	e06a      	b.n	800909e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	f04f 32ff 	mov.w	r2, #4294967295
 8008fce:	615a      	str	r2, [r3, #20]
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	695a      	ldr	r2, [r3, #20]
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	2280      	movs	r2, #128	; 0x80
 8008fdc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008fde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d149      	bne.n	800907a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	3334      	adds	r3, #52	; 0x34
 8008fea:	3330      	adds	r3, #48	; 0x30
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe fb3b 	bl	8007668 <ld_word>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d140      	bne.n	800907a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009000:	f7fe fde2 	bl	8007bc8 <move_window>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d137      	bne.n	800907a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	2200      	movs	r2, #0
 800900e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	3334      	adds	r3, #52	; 0x34
 8009014:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fb25 	bl	8007668 <ld_word>
 800901e:	4603      	mov	r3, r0
 8009020:	461a      	mov	r2, r3
 8009022:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009026:	429a      	cmp	r2, r3
 8009028:	d127      	bne.n	800907a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	3334      	adds	r3, #52	; 0x34
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fb32 	bl	8007698 <ld_dword>
 8009034:	4603      	mov	r3, r0
 8009036:	4a1c      	ldr	r2, [pc, #112]	; (80090a8 <find_volume+0x4fc>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d11e      	bne.n	800907a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	3334      	adds	r3, #52	; 0x34
 8009040:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe fb27 	bl	8007698 <ld_dword>
 800904a:	4603      	mov	r3, r0
 800904c:	4a17      	ldr	r2, [pc, #92]	; (80090ac <find_volume+0x500>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d113      	bne.n	800907a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	3334      	adds	r3, #52	; 0x34
 8009056:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fb1c 	bl	8007698 <ld_dword>
 8009060:	4602      	mov	r2, r0
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	3334      	adds	r3, #52	; 0x34
 800906a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fb12 	bl	8007698 <ld_dword>
 8009074:	4602      	mov	r2, r0
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009080:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009082:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <find_volume+0x504>)
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <find_volume+0x504>)
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <find_volume+0x504>)
 8009090:	881a      	ldrh	r2, [r3, #0]
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009096:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009098:	f7fe fd2e 	bl	8007af8 <clear_lock>
#endif
	return FR_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3758      	adds	r7, #88	; 0x58
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	41615252 	.word	0x41615252
 80090ac:	61417272 	.word	0x61417272
 80090b0:	200000cc 	.word	0x200000cc

080090b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80090be:	2309      	movs	r3, #9
 80090c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01c      	beq.n	8009102 <validate+0x4e>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d018      	beq.n	8009102 <validate+0x4e>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d013      	beq.n	8009102 <validate+0x4e>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	889a      	ldrh	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	88db      	ldrh	r3, [r3, #6]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d10c      	bne.n	8009102 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fa1c 	bl	800752c <disk_status>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <validate+0x4e>
			res = FR_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d102      	bne.n	800910e <validate+0x5a>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	e000      	b.n	8009110 <validate+0x5c>
 800910e:	2300      	movs	r3, #0
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	6013      	str	r3, [r2, #0]
	return res;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009132:	f107 0310 	add.w	r3, r7, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff fc9e 	bl	8008a78 <get_ldnumber>
 800913c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	2b00      	cmp	r3, #0
 8009142:	da01      	bge.n	8009148 <f_mount+0x28>
 8009144:	230b      	movs	r3, #11
 8009146:	e02b      	b.n	80091a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009148:	4a17      	ldr	r2, [pc, #92]	; (80091a8 <f_mount+0x88>)
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009150:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009158:	69b8      	ldr	r0, [r7, #24]
 800915a:	f7fe fccd 	bl	8007af8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	2200      	movs	r2, #0
 8009162:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	490d      	ldr	r1, [pc, #52]	; (80091a8 <f_mount+0x88>)
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <f_mount+0x66>
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d001      	beq.n	800918a <f_mount+0x6a>
 8009186:	2300      	movs	r3, #0
 8009188:	e00a      	b.n	80091a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800918a:	f107 010c 	add.w	r1, r7, #12
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	2200      	movs	r2, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff fd09 	bl	8008bac <find_volume>
 800919a:	4603      	mov	r3, r0
 800919c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800919e:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	200000c4 	.word	0x200000c4

080091ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b098      	sub	sp, #96	; 0x60
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <f_open+0x18>
 80091c0:	2309      	movs	r3, #9
 80091c2:	e1bb      	b.n	800953c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80091cc:	79fa      	ldrb	r2, [r7, #7]
 80091ce:	f107 0110 	add.w	r1, r7, #16
 80091d2:	f107 0308 	add.w	r3, r7, #8
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fce8 	bl	8008bac <find_volume>
 80091dc:	4603      	mov	r3, r0
 80091de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80091e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f040 819f 	bne.w	800952a <f_open+0x37e>
		dj.obj.fs = fs;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	f107 0314 	add.w	r3, r7, #20
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fbc7 	bl	800898c <follow_path>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009208:	2b00      	cmp	r3, #0
 800920a:	d11a      	bne.n	8009242 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800920c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009210:	b25b      	sxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	da03      	bge.n	800921e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009216:	2306      	movs	r3, #6
 8009218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800921c:	e011      	b.n	8009242 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	f023 0301 	bic.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	f107 0314 	add.w	r3, r7, #20
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fb16 	bl	8007868 <chk_lock>
 800923c:	4603      	mov	r3, r0
 800923e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	f003 031c 	and.w	r3, r3, #28
 8009248:	2b00      	cmp	r3, #0
 800924a:	d07f      	beq.n	800934c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800924c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009250:	2b00      	cmp	r3, #0
 8009252:	d017      	beq.n	8009284 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009258:	2b04      	cmp	r3, #4
 800925a:	d10e      	bne.n	800927a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800925c:	f7fe fb60 	bl	8007920 <enq_lock>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d006      	beq.n	8009274 <f_open+0xc8>
 8009266:	f107 0314 	add.w	r3, r7, #20
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff fac8 	bl	8008800 <dir_register>
 8009270:	4603      	mov	r3, r0
 8009272:	e000      	b.n	8009276 <f_open+0xca>
 8009274:	2312      	movs	r3, #18
 8009276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800927a:	79fb      	ldrb	r3, [r7, #7]
 800927c:	f043 0308 	orr.w	r3, r3, #8
 8009280:	71fb      	strb	r3, [r7, #7]
 8009282:	e010      	b.n	80092a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009284:	7ebb      	ldrb	r3, [r7, #26]
 8009286:	f003 0311 	and.w	r3, r3, #17
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <f_open+0xea>
					res = FR_DENIED;
 800928e:	2307      	movs	r3, #7
 8009290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009294:	e007      	b.n	80092a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <f_open+0xfa>
 80092a0:	2308      	movs	r3, #8
 80092a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80092a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d168      	bne.n	8009380 <f_open+0x1d4>
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d063      	beq.n	8009380 <f_open+0x1d4>
				dw = GET_FATTIME();
 80092b8:	f7fb f8e4 	bl	8004484 <get_fattime>
 80092bc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c0:	330e      	adds	r3, #14
 80092c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fa25 	bl	8007714 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80092ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092cc:	3316      	adds	r3, #22
 80092ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe fa1f 	bl	8007714 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	330b      	adds	r3, #11
 80092da:	2220      	movs	r2, #32
 80092dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff f9f7 	bl	80086d8 <ld_clust>
 80092ea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092f0:	2200      	movs	r2, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fa0f 	bl	8008716 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	331c      	adds	r3, #28
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fa08 	bl	8007714 <st_dword>
					fs->wflag = 1;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	2201      	movs	r2, #1
 8009308:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800930a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d037      	beq.n	8009380 <f_open+0x1d4>
						dw = fs->winsect;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009316:	f107 0314 	add.w	r3, r7, #20
 800931a:	2200      	movs	r2, #0
 800931c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe feff 	bl	8008122 <remove_chain>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800932a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800932e:	2b00      	cmp	r3, #0
 8009330:	d126      	bne.n	8009380 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fc46 	bl	8007bc8 <move_window>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009346:	3a01      	subs	r2, #1
 8009348:	611a      	str	r2, [r3, #16]
 800934a:	e019      	b.n	8009380 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800934c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009350:	2b00      	cmp	r3, #0
 8009352:	d115      	bne.n	8009380 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009354:	7ebb      	ldrb	r3, [r7, #26]
 8009356:	f003 0310 	and.w	r3, r3, #16
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <f_open+0x1ba>
					res = FR_NO_FILE;
 800935e:	2304      	movs	r3, #4
 8009360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009364:	e00c      	b.n	8009380 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <f_open+0x1d4>
 8009370:	7ebb      	ldrb	r3, [r7, #26]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <f_open+0x1d4>
						res = FR_DENIED;
 800937a:	2307      	movs	r3, #7
 800937c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009384:	2b00      	cmp	r3, #0
 8009386:	d128      	bne.n	80093da <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009398:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80093a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	f023 0301 	bic.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bf14      	ite	ne
 80093b2:	2301      	movne	r3, #1
 80093b4:	2300      	moveq	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	f107 0314 	add.w	r3, r7, #20
 80093be:	4611      	mov	r1, r2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe facf 	bl	8007964 <inc_lock>
 80093c6:	4602      	mov	r2, r0
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <f_open+0x22e>
 80093d4:	2302      	movs	r3, #2
 80093d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80093da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f040 80a3 	bne.w	800952a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff f974 	bl	80086d8 <ld_clust>
 80093f0:	4602      	mov	r2, r0
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	331c      	adds	r3, #28
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe f94c 	bl	8007698 <ld_dword>
 8009400:	4602      	mov	r2, r0
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	88da      	ldrh	r2, [r3, #6]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	79fa      	ldrb	r2, [r7, #7]
 800941e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3330      	adds	r3, #48	; 0x30
 8009436:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800943a:	2100      	movs	r1, #0
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe f9b6 	bl	80077ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d06e      	beq.n	800952a <f_open+0x37e>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d06a      	beq.n	800952a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	895b      	ldrh	r3, [r3, #10]
 8009460:	461a      	mov	r2, r3
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	899b      	ldrh	r3, [r3, #12]
 8009466:	fb03 f302 	mul.w	r3, r3, r2
 800946a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	657b      	str	r3, [r7, #84]	; 0x54
 8009478:	e016      	b.n	80094a8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe fc5f 	bl	8007d42 <get_fat>
 8009484:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009488:	2b01      	cmp	r3, #1
 800948a:	d802      	bhi.n	8009492 <f_open+0x2e6>
 800948c:	2302      	movs	r3, #2
 800948e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d102      	bne.n	80094a0 <f_open+0x2f4>
 800949a:	2301      	movs	r3, #1
 800949c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80094a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	657b      	str	r3, [r7, #84]	; 0x54
 80094a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <f_open+0x30c>
 80094b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d8e0      	bhi.n	800947a <f_open+0x2ce>
				}
				fp->clust = clst;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80094be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d131      	bne.n	800952a <f_open+0x37e>
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	899b      	ldrh	r3, [r3, #12]
 80094ca:	461a      	mov	r2, r3
 80094cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80094d2:	fb02 f201 	mul.w	r2, r2, r1
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d026      	beq.n	800952a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe fc0f 	bl	8007d04 <clust2sect>
 80094e6:	6478      	str	r0, [r7, #68]	; 0x44
 80094e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d103      	bne.n	80094f6 <f_open+0x34a>
						res = FR_INT_ERR;
 80094ee:	2302      	movs	r3, #2
 80094f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80094f4:	e019      	b.n	800952a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	899b      	ldrh	r3, [r3, #12]
 80094fa:	461a      	mov	r2, r3
 80094fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009504:	441a      	add	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	7858      	ldrb	r0, [r3, #1]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a1a      	ldr	r2, [r3, #32]
 8009518:	2301      	movs	r3, #1
 800951a:	f7fe f847 	bl	80075ac <disk_read>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <f_open+0x37e>
 8009524:	2301      	movs	r3, #1
 8009526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800952a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <f_open+0x38c>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800953c:	4618      	mov	r0, r3
 800953e:	3760      	adds	r7, #96	; 0x60
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08e      	sub	sp, #56	; 0x38
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f107 0214 	add.w	r2, r7, #20
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff fda5 	bl	80090b4 <validate>
 800956a:	4603      	mov	r3, r0
 800956c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009574:	2b00      	cmp	r3, #0
 8009576:	d107      	bne.n	8009588 <f_read+0x44>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	7d5b      	ldrb	r3, [r3, #21]
 800957c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <f_read+0x4a>
 8009588:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800958c:	e135      	b.n	80097fa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	7d1b      	ldrb	r3, [r3, #20]
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <f_read+0x5a>
 800959a:	2307      	movs	r3, #7
 800959c:	e12d      	b.n	80097fa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	f240 811e 	bls.w	80097f0 <f_read+0x2ac>
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80095b8:	e11a      	b.n	80097f0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	8992      	ldrh	r2, [r2, #12]
 80095c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80095c6:	fb02 f201 	mul.w	r2, r2, r1
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f040 80d5 	bne.w	800977c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	8992      	ldrh	r2, [r2, #12]
 80095da:	fbb3 f3f2 	udiv	r3, r3, r2
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	8952      	ldrh	r2, [r2, #10]
 80095e2:	3a01      	subs	r2, #1
 80095e4:	4013      	ands	r3, r2
 80095e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d12f      	bne.n	800964e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d103      	bne.n	80095fe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
 80095fc:	e013      	b.n	8009626 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d007      	beq.n	8009616 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	4619      	mov	r1, r3
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7fe fe85 	bl	800831c <clmt_clust>
 8009612:	6338      	str	r0, [r7, #48]	; 0x30
 8009614:	e007      	b.n	8009626 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f7fe fb8f 	bl	8007d42 <get_fat>
 8009624:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	2b01      	cmp	r3, #1
 800962a:	d804      	bhi.n	8009636 <f_read+0xf2>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2202      	movs	r2, #2
 8009630:	755a      	strb	r2, [r3, #21]
 8009632:	2302      	movs	r3, #2
 8009634:	e0e1      	b.n	80097fa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d104      	bne.n	8009648 <f_read+0x104>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	755a      	strb	r2, [r3, #21]
 8009644:	2301      	movs	r3, #1
 8009646:	e0d8      	b.n	80097fa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f7fe fb54 	bl	8007d04 <clust2sect>
 800965c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d104      	bne.n	800966e <f_read+0x12a>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2202      	movs	r2, #2
 8009668:	755a      	strb	r2, [r3, #21]
 800966a:	2302      	movs	r3, #2
 800966c:	e0c5      	b.n	80097fa <f_read+0x2b6>
			sect += csect;
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	899b      	ldrh	r3, [r3, #12]
 800967a:	461a      	mov	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009682:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	2b00      	cmp	r3, #0
 8009688:	d041      	beq.n	800970e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	4413      	add	r3, r2
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	8952      	ldrh	r2, [r2, #10]
 8009694:	4293      	cmp	r3, r2
 8009696:	d905      	bls.n	80096a4 <f_read+0x160>
					cc = fs->csize - csect;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	895b      	ldrh	r3, [r3, #10]
 800969c:	461a      	mov	r2, r3
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	7858      	ldrb	r0, [r3, #1]
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096ae:	f7fd ff7d 	bl	80075ac <disk_read>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d004      	beq.n	80096c2 <f_read+0x17e>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	755a      	strb	r2, [r3, #21]
 80096be:	2301      	movs	r3, #1
 80096c0:	e09b      	b.n	80097fa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	7d1b      	ldrb	r3, [r3, #20]
 80096c6:	b25b      	sxtb	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da18      	bge.n	80096fe <f_read+0x1ba>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6a1a      	ldr	r2, [r3, #32]
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d911      	bls.n	80096fe <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a1a      	ldr	r2, [r3, #32]
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	8992      	ldrh	r2, [r2, #12]
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ec:	18d0      	adds	r0, r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	899b      	ldrh	r3, [r3, #12]
 80096f8:	461a      	mov	r2, r3
 80096fa:	f7fe f837 	bl	800776c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	899b      	ldrh	r3, [r3, #12]
 8009702:	461a      	mov	r2, r3
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	fb02 f303 	mul.w	r3, r2, r3
 800970a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800970c:	e05c      	b.n	80097c8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	429a      	cmp	r2, r3
 8009716:	d02e      	beq.n	8009776 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	7d1b      	ldrb	r3, [r3, #20]
 800971c:	b25b      	sxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	da18      	bge.n	8009754 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	7858      	ldrb	r0, [r3, #1]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a1a      	ldr	r2, [r3, #32]
 8009730:	2301      	movs	r3, #1
 8009732:	f7fd ff5b 	bl	80075ec <disk_write>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d004      	beq.n	8009746 <f_read+0x202>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	755a      	strb	r2, [r3, #21]
 8009742:	2301      	movs	r3, #1
 8009744:	e059      	b.n	80097fa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	7d1b      	ldrb	r3, [r3, #20]
 800974a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800974e:	b2da      	uxtb	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	7858      	ldrb	r0, [r3, #1]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800975e:	2301      	movs	r3, #1
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	f7fd ff23 	bl	80075ac <disk_read>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <f_read+0x232>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	755a      	strb	r2, [r3, #21]
 8009772:	2301      	movs	r3, #1
 8009774:	e041      	b.n	80097fa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	899b      	ldrh	r3, [r3, #12]
 8009780:	4618      	mov	r0, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	8992      	ldrh	r2, [r2, #12]
 800978a:	fbb3 f1f2 	udiv	r1, r3, r2
 800978e:	fb02 f201 	mul.w	r2, r2, r1
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	1ac3      	subs	r3, r0, r3
 8009796:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d901      	bls.n	80097a4 <f_read+0x260>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	8992      	ldrh	r2, [r2, #12]
 80097b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80097b6:	fb02 f200 	mul.w	r2, r2, r0
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	440b      	add	r3, r1
 80097be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097c0:	4619      	mov	r1, r3
 80097c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097c4:	f7fd ffd2 	bl	800776c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80097c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	4413      	add	r3, r2
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	699a      	ldr	r2, [r3, #24]
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	441a      	add	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	619a      	str	r2, [r3, #24]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e2:	441a      	add	r2, r3
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f47f aee1 	bne.w	80095ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3738      	adds	r7, #56	; 0x38
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b08c      	sub	sp, #48	; 0x30
 8009806:	af00      	add	r7, sp, #0
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f107 0210 	add.w	r2, r7, #16
 8009820:	4611      	mov	r1, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff fc46 	bl	80090b4 <validate>
 8009828:	4603      	mov	r3, r0
 800982a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800982e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009832:	2b00      	cmp	r3, #0
 8009834:	d107      	bne.n	8009846 <f_write+0x44>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	7d5b      	ldrb	r3, [r3, #21]
 800983a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800983e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <f_write+0x4a>
 8009846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800984a:	e16a      	b.n	8009b22 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	7d1b      	ldrb	r3, [r3, #20]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <f_write+0x5a>
 8009858:	2307      	movs	r3, #7
 800985a:	e162      	b.n	8009b22 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	441a      	add	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	429a      	cmp	r2, r3
 800986a:	f080 814c 	bcs.w	8009b06 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	43db      	mvns	r3, r3
 8009874:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009876:	e146      	b.n	8009b06 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	8992      	ldrh	r2, [r2, #12]
 8009880:	fbb3 f1f2 	udiv	r1, r3, r2
 8009884:	fb02 f201 	mul.w	r2, r2, r1
 8009888:	1a9b      	subs	r3, r3, r2
 800988a:	2b00      	cmp	r3, #0
 800988c:	f040 80f1 	bne.w	8009a72 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	8992      	ldrh	r2, [r2, #12]
 8009898:	fbb3 f3f2 	udiv	r3, r3, r2
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	8952      	ldrh	r2, [r2, #10]
 80098a0:	3a01      	subs	r2, #1
 80098a2:	4013      	ands	r3, r2
 80098a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d143      	bne.n	8009934 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10c      	bne.n	80098ce <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d11a      	bne.n	80098f6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2100      	movs	r1, #0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe fc91 	bl	80081ec <create_chain>
 80098ca:	62b8      	str	r0, [r7, #40]	; 0x28
 80098cc:	e013      	b.n	80098f6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	4619      	mov	r1, r3
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7fe fd1d 	bl	800831c <clmt_clust>
 80098e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80098e4:	e007      	b.n	80098f6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f7fe fc7c 	bl	80081ec <create_chain>
 80098f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8109 	beq.w	8009b10 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	2b01      	cmp	r3, #1
 8009902:	d104      	bne.n	800990e <f_write+0x10c>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2202      	movs	r2, #2
 8009908:	755a      	strb	r2, [r3, #21]
 800990a:	2302      	movs	r3, #2
 800990c:	e109      	b.n	8009b22 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d104      	bne.n	8009920 <f_write+0x11e>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	755a      	strb	r2, [r3, #21]
 800991c:	2301      	movs	r3, #1
 800991e:	e100      	b.n	8009b22 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009924:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <f_write+0x132>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009932:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	7d1b      	ldrb	r3, [r3, #20]
 8009938:	b25b      	sxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	da18      	bge.n	8009970 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	7858      	ldrb	r0, [r3, #1]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6a1a      	ldr	r2, [r3, #32]
 800994c:	2301      	movs	r3, #1
 800994e:	f7fd fe4d 	bl	80075ec <disk_write>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d004      	beq.n	8009962 <f_write+0x160>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2201      	movs	r2, #1
 800995c:	755a      	strb	r2, [r3, #21]
 800995e:	2301      	movs	r3, #1
 8009960:	e0df      	b.n	8009b22 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	7d1b      	ldrb	r3, [r3, #20]
 8009966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996a:	b2da      	uxtb	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	4619      	mov	r1, r3
 8009978:	4610      	mov	r0, r2
 800997a:	f7fe f9c3 	bl	8007d04 <clust2sect>
 800997e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <f_write+0x18e>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2202      	movs	r2, #2
 800998a:	755a      	strb	r2, [r3, #21]
 800998c:	2302      	movs	r3, #2
 800998e:	e0c8      	b.n	8009b22 <f_write+0x320>
			sect += csect;
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	4413      	add	r3, r2
 8009996:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	899b      	ldrh	r3, [r3, #12]
 800999c:	461a      	mov	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d043      	beq.n	8009a34 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	4413      	add	r3, r2
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	8952      	ldrh	r2, [r2, #10]
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d905      	bls.n	80099c6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	895b      	ldrh	r3, [r3, #10]
 80099be:	461a      	mov	r2, r3
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	7858      	ldrb	r0, [r3, #1]
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	69f9      	ldr	r1, [r7, #28]
 80099d0:	f7fd fe0c 	bl	80075ec <disk_write>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <f_write+0x1e2>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	755a      	strb	r2, [r3, #21]
 80099e0:	2301      	movs	r3, #1
 80099e2:	e09e      	b.n	8009b22 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a1a      	ldr	r2, [r3, #32]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	6a3a      	ldr	r2, [r7, #32]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d918      	bls.n	8009a24 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a1a      	ldr	r2, [r3, #32]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	8992      	ldrh	r2, [r2, #12]
 8009a04:	fb02 f303 	mul.w	r3, r2, r3
 8009a08:	69fa      	ldr	r2, [r7, #28]
 8009a0a:	18d1      	adds	r1, r2, r3
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	899b      	ldrh	r3, [r3, #12]
 8009a10:	461a      	mov	r2, r3
 8009a12:	f7fd feab 	bl	800776c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	7d1b      	ldrb	r3, [r3, #20]
 8009a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	899b      	ldrh	r3, [r3, #12]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	fb02 f303 	mul.w	r3, r2, r3
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009a32:	e04b      	b.n	8009acc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d016      	beq.n	8009a6c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d210      	bcs.n	8009a6c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	7858      	ldrb	r0, [r3, #1]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a54:	2301      	movs	r3, #1
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	f7fd fda8 	bl	80075ac <disk_read>
 8009a5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d004      	beq.n	8009a6c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2201      	movs	r2, #1
 8009a66:	755a      	strb	r2, [r3, #21]
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e05a      	b.n	8009b22 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	899b      	ldrh	r3, [r3, #12]
 8009a76:	4618      	mov	r0, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	8992      	ldrh	r2, [r2, #12]
 8009a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a84:	fb02 f201 	mul.w	r2, r2, r1
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	1ac3      	subs	r3, r0, r3
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d901      	bls.n	8009a9a <f_write+0x298>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	8992      	ldrh	r2, [r2, #12]
 8009aa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009aac:	fb02 f200 	mul.w	r2, r2, r0
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab6:	69f9      	ldr	r1, [r7, #28]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fd fe57 	bl	800776c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	7d1b      	ldrb	r3, [r3, #20]
 8009ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	4413      	add	r3, r2
 8009ad2:	61fb      	str	r3, [r7, #28]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	441a      	add	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	619a      	str	r2, [r3, #24]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	bf38      	it	cc
 8009aec:	461a      	movcc	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	441a      	add	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f47f aeb5 	bne.w	8009878 <f_write+0x76>
 8009b0e:	e000      	b.n	8009b12 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009b10:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	7d1b      	ldrb	r3, [r3, #20]
 8009b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3730      	adds	r7, #48	; 0x30
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b086      	sub	sp, #24
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f107 0208 	add.w	r2, r7, #8
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff faba 	bl	80090b4 <validate>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d168      	bne.n	8009c1c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7d1b      	ldrb	r3, [r3, #20]
 8009b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d062      	beq.n	8009c1c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7d1b      	ldrb	r3, [r3, #20]
 8009b5a:	b25b      	sxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da15      	bge.n	8009b8c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	7858      	ldrb	r0, [r3, #1]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1a      	ldr	r2, [r3, #32]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f7fd fd3c 	bl	80075ec <disk_write>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <f_sync+0x54>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e04f      	b.n	8009c1e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	7d1b      	ldrb	r3, [r3, #20]
 8009b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009b8c:	f7fa fc7a 	bl	8004484 <get_fattime>
 8009b90:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f7fe f814 	bl	8007bc8 <move_window>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d138      	bne.n	8009c1c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	330b      	adds	r3, #11
 8009bb4:	781a      	ldrb	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	330b      	adds	r3, #11
 8009bba:	f042 0220 	orr.w	r2, r2, #32
 8009bbe:	b2d2      	uxtb	r2, r2
 8009bc0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	f7fe fda2 	bl	8008716 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f103 021c 	add.w	r2, r3, #28
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f7fd fd98 	bl	8007714 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3316      	adds	r3, #22
 8009be8:	6939      	ldr	r1, [r7, #16]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fd fd92 	bl	8007714 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3312      	adds	r3, #18
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fd fd71 	bl	80076de <st_word>
					fs->wflag = 1;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe f80d 	bl	8007c24 <sync_fs>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7d1b      	ldrb	r3, [r3, #20]
 8009c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff ff7b 	bl	8009b2a <f_sync>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d118      	bne.n	8009c70 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f107 0208 	add.w	r2, r7, #8
 8009c44:	4611      	mov	r1, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fa34 	bl	80090b4 <validate>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10c      	bne.n	8009c70 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fd ff10 	bl	8007a80 <dec_lock>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d102      	bne.n	8009c70 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	4613      	mov	r3, r2
 8009c88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c92:	4b1f      	ldr	r3, [pc, #124]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009c94:	7b9b      	ldrb	r3, [r3, #14]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d831      	bhi.n	8009d00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c9c:	4b1c      	ldr	r3, [pc, #112]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009c9e:	7b9b      	ldrb	r3, [r3, #14]
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009caa:	4b19      	ldr	r3, [pc, #100]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009cac:	7b9b      	ldrb	r3, [r3, #14]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	4a17      	ldr	r2, [pc, #92]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009cba:	4b15      	ldr	r3, [pc, #84]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009cbc:	7b9b      	ldrb	r3, [r3, #14]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4b13      	ldr	r3, [pc, #76]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009cc4:	4413      	add	r3, r2
 8009cc6:	79fa      	ldrb	r2, [r7, #7]
 8009cc8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8009cca:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009ccc:	7b9b      	ldrb	r3, [r3, #14]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	1c5a      	adds	r2, r3, #1
 8009cd2:	b2d1      	uxtb	r1, r2
 8009cd4:	4a0e      	ldr	r2, [pc, #56]	; (8009d10 <FATFS_LinkDriverEx+0x94>)
 8009cd6:	7391      	strb	r1, [r2, #14]
 8009cd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cda:	7dbb      	ldrb	r3, [r7, #22]
 8009cdc:	3330      	adds	r3, #48	; 0x30
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	223a      	movs	r2, #58	; 0x3a
 8009cea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	3302      	adds	r3, #2
 8009cf0:	222f      	movs	r2, #47	; 0x2f
 8009cf2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	3303      	adds	r3, #3
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	200000f0 	.word	0x200000f0

08009d14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff ffaa 	bl	8009c7c <FATFS_LinkDriverEx>
 8009d28:	4603      	mov	r3, r0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	490e      	ldr	r1, [pc, #56]	; (8009d74 <MX_USB_HOST_Init+0x40>)
 8009d3c:	480e      	ldr	r0, [pc, #56]	; (8009d78 <MX_USB_HOST_Init+0x44>)
 8009d3e:	f7fc f89d 	bl	8005e7c <USBH_Init>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009d48:	f7f6 fe22 	bl	8000990 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8009d4c:	490b      	ldr	r1, [pc, #44]	; (8009d7c <MX_USB_HOST_Init+0x48>)
 8009d4e:	480a      	ldr	r0, [pc, #40]	; (8009d78 <MX_USB_HOST_Init+0x44>)
 8009d50:	f7fc f922 	bl	8005f98 <USBH_RegisterClass>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009d5a:	f7f6 fe19 	bl	8000990 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009d5e:	4806      	ldr	r0, [pc, #24]	; (8009d78 <MX_USB_HOST_Init+0x44>)
 8009d60:	f7fc f9a6 	bl	80060b0 <USBH_Start>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d6a:	f7f6 fe11 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009d6e:	bf00      	nop
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	08009d95 	.word	0x08009d95
 8009d78:	200062bc 	.word	0x200062bc
 8009d7c:	20000020 	.word	0x20000020

08009d80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009d84:	4802      	ldr	r0, [pc, #8]	; (8009d90 <MX_USB_HOST_Process+0x10>)
 8009d86:	f7fc f9a3 	bl	80060d0 <USBH_Process>
}
 8009d8a:	bf00      	nop
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	200062bc 	.word	0x200062bc

08009d94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	2b04      	cmp	r3, #4
 8009da6:	d819      	bhi.n	8009ddc <USBH_UserProcess+0x48>
 8009da8:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <USBH_UserProcess+0x1c>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009ddd 	.word	0x08009ddd
 8009db4:	08009dcd 	.word	0x08009dcd
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009dd5 	.word	0x08009dd5
 8009dc0:	08009dc5 	.word	0x08009dc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009dc4:	4b09      	ldr	r3, [pc, #36]	; (8009dec <USBH_UserProcess+0x58>)
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	701a      	strb	r2, [r3, #0]
  break;
 8009dca:	e008      	b.n	8009dde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009dcc:	4b07      	ldr	r3, [pc, #28]	; (8009dec <USBH_UserProcess+0x58>)
 8009dce:	2202      	movs	r2, #2
 8009dd0:	701a      	strb	r2, [r3, #0]
  break;
 8009dd2:	e004      	b.n	8009dde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009dd4:	4b05      	ldr	r3, [pc, #20]	; (8009dec <USBH_UserProcess+0x58>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	701a      	strb	r2, [r3, #0]
  break;
 8009dda:	e000      	b.n	8009dde <USBH_UserProcess+0x4a>

  default:
  break;
 8009ddc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	20000100 	.word	0x20000100

08009df0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08a      	sub	sp, #40	; 0x28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009df8:	f107 0314 	add.w	r3, r7, #20
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	605a      	str	r2, [r3, #4]
 8009e02:	609a      	str	r2, [r3, #8]
 8009e04:	60da      	str	r2, [r3, #12]
 8009e06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e10:	d147      	bne.n	8009ea2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e12:	2300      	movs	r3, #0
 8009e14:	613b      	str	r3, [r7, #16]
 8009e16:	4b25      	ldr	r3, [pc, #148]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1a:	4a24      	ldr	r2, [pc, #144]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e1c:	f043 0301 	orr.w	r3, r3, #1
 8009e20:	6313      	str	r3, [r2, #48]	; 0x30
 8009e22:	4b22      	ldr	r3, [pc, #136]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	613b      	str	r3, [r7, #16]
 8009e2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	4619      	mov	r1, r3
 8009e42:	481b      	ldr	r0, [pc, #108]	; (8009eb0 <HAL_HCD_MspInit+0xc0>)
 8009e44:	f7f7 f820 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e56:	2303      	movs	r3, #3
 8009e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e5a:	230a      	movs	r3, #10
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e5e:	f107 0314 	add.w	r3, r7, #20
 8009e62:	4619      	mov	r1, r3
 8009e64:	4812      	ldr	r0, [pc, #72]	; (8009eb0 <HAL_HCD_MspInit+0xc0>)
 8009e66:	f7f7 f80f 	bl	8000e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e6a:	4b10      	ldr	r3, [pc, #64]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6e:	4a0f      	ldr	r2, [pc, #60]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e74:	6353      	str	r3, [r2, #52]	; 0x34
 8009e76:	2300      	movs	r3, #0
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e7e:	4a0b      	ldr	r2, [pc, #44]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e84:	6453      	str	r3, [r2, #68]	; 0x44
 8009e86:	4b09      	ldr	r3, [pc, #36]	; (8009eac <HAL_HCD_MspInit+0xbc>)
 8009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e92:	2200      	movs	r2, #0
 8009e94:	2100      	movs	r1, #0
 8009e96:	2043      	movs	r0, #67	; 0x43
 8009e98:	f7f6 ffbf 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e9c:	2043      	movs	r0, #67	; 0x43
 8009e9e:	f7f6 ffd8 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ea2:	bf00      	nop
 8009ea4:	3728      	adds	r7, #40	; 0x28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	40023800 	.word	0x40023800
 8009eb0:	40020000 	.word	0x40020000

08009eb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fc fcd7 	bl	8006876 <USBH_LL_IncTimer>
}
 8009ec8:	bf00      	nop
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fc fd0f 	bl	8006902 <USBH_LL_Connect>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fc fd18 	bl	8006930 <USBH_LL_Disconnect>
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
 8009f14:	4613      	mov	r3, r2
 8009f16:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fc fcc9 	bl	80068ca <USBH_LL_PortEnabled>
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fc fcc9 	bl	80068e6 <USBH_LL_PortDisabled>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d12a      	bne.n	8009fc4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009f6e:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009f7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f7e:	4b14      	ldr	r3, [pc, #80]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009f80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009f88:	2208      	movs	r2, #8
 8009f8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009f8c:	4b10      	ldr	r3, [pc, #64]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009f98:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f9e:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009fa4:	480a      	ldr	r0, [pc, #40]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009fa6:	f7f7 f93c 	bl	8001222 <HAL_HCD_Init>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009fb0:	f7f6 fcee 	bl	8000990 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009fb4:	4806      	ldr	r0, [pc, #24]	; (8009fd0 <USBH_LL_Init+0x74>)
 8009fb6:	f7f7 fd19 	bl	80019ec <HAL_HCD_GetCurrentFrame>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7fc fc4a 	bl	8006858 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20006694 	.word	0x20006694

08009fd4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f7 fc88 	bl	8001900 <HAL_HCD_Start>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 f98c 	bl	800a314 <USBH_Get_USB_Status>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a000:	7bbb      	ldrb	r3, [r7, #14]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a020:	4618      	mov	r0, r3
 800a022:	f7f7 fc90 	bl	8001946 <HAL_HCD_Stop>
 800a026:	4603      	mov	r3, r0
 800a028:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 f971 	bl	800a314 <USBH_Get_USB_Status>
 800a032:	4603      	mov	r3, r0
 800a034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a036:	7bbb      	ldrb	r3, [r7, #14]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a048:	2301      	movs	r3, #1
 800a04a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a052:	4618      	mov	r0, r3
 800a054:	f7f7 fcd8 	bl	8001a08 <HAL_HCD_GetCurrentSpeed>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d00c      	beq.n	800a078 <USBH_LL_GetSpeed+0x38>
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d80d      	bhi.n	800a07e <USBH_LL_GetSpeed+0x3e>
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <USBH_LL_GetSpeed+0x2c>
 800a066:	2b01      	cmp	r3, #1
 800a068:	d003      	beq.n	800a072 <USBH_LL_GetSpeed+0x32>
 800a06a:	e008      	b.n	800a07e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]
    break;
 800a070:	e008      	b.n	800a084 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a072:	2301      	movs	r3, #1
 800a074:	73fb      	strb	r3, [r7, #15]
    break;
 800a076:	e005      	b.n	800a084 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a078:	2302      	movs	r3, #2
 800a07a:	73fb      	strb	r3, [r7, #15]
    break;
 800a07c:	e002      	b.n	800a084 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a07e:	2301      	movs	r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]
    break;
 800a082:	bf00      	nop
  }
  return  speed;
 800a084:	7bfb      	ldrb	r3, [r7, #15]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f7 fc6b 	bl	8001980 <HAL_HCD_ResetPort>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f92f 	bl	800a314 <USBH_Get_USB_Status>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	4611      	mov	r1, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f7 fc72 	bl	80019c4 <HAL_HCD_HC_GetXferCount>
 800a0e0:	4603      	mov	r3, r0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a0ea:	b590      	push	{r4, r7, lr}
 800a0ec:	b089      	sub	sp, #36	; 0x24
 800a0ee:	af04      	add	r7, sp, #16
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	4608      	mov	r0, r1
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	70fb      	strb	r3, [r7, #3]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70bb      	strb	r3, [r7, #2]
 800a100:	4613      	mov	r3, r2
 800a102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a112:	787c      	ldrb	r4, [r7, #1]
 800a114:	78ba      	ldrb	r2, [r7, #2]
 800a116:	78f9      	ldrb	r1, [r7, #3]
 800a118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a11a:	9302      	str	r3, [sp, #8]
 800a11c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	4623      	mov	r3, r4
 800a12a:	f7f7 f8dc 	bl	80012e6 <HAL_HCD_HC_Init>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 f8ed 	bl	800a314 <USBH_Get_USB_Status>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	bd90      	pop	{r4, r7, pc}

0800a148 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f7f7 f94c 	bl	8001404 <HAL_HCD_HC_Halt>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f8ce 	bl	800a314 <USBH_Get_USB_Status>
 800a178:	4603      	mov	r3, r0
 800a17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a186:	b590      	push	{r4, r7, lr}
 800a188:	b089      	sub	sp, #36	; 0x24
 800a18a:	af04      	add	r7, sp, #16
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	4608      	mov	r0, r1
 800a190:	4611      	mov	r1, r2
 800a192:	461a      	mov	r2, r3
 800a194:	4603      	mov	r3, r0
 800a196:	70fb      	strb	r3, [r7, #3]
 800a198:	460b      	mov	r3, r1
 800a19a:	70bb      	strb	r3, [r7, #2]
 800a19c:	4613      	mov	r3, r2
 800a19e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a1ae:	787c      	ldrb	r4, [r7, #1]
 800a1b0:	78ba      	ldrb	r2, [r7, #2]
 800a1b2:	78f9      	ldrb	r1, [r7, #3]
 800a1b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1bc:	9302      	str	r3, [sp, #8]
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	9301      	str	r3, [sp, #4]
 800a1c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	f7f7 f93f 	bl	800144c <HAL_HCD_HC_SubmitRequest>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 f89d 	bl	800a314 <USBH_Get_USB_Status>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd90      	pop	{r4, r7, pc}

0800a1e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1fa:	78fa      	ldrb	r2, [r7, #3]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f7 fbcc 	bl	800199c <HAL_HCD_HC_GetURBState>
 800a204:	4603      	mov	r3, r0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a220:	2b01      	cmp	r3, #1
 800a222:	d103      	bne.n	800a22c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a224:	78fb      	ldrb	r3, [r7, #3]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f8a0 	bl	800a36c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a22c:	20c8      	movs	r0, #200	; 0xc8
 800a22e:	f7f6 fcf5 	bl	8000c1c <HAL_Delay>
  return USBH_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	460b      	mov	r3, r1
 800a246:	70fb      	strb	r3, [r7, #3]
 800a248:	4613      	mov	r3, r2
 800a24a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a252:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	212c      	movs	r1, #44	; 0x2c
 800a25a:	fb01 f303 	mul.w	r3, r1, r3
 800a25e:	4413      	add	r3, r2
 800a260:	333b      	adds	r3, #59	; 0x3b
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d009      	beq.n	800a27c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	212c      	movs	r1, #44	; 0x2c
 800a26e:	fb01 f303 	mul.w	r3, r1, r3
 800a272:	4413      	add	r3, r2
 800a274:	3354      	adds	r3, #84	; 0x54
 800a276:	78ba      	ldrb	r2, [r7, #2]
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	e008      	b.n	800a28e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	212c      	movs	r1, #44	; 0x2c
 800a282:	fb01 f303 	mul.w	r3, r1, r3
 800a286:	4413      	add	r3, r2
 800a288:	3355      	adds	r3, #85	; 0x55
 800a28a:	78ba      	ldrb	r2, [r7, #2]
 800a28c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2b2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	212c      	movs	r1, #44	; 0x2c
 800a2ba:	fb01 f303 	mul.w	r3, r1, r3
 800a2be:	4413      	add	r3, r2
 800a2c0:	333b      	adds	r3, #59	; 0x3b
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d009      	beq.n	800a2dc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	212c      	movs	r1, #44	; 0x2c
 800a2ce:	fb01 f303 	mul.w	r3, r1, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3354      	adds	r3, #84	; 0x54
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	73fb      	strb	r3, [r7, #15]
 800a2da:	e008      	b.n	800a2ee <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	212c      	movs	r1, #44	; 0x2c
 800a2e2:	fb01 f303 	mul.w	r3, r1, r3
 800a2e6:	4413      	add	r3, r2
 800a2e8:	3355      	adds	r3, #85	; 0x55
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7f6 fc89 	bl	8000c1c <HAL_Delay>
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	2b03      	cmp	r3, #3
 800a326:	d817      	bhi.n	800a358 <USBH_Get_USB_Status+0x44>
 800a328:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <USBH_Get_USB_Status+0x1c>)
 800a32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32e:	bf00      	nop
 800a330:	0800a341 	.word	0x0800a341
 800a334:	0800a347 	.word	0x0800a347
 800a338:	0800a34d 	.word	0x0800a34d
 800a33c:	0800a353 	.word	0x0800a353
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
    break;
 800a344:	e00b      	b.n	800a35e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a346:	2302      	movs	r3, #2
 800a348:	73fb      	strb	r3, [r7, #15]
    break;
 800a34a:	e008      	b.n	800a35e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a34c:	2301      	movs	r3, #1
 800a34e:	73fb      	strb	r3, [r7, #15]
    break;
 800a350:	e005      	b.n	800a35e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a352:	2302      	movs	r3, #2
 800a354:	73fb      	strb	r3, [r7, #15]
    break;
 800a356:	e002      	b.n	800a35e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a358:	2302      	movs	r3, #2
 800a35a:	73fb      	strb	r3, [r7, #15]
    break;
 800a35c:	bf00      	nop
  }
  return usb_status;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a380:	2301      	movs	r3, #1
 800a382:	73fb      	strb	r3, [r7, #15]
 800a384:	e001      	b.n	800a38a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	461a      	mov	r2, r3
 800a38e:	2101      	movs	r1, #1
 800a390:	4803      	ldr	r0, [pc, #12]	; (800a3a0 <MX_DriverVbusFS+0x34>)
 800a392:	f7f6 ff2d 	bl	80011f0 <HAL_GPIO_WritePin>
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	40020800 	.word	0x40020800

0800a3a4 <__errno>:
 800a3a4:	4b01      	ldr	r3, [pc, #4]	; (800a3ac <__errno+0x8>)
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	20000040 	.word	0x20000040

0800a3b0 <__libc_init_array>:
 800a3b0:	b570      	push	{r4, r5, r6, lr}
 800a3b2:	4d0d      	ldr	r5, [pc, #52]	; (800a3e8 <__libc_init_array+0x38>)
 800a3b4:	4c0d      	ldr	r4, [pc, #52]	; (800a3ec <__libc_init_array+0x3c>)
 800a3b6:	1b64      	subs	r4, r4, r5
 800a3b8:	10a4      	asrs	r4, r4, #2
 800a3ba:	2600      	movs	r6, #0
 800a3bc:	42a6      	cmp	r6, r4
 800a3be:	d109      	bne.n	800a3d4 <__libc_init_array+0x24>
 800a3c0:	4d0b      	ldr	r5, [pc, #44]	; (800a3f0 <__libc_init_array+0x40>)
 800a3c2:	4c0c      	ldr	r4, [pc, #48]	; (800a3f4 <__libc_init_array+0x44>)
 800a3c4:	f000 fc5e 	bl	800ac84 <_init>
 800a3c8:	1b64      	subs	r4, r4, r5
 800a3ca:	10a4      	asrs	r4, r4, #2
 800a3cc:	2600      	movs	r6, #0
 800a3ce:	42a6      	cmp	r6, r4
 800a3d0:	d105      	bne.n	800a3de <__libc_init_array+0x2e>
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d8:	4798      	blx	r3
 800a3da:	3601      	adds	r6, #1
 800a3dc:	e7ee      	b.n	800a3bc <__libc_init_array+0xc>
 800a3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e2:	4798      	blx	r3
 800a3e4:	3601      	adds	r6, #1
 800a3e6:	e7f2      	b.n	800a3ce <__libc_init_array+0x1e>
 800a3e8:	0800b44c 	.word	0x0800b44c
 800a3ec:	0800b44c 	.word	0x0800b44c
 800a3f0:	0800b44c 	.word	0x0800b44c
 800a3f4:	0800b450 	.word	0x0800b450

0800a3f8 <malloc>:
 800a3f8:	4b02      	ldr	r3, [pc, #8]	; (800a404 <malloc+0xc>)
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	6818      	ldr	r0, [r3, #0]
 800a3fe:	f000 b871 	b.w	800a4e4 <_malloc_r>
 800a402:	bf00      	nop
 800a404:	20000040 	.word	0x20000040

0800a408 <free>:
 800a408:	4b02      	ldr	r3, [pc, #8]	; (800a414 <free+0xc>)
 800a40a:	4601      	mov	r1, r0
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	f000 b819 	b.w	800a444 <_free_r>
 800a412:	bf00      	nop
 800a414:	20000040 	.word	0x20000040

0800a418 <memcpy>:
 800a418:	440a      	add	r2, r1
 800a41a:	4291      	cmp	r1, r2
 800a41c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a420:	d100      	bne.n	800a424 <memcpy+0xc>
 800a422:	4770      	bx	lr
 800a424:	b510      	push	{r4, lr}
 800a426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a42a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a42e:	4291      	cmp	r1, r2
 800a430:	d1f9      	bne.n	800a426 <memcpy+0xe>
 800a432:	bd10      	pop	{r4, pc}

0800a434 <memset>:
 800a434:	4402      	add	r2, r0
 800a436:	4603      	mov	r3, r0
 800a438:	4293      	cmp	r3, r2
 800a43a:	d100      	bne.n	800a43e <memset+0xa>
 800a43c:	4770      	bx	lr
 800a43e:	f803 1b01 	strb.w	r1, [r3], #1
 800a442:	e7f9      	b.n	800a438 <memset+0x4>

0800a444 <_free_r>:
 800a444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a446:	2900      	cmp	r1, #0
 800a448:	d048      	beq.n	800a4dc <_free_r+0x98>
 800a44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44e:	9001      	str	r0, [sp, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	f1a1 0404 	sub.w	r4, r1, #4
 800a456:	bfb8      	it	lt
 800a458:	18e4      	addlt	r4, r4, r3
 800a45a:	f000 f8cd 	bl	800a5f8 <__malloc_lock>
 800a45e:	4a20      	ldr	r2, [pc, #128]	; (800a4e0 <_free_r+0x9c>)
 800a460:	9801      	ldr	r0, [sp, #4]
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	4615      	mov	r5, r2
 800a466:	b933      	cbnz	r3, 800a476 <_free_r+0x32>
 800a468:	6063      	str	r3, [r4, #4]
 800a46a:	6014      	str	r4, [r2, #0]
 800a46c:	b003      	add	sp, #12
 800a46e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a472:	f000 b8c7 	b.w	800a604 <__malloc_unlock>
 800a476:	42a3      	cmp	r3, r4
 800a478:	d90b      	bls.n	800a492 <_free_r+0x4e>
 800a47a:	6821      	ldr	r1, [r4, #0]
 800a47c:	1862      	adds	r2, r4, r1
 800a47e:	4293      	cmp	r3, r2
 800a480:	bf04      	itt	eq
 800a482:	681a      	ldreq	r2, [r3, #0]
 800a484:	685b      	ldreq	r3, [r3, #4]
 800a486:	6063      	str	r3, [r4, #4]
 800a488:	bf04      	itt	eq
 800a48a:	1852      	addeq	r2, r2, r1
 800a48c:	6022      	streq	r2, [r4, #0]
 800a48e:	602c      	str	r4, [r5, #0]
 800a490:	e7ec      	b.n	800a46c <_free_r+0x28>
 800a492:	461a      	mov	r2, r3
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	b10b      	cbz	r3, 800a49c <_free_r+0x58>
 800a498:	42a3      	cmp	r3, r4
 800a49a:	d9fa      	bls.n	800a492 <_free_r+0x4e>
 800a49c:	6811      	ldr	r1, [r2, #0]
 800a49e:	1855      	adds	r5, r2, r1
 800a4a0:	42a5      	cmp	r5, r4
 800a4a2:	d10b      	bne.n	800a4bc <_free_r+0x78>
 800a4a4:	6824      	ldr	r4, [r4, #0]
 800a4a6:	4421      	add	r1, r4
 800a4a8:	1854      	adds	r4, r2, r1
 800a4aa:	42a3      	cmp	r3, r4
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	d1dd      	bne.n	800a46c <_free_r+0x28>
 800a4b0:	681c      	ldr	r4, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	6053      	str	r3, [r2, #4]
 800a4b6:	4421      	add	r1, r4
 800a4b8:	6011      	str	r1, [r2, #0]
 800a4ba:	e7d7      	b.n	800a46c <_free_r+0x28>
 800a4bc:	d902      	bls.n	800a4c4 <_free_r+0x80>
 800a4be:	230c      	movs	r3, #12
 800a4c0:	6003      	str	r3, [r0, #0]
 800a4c2:	e7d3      	b.n	800a46c <_free_r+0x28>
 800a4c4:	6825      	ldr	r5, [r4, #0]
 800a4c6:	1961      	adds	r1, r4, r5
 800a4c8:	428b      	cmp	r3, r1
 800a4ca:	bf04      	itt	eq
 800a4cc:	6819      	ldreq	r1, [r3, #0]
 800a4ce:	685b      	ldreq	r3, [r3, #4]
 800a4d0:	6063      	str	r3, [r4, #4]
 800a4d2:	bf04      	itt	eq
 800a4d4:	1949      	addeq	r1, r1, r5
 800a4d6:	6021      	streq	r1, [r4, #0]
 800a4d8:	6054      	str	r4, [r2, #4]
 800a4da:	e7c7      	b.n	800a46c <_free_r+0x28>
 800a4dc:	b003      	add	sp, #12
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	20000104 	.word	0x20000104

0800a4e4 <_malloc_r>:
 800a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e6:	1ccd      	adds	r5, r1, #3
 800a4e8:	f025 0503 	bic.w	r5, r5, #3
 800a4ec:	3508      	adds	r5, #8
 800a4ee:	2d0c      	cmp	r5, #12
 800a4f0:	bf38      	it	cc
 800a4f2:	250c      	movcc	r5, #12
 800a4f4:	2d00      	cmp	r5, #0
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	db01      	blt.n	800a4fe <_malloc_r+0x1a>
 800a4fa:	42a9      	cmp	r1, r5
 800a4fc:	d903      	bls.n	800a506 <_malloc_r+0x22>
 800a4fe:	230c      	movs	r3, #12
 800a500:	6033      	str	r3, [r6, #0]
 800a502:	2000      	movs	r0, #0
 800a504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a506:	f000 f877 	bl	800a5f8 <__malloc_lock>
 800a50a:	4921      	ldr	r1, [pc, #132]	; (800a590 <_malloc_r+0xac>)
 800a50c:	680a      	ldr	r2, [r1, #0]
 800a50e:	4614      	mov	r4, r2
 800a510:	b99c      	cbnz	r4, 800a53a <_malloc_r+0x56>
 800a512:	4f20      	ldr	r7, [pc, #128]	; (800a594 <_malloc_r+0xb0>)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	b923      	cbnz	r3, 800a522 <_malloc_r+0x3e>
 800a518:	4621      	mov	r1, r4
 800a51a:	4630      	mov	r0, r6
 800a51c:	f000 f83c 	bl	800a598 <_sbrk_r>
 800a520:	6038      	str	r0, [r7, #0]
 800a522:	4629      	mov	r1, r5
 800a524:	4630      	mov	r0, r6
 800a526:	f000 f837 	bl	800a598 <_sbrk_r>
 800a52a:	1c43      	adds	r3, r0, #1
 800a52c:	d123      	bne.n	800a576 <_malloc_r+0x92>
 800a52e:	230c      	movs	r3, #12
 800a530:	6033      	str	r3, [r6, #0]
 800a532:	4630      	mov	r0, r6
 800a534:	f000 f866 	bl	800a604 <__malloc_unlock>
 800a538:	e7e3      	b.n	800a502 <_malloc_r+0x1e>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	1b5b      	subs	r3, r3, r5
 800a53e:	d417      	bmi.n	800a570 <_malloc_r+0x8c>
 800a540:	2b0b      	cmp	r3, #11
 800a542:	d903      	bls.n	800a54c <_malloc_r+0x68>
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	441c      	add	r4, r3
 800a548:	6025      	str	r5, [r4, #0]
 800a54a:	e004      	b.n	800a556 <_malloc_r+0x72>
 800a54c:	6863      	ldr	r3, [r4, #4]
 800a54e:	42a2      	cmp	r2, r4
 800a550:	bf0c      	ite	eq
 800a552:	600b      	streq	r3, [r1, #0]
 800a554:	6053      	strne	r3, [r2, #4]
 800a556:	4630      	mov	r0, r6
 800a558:	f000 f854 	bl	800a604 <__malloc_unlock>
 800a55c:	f104 000b 	add.w	r0, r4, #11
 800a560:	1d23      	adds	r3, r4, #4
 800a562:	f020 0007 	bic.w	r0, r0, #7
 800a566:	1ac2      	subs	r2, r0, r3
 800a568:	d0cc      	beq.n	800a504 <_malloc_r+0x20>
 800a56a:	1a1b      	subs	r3, r3, r0
 800a56c:	50a3      	str	r3, [r4, r2]
 800a56e:	e7c9      	b.n	800a504 <_malloc_r+0x20>
 800a570:	4622      	mov	r2, r4
 800a572:	6864      	ldr	r4, [r4, #4]
 800a574:	e7cc      	b.n	800a510 <_malloc_r+0x2c>
 800a576:	1cc4      	adds	r4, r0, #3
 800a578:	f024 0403 	bic.w	r4, r4, #3
 800a57c:	42a0      	cmp	r0, r4
 800a57e:	d0e3      	beq.n	800a548 <_malloc_r+0x64>
 800a580:	1a21      	subs	r1, r4, r0
 800a582:	4630      	mov	r0, r6
 800a584:	f000 f808 	bl	800a598 <_sbrk_r>
 800a588:	3001      	adds	r0, #1
 800a58a:	d1dd      	bne.n	800a548 <_malloc_r+0x64>
 800a58c:	e7cf      	b.n	800a52e <_malloc_r+0x4a>
 800a58e:	bf00      	nop
 800a590:	20000104 	.word	0x20000104
 800a594:	20000108 	.word	0x20000108

0800a598 <_sbrk_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4d06      	ldr	r5, [pc, #24]	; (800a5b4 <_sbrk_r+0x1c>)
 800a59c:	2300      	movs	r3, #0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f6 fa56 	bl	8000a54 <_sbrk>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_sbrk_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_sbrk_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	20006998 	.word	0x20006998

0800a5b8 <siprintf>:
 800a5b8:	b40e      	push	{r1, r2, r3}
 800a5ba:	b500      	push	{lr}
 800a5bc:	b09c      	sub	sp, #112	; 0x70
 800a5be:	ab1d      	add	r3, sp, #116	; 0x74
 800a5c0:	9002      	str	r0, [sp, #8]
 800a5c2:	9006      	str	r0, [sp, #24]
 800a5c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5c8:	4809      	ldr	r0, [pc, #36]	; (800a5f0 <siprintf+0x38>)
 800a5ca:	9107      	str	r1, [sp, #28]
 800a5cc:	9104      	str	r1, [sp, #16]
 800a5ce:	4909      	ldr	r1, [pc, #36]	; (800a5f4 <siprintf+0x3c>)
 800a5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d4:	9105      	str	r1, [sp, #20]
 800a5d6:	6800      	ldr	r0, [r0, #0]
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	a902      	add	r1, sp, #8
 800a5dc:	f000 f874 	bl	800a6c8 <_svfiprintf_r>
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	b01c      	add	sp, #112	; 0x70
 800a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ec:	b003      	add	sp, #12
 800a5ee:	4770      	bx	lr
 800a5f0:	20000040 	.word	0x20000040
 800a5f4:	ffff0208 	.word	0xffff0208

0800a5f8 <__malloc_lock>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	; (800a600 <__malloc_lock+0x8>)
 800a5fa:	f000 baf9 	b.w	800abf0 <__retarget_lock_acquire_recursive>
 800a5fe:	bf00      	nop
 800a600:	200069a0 	.word	0x200069a0

0800a604 <__malloc_unlock>:
 800a604:	4801      	ldr	r0, [pc, #4]	; (800a60c <__malloc_unlock+0x8>)
 800a606:	f000 baf4 	b.w	800abf2 <__retarget_lock_release_recursive>
 800a60a:	bf00      	nop
 800a60c:	200069a0 	.word	0x200069a0

0800a610 <__ssputs_r>:
 800a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a614:	688e      	ldr	r6, [r1, #8]
 800a616:	429e      	cmp	r6, r3
 800a618:	4682      	mov	sl, r0
 800a61a:	460c      	mov	r4, r1
 800a61c:	4690      	mov	r8, r2
 800a61e:	461f      	mov	r7, r3
 800a620:	d838      	bhi.n	800a694 <__ssputs_r+0x84>
 800a622:	898a      	ldrh	r2, [r1, #12]
 800a624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a628:	d032      	beq.n	800a690 <__ssputs_r+0x80>
 800a62a:	6825      	ldr	r5, [r4, #0]
 800a62c:	6909      	ldr	r1, [r1, #16]
 800a62e:	eba5 0901 	sub.w	r9, r5, r1
 800a632:	6965      	ldr	r5, [r4, #20]
 800a634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a63c:	3301      	adds	r3, #1
 800a63e:	444b      	add	r3, r9
 800a640:	106d      	asrs	r5, r5, #1
 800a642:	429d      	cmp	r5, r3
 800a644:	bf38      	it	cc
 800a646:	461d      	movcc	r5, r3
 800a648:	0553      	lsls	r3, r2, #21
 800a64a:	d531      	bpl.n	800a6b0 <__ssputs_r+0xa0>
 800a64c:	4629      	mov	r1, r5
 800a64e:	f7ff ff49 	bl	800a4e4 <_malloc_r>
 800a652:	4606      	mov	r6, r0
 800a654:	b950      	cbnz	r0, 800a66c <__ssputs_r+0x5c>
 800a656:	230c      	movs	r3, #12
 800a658:	f8ca 3000 	str.w	r3, [sl]
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66c:	6921      	ldr	r1, [r4, #16]
 800a66e:	464a      	mov	r2, r9
 800a670:	f7ff fed2 	bl	800a418 <memcpy>
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	6126      	str	r6, [r4, #16]
 800a682:	6165      	str	r5, [r4, #20]
 800a684:	444e      	add	r6, r9
 800a686:	eba5 0509 	sub.w	r5, r5, r9
 800a68a:	6026      	str	r6, [r4, #0]
 800a68c:	60a5      	str	r5, [r4, #8]
 800a68e:	463e      	mov	r6, r7
 800a690:	42be      	cmp	r6, r7
 800a692:	d900      	bls.n	800a696 <__ssputs_r+0x86>
 800a694:	463e      	mov	r6, r7
 800a696:	4632      	mov	r2, r6
 800a698:	6820      	ldr	r0, [r4, #0]
 800a69a:	4641      	mov	r1, r8
 800a69c:	f000 faaa 	bl	800abf4 <memmove>
 800a6a0:	68a3      	ldr	r3, [r4, #8]
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	1b9b      	subs	r3, r3, r6
 800a6a6:	4432      	add	r2, r6
 800a6a8:	60a3      	str	r3, [r4, #8]
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	e7db      	b.n	800a668 <__ssputs_r+0x58>
 800a6b0:	462a      	mov	r2, r5
 800a6b2:	f000 fab9 	bl	800ac28 <_realloc_r>
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d1e1      	bne.n	800a680 <__ssputs_r+0x70>
 800a6bc:	6921      	ldr	r1, [r4, #16]
 800a6be:	4650      	mov	r0, sl
 800a6c0:	f7ff fec0 	bl	800a444 <_free_r>
 800a6c4:	e7c7      	b.n	800a656 <__ssputs_r+0x46>
	...

0800a6c8 <_svfiprintf_r>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	4698      	mov	r8, r3
 800a6ce:	898b      	ldrh	r3, [r1, #12]
 800a6d0:	061b      	lsls	r3, r3, #24
 800a6d2:	b09d      	sub	sp, #116	; 0x74
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	4614      	mov	r4, r2
 800a6da:	d50e      	bpl.n	800a6fa <_svfiprintf_r+0x32>
 800a6dc:	690b      	ldr	r3, [r1, #16]
 800a6de:	b963      	cbnz	r3, 800a6fa <_svfiprintf_r+0x32>
 800a6e0:	2140      	movs	r1, #64	; 0x40
 800a6e2:	f7ff feff 	bl	800a4e4 <_malloc_r>
 800a6e6:	6028      	str	r0, [r5, #0]
 800a6e8:	6128      	str	r0, [r5, #16]
 800a6ea:	b920      	cbnz	r0, 800a6f6 <_svfiprintf_r+0x2e>
 800a6ec:	230c      	movs	r3, #12
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f4:	e0d1      	b.n	800a89a <_svfiprintf_r+0x1d2>
 800a6f6:	2340      	movs	r3, #64	; 0x40
 800a6f8:	616b      	str	r3, [r5, #20]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fe:	2320      	movs	r3, #32
 800a700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a704:	f8cd 800c 	str.w	r8, [sp, #12]
 800a708:	2330      	movs	r3, #48	; 0x30
 800a70a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8b4 <_svfiprintf_r+0x1ec>
 800a70e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a712:	f04f 0901 	mov.w	r9, #1
 800a716:	4623      	mov	r3, r4
 800a718:	469a      	mov	sl, r3
 800a71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a71e:	b10a      	cbz	r2, 800a724 <_svfiprintf_r+0x5c>
 800a720:	2a25      	cmp	r2, #37	; 0x25
 800a722:	d1f9      	bne.n	800a718 <_svfiprintf_r+0x50>
 800a724:	ebba 0b04 	subs.w	fp, sl, r4
 800a728:	d00b      	beq.n	800a742 <_svfiprintf_r+0x7a>
 800a72a:	465b      	mov	r3, fp
 800a72c:	4622      	mov	r2, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff ff6d 	bl	800a610 <__ssputs_r>
 800a736:	3001      	adds	r0, #1
 800a738:	f000 80aa 	beq.w	800a890 <_svfiprintf_r+0x1c8>
 800a73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a73e:	445a      	add	r2, fp
 800a740:	9209      	str	r2, [sp, #36]	; 0x24
 800a742:	f89a 3000 	ldrb.w	r3, [sl]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 80a2 	beq.w	800a890 <_svfiprintf_r+0x1c8>
 800a74c:	2300      	movs	r3, #0
 800a74e:	f04f 32ff 	mov.w	r2, #4294967295
 800a752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a756:	f10a 0a01 	add.w	sl, sl, #1
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	9307      	str	r3, [sp, #28]
 800a75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a762:	931a      	str	r3, [sp, #104]	; 0x68
 800a764:	4654      	mov	r4, sl
 800a766:	2205      	movs	r2, #5
 800a768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a76c:	4851      	ldr	r0, [pc, #324]	; (800a8b4 <_svfiprintf_r+0x1ec>)
 800a76e:	f7f5 fd37 	bl	80001e0 <memchr>
 800a772:	9a04      	ldr	r2, [sp, #16]
 800a774:	b9d8      	cbnz	r0, 800a7ae <_svfiprintf_r+0xe6>
 800a776:	06d0      	lsls	r0, r2, #27
 800a778:	bf44      	itt	mi
 800a77a:	2320      	movmi	r3, #32
 800a77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a780:	0711      	lsls	r1, r2, #28
 800a782:	bf44      	itt	mi
 800a784:	232b      	movmi	r3, #43	; 0x2b
 800a786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a78a:	f89a 3000 	ldrb.w	r3, [sl]
 800a78e:	2b2a      	cmp	r3, #42	; 0x2a
 800a790:	d015      	beq.n	800a7be <_svfiprintf_r+0xf6>
 800a792:	9a07      	ldr	r2, [sp, #28]
 800a794:	4654      	mov	r4, sl
 800a796:	2000      	movs	r0, #0
 800a798:	f04f 0c0a 	mov.w	ip, #10
 800a79c:	4621      	mov	r1, r4
 800a79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7a2:	3b30      	subs	r3, #48	; 0x30
 800a7a4:	2b09      	cmp	r3, #9
 800a7a6:	d94e      	bls.n	800a846 <_svfiprintf_r+0x17e>
 800a7a8:	b1b0      	cbz	r0, 800a7d8 <_svfiprintf_r+0x110>
 800a7aa:	9207      	str	r2, [sp, #28]
 800a7ac:	e014      	b.n	800a7d8 <_svfiprintf_r+0x110>
 800a7ae:	eba0 0308 	sub.w	r3, r0, r8
 800a7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	46a2      	mov	sl, r4
 800a7bc:	e7d2      	b.n	800a764 <_svfiprintf_r+0x9c>
 800a7be:	9b03      	ldr	r3, [sp, #12]
 800a7c0:	1d19      	adds	r1, r3, #4
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	9103      	str	r1, [sp, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	bfbb      	ittet	lt
 800a7ca:	425b      	neglt	r3, r3
 800a7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d0:	9307      	strge	r3, [sp, #28]
 800a7d2:	9307      	strlt	r3, [sp, #28]
 800a7d4:	bfb8      	it	lt
 800a7d6:	9204      	strlt	r2, [sp, #16]
 800a7d8:	7823      	ldrb	r3, [r4, #0]
 800a7da:	2b2e      	cmp	r3, #46	; 0x2e
 800a7dc:	d10c      	bne.n	800a7f8 <_svfiprintf_r+0x130>
 800a7de:	7863      	ldrb	r3, [r4, #1]
 800a7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e2:	d135      	bne.n	800a850 <_svfiprintf_r+0x188>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	1d1a      	adds	r2, r3, #4
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	9203      	str	r2, [sp, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bfb8      	it	lt
 800a7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7f4:	3402      	adds	r4, #2
 800a7f6:	9305      	str	r3, [sp, #20]
 800a7f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8c4 <_svfiprintf_r+0x1fc>
 800a7fc:	7821      	ldrb	r1, [r4, #0]
 800a7fe:	2203      	movs	r2, #3
 800a800:	4650      	mov	r0, sl
 800a802:	f7f5 fced 	bl	80001e0 <memchr>
 800a806:	b140      	cbz	r0, 800a81a <_svfiprintf_r+0x152>
 800a808:	2340      	movs	r3, #64	; 0x40
 800a80a:	eba0 000a 	sub.w	r0, r0, sl
 800a80e:	fa03 f000 	lsl.w	r0, r3, r0
 800a812:	9b04      	ldr	r3, [sp, #16]
 800a814:	4303      	orrs	r3, r0
 800a816:	3401      	adds	r4, #1
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	4826      	ldr	r0, [pc, #152]	; (800a8b8 <_svfiprintf_r+0x1f0>)
 800a820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a824:	2206      	movs	r2, #6
 800a826:	f7f5 fcdb 	bl	80001e0 <memchr>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d038      	beq.n	800a8a0 <_svfiprintf_r+0x1d8>
 800a82e:	4b23      	ldr	r3, [pc, #140]	; (800a8bc <_svfiprintf_r+0x1f4>)
 800a830:	bb1b      	cbnz	r3, 800a87a <_svfiprintf_r+0x1b2>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	3307      	adds	r3, #7
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	3308      	adds	r3, #8
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a840:	4433      	add	r3, r6
 800a842:	9309      	str	r3, [sp, #36]	; 0x24
 800a844:	e767      	b.n	800a716 <_svfiprintf_r+0x4e>
 800a846:	fb0c 3202 	mla	r2, ip, r2, r3
 800a84a:	460c      	mov	r4, r1
 800a84c:	2001      	movs	r0, #1
 800a84e:	e7a5      	b.n	800a79c <_svfiprintf_r+0xd4>
 800a850:	2300      	movs	r3, #0
 800a852:	3401      	adds	r4, #1
 800a854:	9305      	str	r3, [sp, #20]
 800a856:	4619      	mov	r1, r3
 800a858:	f04f 0c0a 	mov.w	ip, #10
 800a85c:	4620      	mov	r0, r4
 800a85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a862:	3a30      	subs	r2, #48	; 0x30
 800a864:	2a09      	cmp	r2, #9
 800a866:	d903      	bls.n	800a870 <_svfiprintf_r+0x1a8>
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d0c5      	beq.n	800a7f8 <_svfiprintf_r+0x130>
 800a86c:	9105      	str	r1, [sp, #20]
 800a86e:	e7c3      	b.n	800a7f8 <_svfiprintf_r+0x130>
 800a870:	fb0c 2101 	mla	r1, ip, r1, r2
 800a874:	4604      	mov	r4, r0
 800a876:	2301      	movs	r3, #1
 800a878:	e7f0      	b.n	800a85c <_svfiprintf_r+0x194>
 800a87a:	ab03      	add	r3, sp, #12
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	462a      	mov	r2, r5
 800a880:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <_svfiprintf_r+0x1f8>)
 800a882:	a904      	add	r1, sp, #16
 800a884:	4638      	mov	r0, r7
 800a886:	f3af 8000 	nop.w
 800a88a:	1c42      	adds	r2, r0, #1
 800a88c:	4606      	mov	r6, r0
 800a88e:	d1d6      	bne.n	800a83e <_svfiprintf_r+0x176>
 800a890:	89ab      	ldrh	r3, [r5, #12]
 800a892:	065b      	lsls	r3, r3, #25
 800a894:	f53f af2c 	bmi.w	800a6f0 <_svfiprintf_r+0x28>
 800a898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a89a:	b01d      	add	sp, #116	; 0x74
 800a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a0:	ab03      	add	r3, sp, #12
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	462a      	mov	r2, r5
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <_svfiprintf_r+0x1f8>)
 800a8a8:	a904      	add	r1, sp, #16
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	f000 f87a 	bl	800a9a4 <_printf_i>
 800a8b0:	e7eb      	b.n	800a88a <_svfiprintf_r+0x1c2>
 800a8b2:	bf00      	nop
 800a8b4:	0800b410 	.word	0x0800b410
 800a8b8:	0800b41a 	.word	0x0800b41a
 800a8bc:	00000000 	.word	0x00000000
 800a8c0:	0800a611 	.word	0x0800a611
 800a8c4:	0800b416 	.word	0x0800b416

0800a8c8 <_printf_common>:
 800a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	4699      	mov	r9, r3
 800a8d0:	688a      	ldr	r2, [r1, #8]
 800a8d2:	690b      	ldr	r3, [r1, #16]
 800a8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	bfb8      	it	lt
 800a8dc:	4613      	movlt	r3, r2
 800a8de:	6033      	str	r3, [r6, #0]
 800a8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8e4:	4607      	mov	r7, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	b10a      	cbz	r2, 800a8ee <_printf_common+0x26>
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	6033      	str	r3, [r6, #0]
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	0699      	lsls	r1, r3, #26
 800a8f2:	bf42      	ittt	mi
 800a8f4:	6833      	ldrmi	r3, [r6, #0]
 800a8f6:	3302      	addmi	r3, #2
 800a8f8:	6033      	strmi	r3, [r6, #0]
 800a8fa:	6825      	ldr	r5, [r4, #0]
 800a8fc:	f015 0506 	ands.w	r5, r5, #6
 800a900:	d106      	bne.n	800a910 <_printf_common+0x48>
 800a902:	f104 0a19 	add.w	sl, r4, #25
 800a906:	68e3      	ldr	r3, [r4, #12]
 800a908:	6832      	ldr	r2, [r6, #0]
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	42ab      	cmp	r3, r5
 800a90e:	dc26      	bgt.n	800a95e <_printf_common+0x96>
 800a910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a914:	1e13      	subs	r3, r2, #0
 800a916:	6822      	ldr	r2, [r4, #0]
 800a918:	bf18      	it	ne
 800a91a:	2301      	movne	r3, #1
 800a91c:	0692      	lsls	r2, r2, #26
 800a91e:	d42b      	bmi.n	800a978 <_printf_common+0xb0>
 800a920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a924:	4649      	mov	r1, r9
 800a926:	4638      	mov	r0, r7
 800a928:	47c0      	blx	r8
 800a92a:	3001      	adds	r0, #1
 800a92c:	d01e      	beq.n	800a96c <_printf_common+0xa4>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	68e5      	ldr	r5, [r4, #12]
 800a932:	6832      	ldr	r2, [r6, #0]
 800a934:	f003 0306 	and.w	r3, r3, #6
 800a938:	2b04      	cmp	r3, #4
 800a93a:	bf08      	it	eq
 800a93c:	1aad      	subeq	r5, r5, r2
 800a93e:	68a3      	ldr	r3, [r4, #8]
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	bf0c      	ite	eq
 800a944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a948:	2500      	movne	r5, #0
 800a94a:	4293      	cmp	r3, r2
 800a94c:	bfc4      	itt	gt
 800a94e:	1a9b      	subgt	r3, r3, r2
 800a950:	18ed      	addgt	r5, r5, r3
 800a952:	2600      	movs	r6, #0
 800a954:	341a      	adds	r4, #26
 800a956:	42b5      	cmp	r5, r6
 800a958:	d11a      	bne.n	800a990 <_printf_common+0xc8>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e008      	b.n	800a970 <_printf_common+0xa8>
 800a95e:	2301      	movs	r3, #1
 800a960:	4652      	mov	r2, sl
 800a962:	4649      	mov	r1, r9
 800a964:	4638      	mov	r0, r7
 800a966:	47c0      	blx	r8
 800a968:	3001      	adds	r0, #1
 800a96a:	d103      	bne.n	800a974 <_printf_common+0xac>
 800a96c:	f04f 30ff 	mov.w	r0, #4294967295
 800a970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a974:	3501      	adds	r5, #1
 800a976:	e7c6      	b.n	800a906 <_printf_common+0x3e>
 800a978:	18e1      	adds	r1, r4, r3
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	2030      	movs	r0, #48	; 0x30
 800a97e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a982:	4422      	add	r2, r4
 800a984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a98c:	3302      	adds	r3, #2
 800a98e:	e7c7      	b.n	800a920 <_printf_common+0x58>
 800a990:	2301      	movs	r3, #1
 800a992:	4622      	mov	r2, r4
 800a994:	4649      	mov	r1, r9
 800a996:	4638      	mov	r0, r7
 800a998:	47c0      	blx	r8
 800a99a:	3001      	adds	r0, #1
 800a99c:	d0e6      	beq.n	800a96c <_printf_common+0xa4>
 800a99e:	3601      	adds	r6, #1
 800a9a0:	e7d9      	b.n	800a956 <_printf_common+0x8e>
	...

0800a9a4 <_printf_i>:
 800a9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	4691      	mov	r9, r2
 800a9ac:	7e27      	ldrb	r7, [r4, #24]
 800a9ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a9b0:	2f78      	cmp	r7, #120	; 0x78
 800a9b2:	4680      	mov	r8, r0
 800a9b4:	469a      	mov	sl, r3
 800a9b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9ba:	d807      	bhi.n	800a9cc <_printf_i+0x28>
 800a9bc:	2f62      	cmp	r7, #98	; 0x62
 800a9be:	d80a      	bhi.n	800a9d6 <_printf_i+0x32>
 800a9c0:	2f00      	cmp	r7, #0
 800a9c2:	f000 80d8 	beq.w	800ab76 <_printf_i+0x1d2>
 800a9c6:	2f58      	cmp	r7, #88	; 0x58
 800a9c8:	f000 80a3 	beq.w	800ab12 <_printf_i+0x16e>
 800a9cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9d4:	e03a      	b.n	800aa4c <_printf_i+0xa8>
 800a9d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9da:	2b15      	cmp	r3, #21
 800a9dc:	d8f6      	bhi.n	800a9cc <_printf_i+0x28>
 800a9de:	a001      	add	r0, pc, #4	; (adr r0, 800a9e4 <_printf_i+0x40>)
 800a9e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a9e4:	0800aa3d 	.word	0x0800aa3d
 800a9e8:	0800aa51 	.word	0x0800aa51
 800a9ec:	0800a9cd 	.word	0x0800a9cd
 800a9f0:	0800a9cd 	.word	0x0800a9cd
 800a9f4:	0800a9cd 	.word	0x0800a9cd
 800a9f8:	0800a9cd 	.word	0x0800a9cd
 800a9fc:	0800aa51 	.word	0x0800aa51
 800aa00:	0800a9cd 	.word	0x0800a9cd
 800aa04:	0800a9cd 	.word	0x0800a9cd
 800aa08:	0800a9cd 	.word	0x0800a9cd
 800aa0c:	0800a9cd 	.word	0x0800a9cd
 800aa10:	0800ab5d 	.word	0x0800ab5d
 800aa14:	0800aa81 	.word	0x0800aa81
 800aa18:	0800ab3f 	.word	0x0800ab3f
 800aa1c:	0800a9cd 	.word	0x0800a9cd
 800aa20:	0800a9cd 	.word	0x0800a9cd
 800aa24:	0800ab7f 	.word	0x0800ab7f
 800aa28:	0800a9cd 	.word	0x0800a9cd
 800aa2c:	0800aa81 	.word	0x0800aa81
 800aa30:	0800a9cd 	.word	0x0800a9cd
 800aa34:	0800a9cd 	.word	0x0800a9cd
 800aa38:	0800ab47 	.word	0x0800ab47
 800aa3c:	680b      	ldr	r3, [r1, #0]
 800aa3e:	1d1a      	adds	r2, r3, #4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	600a      	str	r2, [r1, #0]
 800aa44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e0a3      	b.n	800ab98 <_printf_i+0x1f4>
 800aa50:	6825      	ldr	r5, [r4, #0]
 800aa52:	6808      	ldr	r0, [r1, #0]
 800aa54:	062e      	lsls	r6, r5, #24
 800aa56:	f100 0304 	add.w	r3, r0, #4
 800aa5a:	d50a      	bpl.n	800aa72 <_printf_i+0xce>
 800aa5c:	6805      	ldr	r5, [r0, #0]
 800aa5e:	600b      	str	r3, [r1, #0]
 800aa60:	2d00      	cmp	r5, #0
 800aa62:	da03      	bge.n	800aa6c <_printf_i+0xc8>
 800aa64:	232d      	movs	r3, #45	; 0x2d
 800aa66:	426d      	negs	r5, r5
 800aa68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa6c:	485e      	ldr	r0, [pc, #376]	; (800abe8 <_printf_i+0x244>)
 800aa6e:	230a      	movs	r3, #10
 800aa70:	e019      	b.n	800aaa6 <_printf_i+0x102>
 800aa72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aa76:	6805      	ldr	r5, [r0, #0]
 800aa78:	600b      	str	r3, [r1, #0]
 800aa7a:	bf18      	it	ne
 800aa7c:	b22d      	sxthne	r5, r5
 800aa7e:	e7ef      	b.n	800aa60 <_printf_i+0xbc>
 800aa80:	680b      	ldr	r3, [r1, #0]
 800aa82:	6825      	ldr	r5, [r4, #0]
 800aa84:	1d18      	adds	r0, r3, #4
 800aa86:	6008      	str	r0, [r1, #0]
 800aa88:	0628      	lsls	r0, r5, #24
 800aa8a:	d501      	bpl.n	800aa90 <_printf_i+0xec>
 800aa8c:	681d      	ldr	r5, [r3, #0]
 800aa8e:	e002      	b.n	800aa96 <_printf_i+0xf2>
 800aa90:	0669      	lsls	r1, r5, #25
 800aa92:	d5fb      	bpl.n	800aa8c <_printf_i+0xe8>
 800aa94:	881d      	ldrh	r5, [r3, #0]
 800aa96:	4854      	ldr	r0, [pc, #336]	; (800abe8 <_printf_i+0x244>)
 800aa98:	2f6f      	cmp	r7, #111	; 0x6f
 800aa9a:	bf0c      	ite	eq
 800aa9c:	2308      	moveq	r3, #8
 800aa9e:	230a      	movne	r3, #10
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaa6:	6866      	ldr	r6, [r4, #4]
 800aaa8:	60a6      	str	r6, [r4, #8]
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	bfa2      	ittt	ge
 800aaae:	6821      	ldrge	r1, [r4, #0]
 800aab0:	f021 0104 	bicge.w	r1, r1, #4
 800aab4:	6021      	strge	r1, [r4, #0]
 800aab6:	b90d      	cbnz	r5, 800aabc <_printf_i+0x118>
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	d04d      	beq.n	800ab58 <_printf_i+0x1b4>
 800aabc:	4616      	mov	r6, r2
 800aabe:	fbb5 f1f3 	udiv	r1, r5, r3
 800aac2:	fb03 5711 	mls	r7, r3, r1, r5
 800aac6:	5dc7      	ldrb	r7, [r0, r7]
 800aac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aacc:	462f      	mov	r7, r5
 800aace:	42bb      	cmp	r3, r7
 800aad0:	460d      	mov	r5, r1
 800aad2:	d9f4      	bls.n	800aabe <_printf_i+0x11a>
 800aad4:	2b08      	cmp	r3, #8
 800aad6:	d10b      	bne.n	800aaf0 <_printf_i+0x14c>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	07df      	lsls	r7, r3, #31
 800aadc:	d508      	bpl.n	800aaf0 <_printf_i+0x14c>
 800aade:	6923      	ldr	r3, [r4, #16]
 800aae0:	6861      	ldr	r1, [r4, #4]
 800aae2:	4299      	cmp	r1, r3
 800aae4:	bfde      	ittt	le
 800aae6:	2330      	movle	r3, #48	; 0x30
 800aae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aaec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aaf0:	1b92      	subs	r2, r2, r6
 800aaf2:	6122      	str	r2, [r4, #16]
 800aaf4:	f8cd a000 	str.w	sl, [sp]
 800aaf8:	464b      	mov	r3, r9
 800aafa:	aa03      	add	r2, sp, #12
 800aafc:	4621      	mov	r1, r4
 800aafe:	4640      	mov	r0, r8
 800ab00:	f7ff fee2 	bl	800a8c8 <_printf_common>
 800ab04:	3001      	adds	r0, #1
 800ab06:	d14c      	bne.n	800aba2 <_printf_i+0x1fe>
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	b004      	add	sp, #16
 800ab0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab12:	4835      	ldr	r0, [pc, #212]	; (800abe8 <_printf_i+0x244>)
 800ab14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	680e      	ldr	r6, [r1, #0]
 800ab1c:	061f      	lsls	r7, r3, #24
 800ab1e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ab22:	600e      	str	r6, [r1, #0]
 800ab24:	d514      	bpl.n	800ab50 <_printf_i+0x1ac>
 800ab26:	07d9      	lsls	r1, r3, #31
 800ab28:	bf44      	itt	mi
 800ab2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab2e:	6023      	strmi	r3, [r4, #0]
 800ab30:	b91d      	cbnz	r5, 800ab3a <_printf_i+0x196>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	f023 0320 	bic.w	r3, r3, #32
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	2310      	movs	r3, #16
 800ab3c:	e7b0      	b.n	800aaa0 <_printf_i+0xfc>
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f043 0320 	orr.w	r3, r3, #32
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	2378      	movs	r3, #120	; 0x78
 800ab48:	4828      	ldr	r0, [pc, #160]	; (800abec <_printf_i+0x248>)
 800ab4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab4e:	e7e3      	b.n	800ab18 <_printf_i+0x174>
 800ab50:	065e      	lsls	r6, r3, #25
 800ab52:	bf48      	it	mi
 800ab54:	b2ad      	uxthmi	r5, r5
 800ab56:	e7e6      	b.n	800ab26 <_printf_i+0x182>
 800ab58:	4616      	mov	r6, r2
 800ab5a:	e7bb      	b.n	800aad4 <_printf_i+0x130>
 800ab5c:	680b      	ldr	r3, [r1, #0]
 800ab5e:	6826      	ldr	r6, [r4, #0]
 800ab60:	6960      	ldr	r0, [r4, #20]
 800ab62:	1d1d      	adds	r5, r3, #4
 800ab64:	600d      	str	r5, [r1, #0]
 800ab66:	0635      	lsls	r5, r6, #24
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	d501      	bpl.n	800ab70 <_printf_i+0x1cc>
 800ab6c:	6018      	str	r0, [r3, #0]
 800ab6e:	e002      	b.n	800ab76 <_printf_i+0x1d2>
 800ab70:	0671      	lsls	r1, r6, #25
 800ab72:	d5fb      	bpl.n	800ab6c <_printf_i+0x1c8>
 800ab74:	8018      	strh	r0, [r3, #0]
 800ab76:	2300      	movs	r3, #0
 800ab78:	6123      	str	r3, [r4, #16]
 800ab7a:	4616      	mov	r6, r2
 800ab7c:	e7ba      	b.n	800aaf4 <_printf_i+0x150>
 800ab7e:	680b      	ldr	r3, [r1, #0]
 800ab80:	1d1a      	adds	r2, r3, #4
 800ab82:	600a      	str	r2, [r1, #0]
 800ab84:	681e      	ldr	r6, [r3, #0]
 800ab86:	6862      	ldr	r2, [r4, #4]
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7f5 fb28 	bl	80001e0 <memchr>
 800ab90:	b108      	cbz	r0, 800ab96 <_printf_i+0x1f2>
 800ab92:	1b80      	subs	r0, r0, r6
 800ab94:	6060      	str	r0, [r4, #4]
 800ab96:	6863      	ldr	r3, [r4, #4]
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba0:	e7a8      	b.n	800aaf4 <_printf_i+0x150>
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	4632      	mov	r2, r6
 800aba6:	4649      	mov	r1, r9
 800aba8:	4640      	mov	r0, r8
 800abaa:	47d0      	blx	sl
 800abac:	3001      	adds	r0, #1
 800abae:	d0ab      	beq.n	800ab08 <_printf_i+0x164>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	079b      	lsls	r3, r3, #30
 800abb4:	d413      	bmi.n	800abde <_printf_i+0x23a>
 800abb6:	68e0      	ldr	r0, [r4, #12]
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	4298      	cmp	r0, r3
 800abbc:	bfb8      	it	lt
 800abbe:	4618      	movlt	r0, r3
 800abc0:	e7a4      	b.n	800ab0c <_printf_i+0x168>
 800abc2:	2301      	movs	r3, #1
 800abc4:	4632      	mov	r2, r6
 800abc6:	4649      	mov	r1, r9
 800abc8:	4640      	mov	r0, r8
 800abca:	47d0      	blx	sl
 800abcc:	3001      	adds	r0, #1
 800abce:	d09b      	beq.n	800ab08 <_printf_i+0x164>
 800abd0:	3501      	adds	r5, #1
 800abd2:	68e3      	ldr	r3, [r4, #12]
 800abd4:	9903      	ldr	r1, [sp, #12]
 800abd6:	1a5b      	subs	r3, r3, r1
 800abd8:	42ab      	cmp	r3, r5
 800abda:	dcf2      	bgt.n	800abc2 <_printf_i+0x21e>
 800abdc:	e7eb      	b.n	800abb6 <_printf_i+0x212>
 800abde:	2500      	movs	r5, #0
 800abe0:	f104 0619 	add.w	r6, r4, #25
 800abe4:	e7f5      	b.n	800abd2 <_printf_i+0x22e>
 800abe6:	bf00      	nop
 800abe8:	0800b421 	.word	0x0800b421
 800abec:	0800b432 	.word	0x0800b432

0800abf0 <__retarget_lock_acquire_recursive>:
 800abf0:	4770      	bx	lr

0800abf2 <__retarget_lock_release_recursive>:
 800abf2:	4770      	bx	lr

0800abf4 <memmove>:
 800abf4:	4288      	cmp	r0, r1
 800abf6:	b510      	push	{r4, lr}
 800abf8:	eb01 0402 	add.w	r4, r1, r2
 800abfc:	d902      	bls.n	800ac04 <memmove+0x10>
 800abfe:	4284      	cmp	r4, r0
 800ac00:	4623      	mov	r3, r4
 800ac02:	d807      	bhi.n	800ac14 <memmove+0x20>
 800ac04:	1e43      	subs	r3, r0, #1
 800ac06:	42a1      	cmp	r1, r4
 800ac08:	d008      	beq.n	800ac1c <memmove+0x28>
 800ac0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac12:	e7f8      	b.n	800ac06 <memmove+0x12>
 800ac14:	4402      	add	r2, r0
 800ac16:	4601      	mov	r1, r0
 800ac18:	428a      	cmp	r2, r1
 800ac1a:	d100      	bne.n	800ac1e <memmove+0x2a>
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac26:	e7f7      	b.n	800ac18 <memmove+0x24>

0800ac28 <_realloc_r>:
 800ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2a:	4607      	mov	r7, r0
 800ac2c:	4614      	mov	r4, r2
 800ac2e:	460e      	mov	r6, r1
 800ac30:	b921      	cbnz	r1, 800ac3c <_realloc_r+0x14>
 800ac32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac36:	4611      	mov	r1, r2
 800ac38:	f7ff bc54 	b.w	800a4e4 <_malloc_r>
 800ac3c:	b922      	cbnz	r2, 800ac48 <_realloc_r+0x20>
 800ac3e:	f7ff fc01 	bl	800a444 <_free_r>
 800ac42:	4625      	mov	r5, r4
 800ac44:	4628      	mov	r0, r5
 800ac46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac48:	f000 f814 	bl	800ac74 <_malloc_usable_size_r>
 800ac4c:	42a0      	cmp	r0, r4
 800ac4e:	d20f      	bcs.n	800ac70 <_realloc_r+0x48>
 800ac50:	4621      	mov	r1, r4
 800ac52:	4638      	mov	r0, r7
 800ac54:	f7ff fc46 	bl	800a4e4 <_malloc_r>
 800ac58:	4605      	mov	r5, r0
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d0f2      	beq.n	800ac44 <_realloc_r+0x1c>
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4622      	mov	r2, r4
 800ac62:	f7ff fbd9 	bl	800a418 <memcpy>
 800ac66:	4631      	mov	r1, r6
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f7ff fbeb 	bl	800a444 <_free_r>
 800ac6e:	e7e9      	b.n	800ac44 <_realloc_r+0x1c>
 800ac70:	4635      	mov	r5, r6
 800ac72:	e7e7      	b.n	800ac44 <_realloc_r+0x1c>

0800ac74 <_malloc_usable_size_r>:
 800ac74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac78:	1f18      	subs	r0, r3, #4
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bfbc      	itt	lt
 800ac7e:	580b      	ldrlt	r3, [r1, r0]
 800ac80:	18c0      	addlt	r0, r0, r3
 800ac82:	4770      	bx	lr

0800ac84 <_init>:
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac86:	bf00      	nop
 800ac88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac8a:	bc08      	pop	{r3}
 800ac8c:	469e      	mov	lr, r3
 800ac8e:	4770      	bx	lr

0800ac90 <_fini>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr
